*--------------------------------------------------------------------------------------------------*
*              Print of an invoice by SAPscript                                                    *
*--------------------------------------------------------------------------------------------------*
* Vers. Datum    Autor         Comment
* 1.0   21.1.08  IMG-MDs        changes to adjust to the current CTT version
* 1.1   29.1.08  IMG-MDs        changes according new requirements for the
*                               Billing Document
* 1.3   20.10.08 IMG-MDs        changes according new requirements for the
*                               Billing Document from 15.10 - 20.10.2008
* 1.4   20.10.08 IMG-MDs        changes according new requirements for the
*                                   Billing Document from 24.10.2008
* 1.5   19.11.08 IMG-MDs        Adjutments for customizable ULINE in forms
* 1.6   23.04.09 AO-Sam         Localization for Singapore
* 1.7   30.06.09 AO-Sam         Changes for migrate project doc.
* 1.8   24.07.09 AO-Sam         Changes for currency issues
* 1.9   02.06.10 Atos-Chenlp    Changes for sales organization 3300
* 2.0   09.07.10 Atos-Chenxh    Changes terms of payment for sales organization 3300
* 2.1   18.01.11 ORI-TIBREWAL(Atos) Changes specific for CTIN for sales Org 3200
* 2.2   26.01.11 GeB             Insert customer material number
* 2.3   11.04.11 ORI-MULTANI(Atos) Changes specific for CTIN for sales Org 3200
* 2.4   11.06.12 Atos-Chenlp     Changes for sales organization 2300
* 3.0   09.08.13 YASH-CHITTA     Commented code related to Sales org.2300
*                                Removed hard coding for Sales org.
* 4.0   16.09.2014 Meng(NOCO)    C2316 for CTXC
* 5.0   08.01.2016 ZEN-JUTURU    CHG3012303- WH_03 CTIN service invoice change-statutory requirement.
*                                CHG3010125 - Milestone Desc need to print on Final Inv (Commercial Inv)
* 6.0   26.04.2016  ZEN-JUTURU   eCHG3014830 CTCH 9021027472 printout has ZAHLUNGskonditonen printed.
* 1.0   07.12.2018  TULARAJ      PRJ0021776-SAP@CTBH Changes to Invoice form
* 2.0   07.01.2019  TULARAJ      PRJ0021776-SAP@CTBH Changes to Invoice form
* 3.0   08.01.2019  ZEN-GAURAV   PRJ0021776-SAP@CTBH Changes to Invoice form
* 4.0   22.01.2019  TULARAJ      PRJ0021776-SAP@CTBH-To print signature&Telephone & fax length chng
* 5.0   10.04.2019  mendnir_zen  CHG0037540-Delivery date Issue
* 6.0   17.04.2019  mendnir_zen  CHG0037540-Delivery date Issue V1
* 7.0   18.04.2019  mendnir_zen  CHG0037540-Delivery date Issue V2
* 8.0   15.05.2019  mendnir_zen  CHG0037540-Delivery date Issue V3
*------------------------------------------------------------------------------------------------------*

REPORT zgl_rvadin02 LINE-COUNT 100 MESSAGE-ID vn.
***********************************************************************
* Definition of tables                                                *
***********************************************************************

TABLES: komk    ,
        komp    ,
        komvd   ,
        vbco3   ,
        vbdkr   ,
        vbdpr   ,
        vbdre   ,
        bseg,                          "FI-Beleg                 ID-01
        vbak,                          "Vertriebsbelebkopf       ID-01
        vbap,                          "Vertriebsgelegposition   ID-01
        vbkd,                          "Vertrieb Kaufm.Daten-Pos ID-01
        vbpa,                          "Partner SD-Auftrag       ID-01
*        VBRK,                          "Zum lesen fakturadatum AL/15.06
        bnka,                          "Bankenstamm              ID-01
        tiban,                         "IBAN-Nummer        Met/13.08.03
        conf_out,
        sadr    ,
        tvko    ,
        adrs    ,
        t005    ,
        t001    ,
        t001g   ,
        t012,                          "Bankenstamm              ID-01
        t012k,                         "Konten bei Hausbanken    ID-01
        tcj04,                         "Verantwortliche aus PS   ID-01
        tvzbt,                         "Text Zahlungsbedingungen ID-01
        tvcint  ,
        konh    ,
        tlic    ,
        fpltvb  ,
        sdaccdpc,
        teurb.                        " needed otherwise we have to activate ECC-DIMP
TABLES: t173t.                                              "AL/1.5
TABLES: adr2, adr3, adr6, adrp.                             "ID-01 RFR
TABLES: knb1.                                               "AL/1.8
TABLES: kna1.                                               "AL/1.10

*ENHANCEMENT-POINT RVADIN01_01 SPOTS ES_RVADIN01 STATIC.
***********************************************************************
* Additional definitions of tables for general issues                 *
***********************************************************************
* Data for printout Slovakia
TABLES: vbrk, bkpf, bset.

* Data for printout discount information
TABLES: vbdprl, vtopis.

*--> YOUN_M  23052018 CHG0035751
*-------------------------------------------------------------------*
*Begin of Change on 04.July 2018
*-------------------------------------------------------------------*
*Read Pay.Term from T052U insted of TVZBT
*-------------------------------------------------------------------*
TABLES  :  t052u.
*-------------------------------------------------------------------*
*End of Change on 04.July 2018 :
*-------------------------------------------------------------------*
*<-- YOUN_M  23052018 CHG0035751

INCLUDE rvadtabl.

* begin of change IMG-MDs/06.02.2008/VN.1.1
***********************************************************************
* Definition of Constants                                             *
***********************************************************************

CONSTANTS: g_st_text_1     TYPE tdobname VALUE 'ZSD_GL_TAX_EXEMPT_1',
           g_st_text_2     TYPE tdobname VALUE 'ZSD_GL_TAX_EXEMPT_2',
           g_st_emp_land_1 TYPE tdobname VALUE 'ZSD_GL_EMP_LAND_BEZ_1'.

* end of change IMG-MDs/06.02.2008/VN.1.1

***********************************************************************
* Definition of types                                      *
***********************************************************************
TYPES: BEGIN OF ts_vbap_simple,
         vbeln TYPE vbeln_va,
         brgew TYPE brgew_ap,
         ntgew TYPE ntgew_ap,
       END OF ts_vbap_simple.

TYPES: BEGIN OF ts_vbrp_simple,
         vbeln TYPE vbeln_vf,
         brgew TYPE brgew_15,
         ntgew TYPE ntgew_15,
       END OF ts_vbrp_simple.

***********************************************************************
* Definition of internal tables                                       *
***********************************************************************


DATA: z_hbkid(5) TYPE c,              "Für Tabelle T012K lesen "ID-01
      z_pernr(8) TYPE c,              "Für Tabelle TCJ04 lesen "ID-01
      z_waers(5) TYPE c.              "Für Tabelle T012K lesen "ID-01

DATA: BEGIN OF tvbdpr OCCURS 100.      "Internal table for items
        INCLUDE STRUCTURE vbdpr.
DATA: END OF tvbdpr.

DATA: BEGIN OF tkomv OCCURS 50.
        INCLUDE STRUCTURE komv.
DATA: END OF tkomv.

DATA: BEGIN OF tkomvd OCCURS 50.
        INCLUDE STRUCTURE komvd.
DATA: END OF tkomvd.

DATA: BEGIN OF *tkomvd OCCURS 50.
        INCLUDE STRUCTURE komvd.
DATA: END OF *tkomvd.

DATA: BEGIN OF hkomv OCCURS 50.
        INCLUDE STRUCTURE komv.
DATA: END OF hkomv.

DATA: BEGIN OF hkomvd OCCURS 50.
        INCLUDE STRUCTURE komvd.
DATA: END OF hkomvd.

DATA: BEGIN OF tkomcon OCCURS 50.
        INCLUDE STRUCTURE conf_out.
DATA: END   OF tkomcon.

* begin of ID-01 RFR (1)
DATA: znumber LIKE adrp-persnumber.
DATA: zname LIKE sy-uname.
DATA: wa_addr LIKE adrp.

DATA: BEGIN OF addr,
        tel_number LIKE adr2-tel_number,
        fax_number LIKE adr3-fax_number,
        smtp_addr  LIKE adr6-smtp_addr,
        initials   LIKE adrp-initials,
      END OF addr.
* end of ID-01 RFR (1)


* begin of change AL/2.0
TABLES: vbrp.
TYPES: BEGIN OF anz_buf,
         vbeln LIKE vbrp-vbeln,
         posnr LIKE vbrp-posnr,
         fbuda LIKE vbrp-fbuda,
         fkart LIKE vbrk-fkart,
         fplnr LIKE vbrp-fplnr,
         fpltr LIKE vbrp-fpltr,
         netwr LIKE vbrp-netwr,
         mwsbk LIKE vbrk-mwsbk,
       END OF anz_buf.

TYPES: BEGIN OF ts_address_sh,
         zaddr1 TYPE ze_address,
         zaddr2 TYPE ze_address,
         zaddr3 TYPE ze_address,
         zaddr4 TYPE ze_address,
         zaddr5 TYPE ze_address,
       END OF ts_address_sh.


TYPES: BEGIN OF ts_head,
         return     TYPE vbeln_va,
         order      TYPE vbeln_va,
         delivery   TYPE vbeln_vl,
         bstkd      TYPE bstkd,   " Customer Order Number
         bstdk      TYPE bstdk,   " Bestelldatum fehlt
*Begin of Insert by YASH-CHITTA Logic for 3400 on 20.08.2013 --*
         bktxt      TYPE bktxt,
*End of Insert by YASH-CHITTA Logic for 3400 on 20.08.2013 --*
         we_addr_sh TYPE ts_address_sh,
       END OF ts_head.


* begin of change IMG-MDs/20.10.2008/VN.1.3
TYPES: BEGIN OF ts_flags,
         case1   TYPE xfeld,
         case2   TYPE xfeld,
         case3   TYPE xfeld,
         dynaddr TYPE xfeld,
       END OF ts_flags.

TYPES: BEGIN OF ts_batch,
         vbeln    TYPE vbeln,
         posnr    TYPE posnr,
         batchid  TYPE ztab_msb_txtbtch-batchid,
         batchpos TYPE ztab_msb_txtbtch-batchpos,
         heatno   TYPE ztab_msb_txtbtch-heatno,
         land1    TYPE ztab_msb_txtbtch-land1,
       END OF ts_batch.

TYPES: tt_batch TYPE TABLE OF ts_batch.


TYPES: BEGIN OF ts_vbrk,
         vbeln     TYPE vbeln_vf,
         ntgew     TYPE ntgew_15,
         brgew     TYPE brgew_15,
         zcratesno TYPE char3,
       END OF ts_vbrk.

* end of change IMG-MDs/20.10.2008/VN.1.3

DATA: t_temp TYPE anz_buf OCCURS 0 WITH HEADER LINE.
DATA: t_compare TYPE anz_buf OCCURS 0 WITH HEADER LINE.
DATA: count TYPE i.                                         "AL/2.0
DATA: h_chr_10(10) TYPE c.                                  "AL/2.0
DATA: h_netwr LIKE vbrp-netwr. "AL/2.0 Total geschuldete Anzahlungen
* end of change AL/2.0

DATA: zflag TYPE c. "set if user selects own bank 1.4

* Definition of downpayment data

DATA: BEGIN OF ixsdaccdpc OCCURS 0.
        INCLUDE STRUCTURE sdaccdpc.
DATA: END OF ixsdaccdpc.

DATA: BEGIN OF gt_sdaccdpc_doc OCCURS 0,
        vbeln TYPE vbeln,
        posnr TYPE posnr.
DATA: END OF gt_sdaccdpc_doc.

DATA: da_xfilkd LIKE tvfk-xfilkd,
      chara     TYPE c VALUE 'A',
      charb     TYPE c VALUE 'B'.
DATA: downpay_refresh.


***********************************************************************
* Definition of internal variables                                    *
***********************************************************************

DATA: retcode   LIKE sy-subrc.         "Returncode
DATA: repeat(1) TYPE c.
DATA: anzal LIKE nast-anzal.            "HUNGARY
DATA: nast_anzal LIKE nast-anzal.      "Number of outputs (Orig. + Cop.)
DATA: nast_tdarmod LIKE nast-tdarmod.  "Archiving only one time
DATA: xscreen(1) TYPE c.               "Output on printer or screen
DATA: xvbeln LIKE vbrk-vbeln.
DATA: xposnr LIKE vbrl-posnr.
DATA: pr_kappl(01)   TYPE c VALUE 'V'. "Application for pricing
DATA: print_mwskz.                     "Mehrwertsteuer-Kz drucken
DATA: ccname(30) TYPE c.               "Card Type

***********************************************************************
* Definition of variables for calling customer subroutines dynamically*
***********************************************************************

DATA : header_userexit       LIKE tnapr-ronam,
       item_userexit         LIKE tnapr-ronam,
       header_print_userexit LIKE tnapr-ronam,
       item_print_userexit   LIKE tnapr-ronam,
       get_data_userexit     LIKE tnapr-ronam.

***********************************************************************
* Specific data of ENTRY_CH
***********************************************************************

DATA print_local_curr_ch.
DATA: komvdk_ch LIKE komvd OCCURS 10 WITH HEADER LINE.
DATA: komvdp_ch LIKE komvd OCCURS 10 WITH HEADER LINE.


CONSTANTS: c_posnr_1    TYPE posnr VALUE '000010',
           c_vbtyp_n_j  TYPE vbtyp_n VALUE 'J',
           c_vbtyp_v_j  TYPE vbtyp_v VALUE 'J',
           c_vbtyp_v_c  TYPE vbtyp_v VALUE 'C',
           c_vbtyp_n_t  TYPE vbtyp_n VALUE 'T',
           c_stufe_00   TYPE stufe_vbfa VALUE '00',
           c_stufe_0    TYPE stufe_vbfa VALUE 0,
           c_pstyv_zkbn TYPE pstyv_vl VALUE 'ZKBN',
           c_true       TYPE xfeld VALUE 'X',
           c_false      TYPE xfeld VALUE space,
           c_land_ch    TYPE land VALUE 'CH'.

* Order type
CONSTANTS: BEGIN OF cs_auart,
             kb   TYPE auart VALUE 'KB',
             ka   TYPE auart VALUE 'KA',
             ke   TYPE auart VALUE 'KE',
             zor  TYPE auart VALUE 'ZOR',
             zfor TYPE auart VALUE 'ZFOR',
             re   TYPE auart VALUE 'RE',
*begin of change AO-Sam/21.04.2009/VN.1.6 -----------------------*
* Get PM name for std. sales order.
             ta   TYPE auart VALUE 'TA',
*end of change AO-Sam/21.04.2009/VN.1.6   -----------------------*
           END OF cs_auart.

* Delivery Types
CONSTANTS: BEGIN OF cs_lfart,
             nl TYPE auart VALUE 'NL',
           END OF cs_lfart.


DATA: gs_con_sum TYPE zstr_consign_summary,
      gt_con_sum TYPE TABLE OF zstr_consign_summary.

TABLES: lips,vbfa,likp,marc.


DATA: ls_vbap TYPE vbap,
      ls_vbfa TYPE vbfa.

DATA: gt_vbap  TYPE TABLE OF vbap,
      gt_vbrp  TYPE TABLE OF vbrp,
      gt_vbfa  TYPE TABLE OF vbfa,
      gt_lips  TYPE TABLE OF lips,
      gt_lips2 TYPE TABLE OF lips,
      gt_lips3 TYPE TABLE OF lips,
      gt_likp  TYPE TABLE OF likp,
      gt_likp2 TYPE TABLE OF likp,
      gt_likp3 TYPE TABLE OF likp,
      gt_vbfa2 TYPE TABLE OF vbfa,
      gt_vbfa3 TYPE TABLE OF vbfa,
      gt_vbfa4 TYPE TABLE OF vbfa,
      gt_vbfa5 TYPE TABLE OF vbfa,
      gt_vbfa6 TYPE TABLE OF vbfa,
      gt_vbap2 TYPE TABLE OF vbap.


* end of change IMG-MDs/20.12.2007/VN.1


* begin of change IMG-MDs/31.01.2008/VN.1.1
DATA: gt_vbpa     TYPE TABLE OF vbpa,
      gt_vbpa_ord TYPE TABLE OF vbpa.

*Insert Begin CHG0037806 ZAYIDU CEDK963987
DATA: ls_intad  TYPE knb1-intad.
DATA: tab_lines LIKE sy-tabix.
DATA: tab_lines_1 LIKE sy-tabix.  "  Insert  CHG0037806 ZAYIDU CEDK963987

*variables for email functionality
DATA: maildata  LIKE sodocchgi1.
DATA: mailpack  LIKE sopcklsti1 OCCURS 2  WITH HEADER LINE.
*DATA: mailhead  LIKE solisti1   OCCURS 1  WITH HEADER LINE. " Comment CHG0037806 ZAYIDU CEDK963987
DATA: mailhead  LIKE solisti1   OCCURS 0  WITH HEADER LINE.  " Insert  CHG0037806 ZAYIDU CEDK963987
DATA: mailbin   LIKE solisti1   OCCURS 10 WITH HEADER LINE.
DATA: mailtxt   LIKE solisti1   OCCURS 10 WITH HEADER LINE.
DATA: mailrec   LIKE somlrec90  OCCURS 0  WITH HEADER LINE.

* Define Internal table for OTF-Data
  DATA: otf_data LIKE itcoo OCCURS 0 WITH HEADER LINE.
  DATA: solisti1 LIKE solisti1 OCCURS 0 WITH HEADER LINE.

*   Flags
    DATA: gv_flag_view   TYPE xfeld.
    DATA: gv_flag_prnt   TYPE xfeld.
    DATA: gv_flag_others TYPE xfeld.

*Insert End   CHG0037806 ZAYIDU CEDK963987

DATA: gs_vbpa_ag     TYPE vbpa,
      gs_vbpa_we     TYPE vbpa,
      gs_vbpa_re     TYPE vbpa,
      gs_vbpa_ik     TYPE vbpa,
      gs_sadr_ag     TYPE sadr,
      gs_sadr_we     TYPE sadr,
      gs_sadr_re     TYPE sadr,
      gs_sadr_ik     TYPE sadr,
      gs_sadr_sp     TYPE sadr,
      gs_adr6_ik     TYPE adr6,
      gs_kna1_ag     TYPE kna1,
      gs_adr6        TYPE adr6,
      gs_t001        TYPE t001,
      gs_t001n       TYPE t001n,
      gs_t001w       TYPE t001w,
      gs_usr03       TYPE usr03,
      gs_usaddr      TYPE addr3_val,
* begin of change IMG-MDs/13.05.2008/VN.1.1
      gs_tel_line    TYPE szadr_adtel_line,
      gs_fax_line    TYPE szadr_adfax_line,
      gs_t005k_1     TYPE t005k,
      gs_t005k_2     TYPE t005k,
      gs_t005k_3     TYPE t005k,
      gs_t005k_4     TYPE t005k,
* end of change IMG-MDs/13.05.2008/VN.1.1
* begin of change IMG-MDs/13.08.2008
      gs_vbap_simple TYPE ts_vbap_simple,
      gs_vbap_sum    TYPE ts_vbap_simple,
      gt_vbap_sum    TYPE TABLE OF ts_vbap_simple,
* end of change IMG-MDs/13.08.2008
* begin of change IMG-MDs/17.08.2008
      gs_vbrp_simple TYPE ts_vbrp_simple,
      gs_vbrp_sum    TYPE ts_vbrp_simple,
      gt_vbrp_sum    TYPE TABLE OF ts_vbrp_simple,
* end of change IMG-MDs/13.08.2008
      gs_head        TYPE ts_head.


DATA: g_sd_tax_exempt_text   TYPE tdobname,
      g_sd_tax_exempt_text_2 TYPE tdobname.


* begin of change IMG-MDs/20.10.2008/VN.1.3
DATA: gs_flags        TYPE ts_flags,
      g_text_elem     TYPE char30,
      gt_batch        TYPE tt_batch,
      gs_batch        TYPE ts_batch,
      gs_address      TYPE adrs_print,
      gs_likp         TYPE likp,
      gv_paradrnr     TYPE adrnr,
      gs_tab_vbrk_tmp TYPE ztab_vbrk,
      gs_tab_vbrk     TYPE ts_vbrk.
* end of change IMG-MDs/20.10.2008/VN.1.3


* begin of change IMG-MDs/31.01.2008/VN.1.1

* begin of change IMG-MDs/02.04.2008/VN.1.1
* Extension for line items: ITEM_LINE_EXTENDED
DATA: g_print_line_items  TYPE xfeld.
* end of change IMG-MDs/02.04.2008/VN.1.1

* begin of change MDs/19.11.2008/VN.1.5. -----------------------*
DATA: gv_uline      TYPE qdline.
* end of change MDs/19.11.2008/VN.1.5. -----------------------*
*begin of change AO-Sam/21.04.2009/VN.1.6 -----------------------*
DATA: gv_taxcode LIKE t007s-text1.        "Tax code desc.
DATA: gv_taxamt_sum LIKE komvd-kwert.     "Doc. item tax amount summary
DATA: gv_netamt_sum LIKE komvd-kwert.     "Doc. item amount summary
* Begin of Insert TULARAJ-CEDK961813-Project Bahrine
DATA: gv_netamt_sum_doc_curr     TYPE p LENGTH 13 DECIMALS 7.
DATA: gv_taxamt_sum_doc_curr     TYPE p LENGTH 13 DECIMALS 7.
DATA: gv_tot_avat_doc_curr       TYPE p LENGTH 13 DECIMALS 7.
DATA: gv_adv_pay_rcd_bhd         TYPE p LENGTH 13 DECIMALS 7.
DATA: gv_dptax_amt_doc_curr      TYPE p LENGTH 13 DECIMALS 7.
DATA: gv_dprcv_tol_arap_doc_curr TYPE p LENGTH 13 DECIMALS 7.
DATA: gv_dpend_doc_curr          TYPE p LENGTH 15 DECIMALS 7.
DATA: gv_dpmws_end_doc_curr      TYPE p LENGTH 15 DECIMALS 7.
DATA: gv_tolat_doc_curr          TYPE p LENGTH 15 DECIMALS 7.
DATA: gv_land1 TYPE land1_gp.
* End of Insert TULARAJ-CEDK961813-Project Bahrine
* End of Insert ZEN-GAURAV-CEDK961813-Project Bahrine/08.01.2019
DATA: gv_tele_number(25),
      gv_fax_number(25).
CONSTANTS : c_tele TYPE ztab_gl_params-fieldname VALUE 'TELE_NUMBER',
            c_fax  TYPE ztab_gl_params-fieldname VALUE 'FAX_NUMBER'.
* End of Insert ZEN-GAURAV-CEDK961813-Project Bahrine/08.01.2019
*begin of change AO-Sam/24.04.2009/VN.1.8 -----------------------*
*DATA: gv_dptax_amt LIKE bset-fwste.       "DP tax amount received
*DATA: gv_dprcv_tol LIKE bseg-dmbtr.       "DP total amount received
*DATA: gv_dpamt_nrcv LIKE bseg-dmbtr.      "DP amount not received
*DATA: gv_dpamt_nrcv_tol LIKE bseg-dmbtr.  "DP amount not received(Summary)
*DATA: gv_dptax_nrcv LIKE bset-fwste.      "DP tax amount not received
*DATA: gv_dptax_nrcv_tol LIKE bset-fwste.  "DP tax amount not received(Summary)
DATA:  gv_dptax_amt LIKE vbdkr-dpend.       "DP tax amount received
DATA: gv_dprcv_tol LIKE vbdkr-dpend.       "DP total amount received
DATA: gv_dpamt_nrcv LIKE vbdkr-dpend.      "DP amount not received
DATA: gv_dpamt_nrcv_tol LIKE vbdkr-dpend.  "DP amount not received(Summary)
DATA: gv_dptax_nrcv LIKE vbdkr-dpend.      "DP tax amount not received
DATA: gv_dptax_nrcv_tol LIKE vbdkr-dpend.  "DP tax amount not received(Summary)
* end of change AO-Sam/24.07.2009/VN.1.8  -----------------------*
DATA: gv_dpend LIKE vbdkr-dpend.          "Net Amount to be paid
DATA: gv_dpmws_end LIKE vbdkr-dpend.      "Tax amount to be paid
DATA: gv_tolat LIKE vbdkr-dpend.          "Total Amount to be paid
DATA: gv_signature_text LIKE rssce-tdname."Signature std. text name
DATA: gv_fkdat LIKE vbrk-fkdat.           "DPR billing date
DATA: gv_dprnr LIKE bkpf-awkey.           "DPR doc. no.
*end of change AO-Sam/21.04.2009/VN.1.6   -----------------------*

DATA: gv_not_tax     TYPE xfeld,
      gv_no_adv_paym TYPE xfeld.

DATA: gv_kbetr TYPE p LENGTH 11 DECIMALS 3,  "Insert by TULARAJ CEDK960799-Project Bahrine
      gv_koein TYPE komvd-koein.             "Insert by TULARAJ CEDK960799-Project Bahrine

*Begin of change Atos-Chenlp/11.06.2010/VN.1.9----------------*
DATA: gv_final_invoice TYPE xfeld,
      gv_ctcn          TYPE xfeld.
*End of change Atos-Chenlp/11.06.2010/VN.1.9----------------*

*Begin of change ORI-TIBREWAL/18.01.2011/VN.2.1----------------*
DATA: w_j_1imocomp   TYPE j_1imocomp,
      w_j_1imocust   TYPE j_1imocust,
      gv_words       TYPE char256,
      gv_totwrds     TYPE char256,
      gv_taxwrds_exc TYPE char256,
      gv_taxwrds_st  TYPE char256,
      gv_belnr       TYPE bkpf-belnr,
      gv_wrbtr       TYPE bseg-wrbtr,
      gv_excise_tax  TYPE vbdkr-dpend,      "Excise duty amount to be paid.
      gv_serv_tax    TYPE vbdkr-dpend,      "Service Tax amount to be paid,
      "Insert Begin By WADHYO/P-CHG0032457/ CEDK955856/13.07.2017
      lv_gstin       TYPE j_1bbranch-gstin,
      gv_pan1        TYPE t001z-paval,
      gv_cin         TYPE t001z-paval.
"Insert End BY WADHYO/P-CHG0032457/ CEDK955856/13.07.2017

CONSTANTS : gc_val_initial TYPE vbdkr-dpend VALUE IS INITIAL.
*End of change ORI-TIBREWAL/18.01.2011/VN.2.1----------------*

* begin of change Atos-Chenlp/12.06.2012/VN.2.4 ------------------------*
CONSTANTS: c_prog                TYPE progname VALUE 'ZGL_RVADIN02',
* Begin of Change YASH-CHITTA 09.08.2013
* Commented code related to Sales org.2300
*           c_ctms TYPE fieldname VALUE 'VKORG_CTMS', "for CTMS
* End of Change YASH-CHITTA 09.08.2013
           c_conty_de            LIKE vbdkr-lland VALUE 'DE',
           c_waerk_eur           LIKE vbdkr-waerk VALUE 'EUR',
           c_zhasd_footer2300_de TYPE c LENGTH 30 VALUE 'ZHASD_FOOTER2300_DE',
           c_sdfooter            TYPE c LENGTH 30 VALUE 'ZSD_WT_FOOTER2300_'.
DATA: r_vkorg_ctms TYPE RANGE OF vkorg,  "sale org of CTMS
      gv_footer    TYPE c LENGTH 30, "footer standard text
      gv_so_diff   TYPE xfeld,    "flag of different so in items
      gv_aeskd     TYPE vbsn-aeskd, "change index of items
      gv_duedate   TYPE d.  "due date
*Begin Insert ZEN-GAURAV /
DATA : gv_footer_address TYPE c LENGTH 30. "footer Address standard text
*End Insert ZEN-GAURAV /
DATA: gv_absender TYPE ztab_sd_sender-sender_adr. "Standard text of absender
*--P2100 10012013 Atos-chenlp
DATA: gv_kverm_ag LIKE knb1-kverm. "Customs Nr(Your EORI no from AG)
* end of change Atos-Chenlp/12.06.2012/VN.2.4 ------------------------*

* country specific entry routines
INCLUDE idbillprint.

*ENHANCEMENT-POINT RVADIN01_07 SPOTS ES_RVADIN01 STATIC .
* data for access to central address maintenance
INCLUDE sdzavdat.

* --> GeB 03082010
DATA: i_aubel LIKE vbrp-aubel.
*<-- GeB 03082010

*--> GeB 28112012 I48937
DATA: gv_kverm LIKE knb1-kverm,
      gv_rcomp LIKE t001-rcomp,
      gv_kunnr LIKE knb1-kunnr.
*<-- GeB 28112012 I48937

* Begin of Change YASH-CHITTA 09.08.2013
* Remove hardcoding for Sales org.
DATA: r_vkorg_ctsg TYPE RANGE OF vkorg, "sale org of CTSG
      r_vkorg_ctin TYPE RANGE OF vkorg, "sale org of CTIN
      r_vkorg_ctcn TYPE RANGE OF vkorg, "sale org of CTCN
      r_vkorg_ctbh TYPE RANGE OF vkorg, "sale org of CTBH   "Insert by TULARAJ CEDK961813-Project Bahrine
* Begin of Insert by YASH-CHITTA Logic for 3400 on 19.08.2013 --*
      r_vkorg_cttw TYPE RANGE OF vkorg. "sale org of CTTW.
* End of Insert by YASH-CHITTA Logic for 3400 on 19.08.2013 --*

DATA: gc_vkorg_ctsg TYPE fieldname VALUE 'VKORG_CTSG', "for CTSG
      gc_vkorg_ctin TYPE fieldname VALUE 'VKORG_CTIN', "for CTIN
      gc_vkorg_ctcn TYPE fieldname VALUE 'VKORG_CTCN', "for CTCN
* End of Change YASH-CHITTA 09.08.2013
      gc_vkorg_ctbh TYPE fieldname VALUE 'VKORG_CTBH', "for CTBH "Insert by TULARAJ CEDK961813-Project Bahrine
* Begin of Insert by YASH-CHITTA Logic for 3400 on 19.08.2013 --*
      gc_vkorg_cttw TYPE fieldname VALUE 'VKORG_CTTW' . "for CTTW
* End of Insert by YASH-CHITTA Logic for 3400 on 19.08.2013 --*

*begin of change Meng(NOCO)/17.Sep.2014 for C2316-------------*
DATA: gv_flag_vkorg TYPE c LENGTH 1.
*end   of change Meng(NOCO)/17.Sep.2014 for C2316-------------*

*  Begin of Declaration ZEN-JUTURU / 08.01.2015 / CHG3010125.
TYPES : BEGIN OF ty_fplt,
          fplnr TYPE fplnr,
          fpltr TYPE fpltr,
          fproz TYPE fproz,
          fakwr TYPE fakwr,
          mlstn TYPE mlst_zaehl,
          zterm TYPE dzterm,
        END OF ty_fplt,
        BEGIN OF ty_mltx,
          mltx_zaehl TYPE mlst_zaehl,
          ktext      TYPE mlst_ktext,
        END OF ty_mltx,
        BEGIN OF ty_tvzbt,
          zterm TYPE tvzbt-zterm,
          vtext TYPE tvzbt-vtext,
        END OF ty_tvzbt,
        BEGIN OF ty_milefinal,
          fplnr TYPE fplnr,
          fproz TYPE fproz,
          fakwr TYPE fakwr,
          mlstn TYPE mlst_zaehl,
          zterm TYPE dzterm,
          ktext TYPE mlst_ktext,
*  Start of Insertion SGS-PALA / 14.01.2016 / CHG3010125.
          vtext TYPE dzterm_bez,
*  End of Insertion SGS-PALA / 14.01.2016 / CHG3010125.
        END OF ty_milefinal.

DATA  : gs_fpla      TYPE fpla,
        gt_fplt      TYPE TABLE OF ty_fplt,
        gs_fplt      TYPE ty_fplt,
        gt_mltx      TYPE TABLE OF ty_mltx,
        gs_mltx      TYPE ty_mltx,
        gt_milefinal TYPE TABLE OF ty_milefinal,
        gs_milefinal TYPE ty_milefinal,
*  Start of Insertion SGS-PALA / 14.01.2016 / CHG3010125.
        gt_tvzbt     TYPE TABLE OF ty_tvzbt,
        gs_tvzbt     TYPE ty_tvzbt.
*  End of Insertion SGS-PALA / 14.01.2016 / CHG3010125.

*  End of Declaration ZEN-JUTURU / 08.01.2015 / CHG3010125.
*Begin of Declaration ZEN-GAURAV / TFS PROJECT

DATA : gv_sbtaxwd(256) TYPE c,
       gv_kkcwd(256)   TYPE c,
       gv_pageno(1).

*End of Declaration ZEN-GAURAV / TFS PROJECT

***********************************************************************
*                                                                     *
* Standard Routine ENTRY                                              *
*                                                                     *
***********************************************************************

FORM entry USING return_code us_screen.

  CLEAR retcode.
  xscreen = us_screen.
  PERFORM processing USING us_screen.
  CASE retcode.
    WHEN 0.
      return_code = 0.
    WHEN 3.
      return_code = 3.
    WHEN OTHERS.
      return_code = 1.
  ENDCASE.

ENDFORM.                    "ENTRY

***********************************************************************
*                                                                     *
* Standard Routine ENTRY_PROFORMA                                     *
*                                                                     *
***********************************************************************

FORM entry_proforma USING return_code us_screen.

  CLEAR return_code.

ENDFORM.                    "ENTRY_PROFORMA

***********************************************************************
*                                                                     *
* Standard Routine ENTRY_ESR                                          *
*                                                                     *
***********************************************************************

FORM entry_esr USING return_code us_screen.

  CLEAR retcode.
  xscreen = us_screen.
  PERFORM processing_esr USING us_screen.
  CASE retcode.
    WHEN 0.
      return_code = 0.
    WHEN 3.
      return_code = 3.
    WHEN OTHERS.
      return_code = 1.
  ENDCASE.

ENDFORM.                    "ENTRY_ESR

***********************************************************************
*                                                                     *
* Standard Routine ENTRY_ITALY                                        *
*                                                                     *
***********************************************************************

FORM entry_italy USING return_code us_screen.

  CLEAR retcode.
  xscreen = us_screen.
  PERFORM processing_italy USING us_screen.
  CASE retcode.
    WHEN 0.
      return_code = 0.
    WHEN 3.
      return_code = 3.
    WHEN OTHERS.
      return_code = 1.
  ENDCASE.

ENDFORM.                    "ENTRY_ITALY

***********************************************************************
*                                                                     *
* Standard Routine ENTRY_CH                                           *
*                                                                     *
***********************************************************************

FORM entry_ch USING return_code us_screen.
  CLEAR retcode.
  xscreen = us_screen.
  header_userexit = 'HEADER_CH'.
  item_userexit = 'ITEM_CH'.
  header_print_userexit = 'HEADER_PRINT_CH'.
  item_print_userexit = 'ITEM_PRINT_CH'.
  PERFORM processing USING us_screen.
  CASE retcode.
    WHEN 0.
      return_code = 0.
    WHEN 3.
      return_code = 3.
    WHEN OTHERS.
      return_code = 1.
  ENDCASE.
ENDFORM.                    "ENTRY_CH

***********************************************************************
*                                                                     *
* Standard Routine ENTRY_HUNGARY
*
*                                                                     *
***********************************************************************

FORM entry_hungary USING return_code us_screen.

  CLEAR retcode.
  xscreen = us_screen.
  PERFORM processing_hungary USING us_screen.
  CASE retcode.
    WHEN 0.
      return_code = 0.
    WHEN 3.
      return_code = 3.
    WHEN OTHERS.
      return_code = 1.
  ENDCASE.

ENDFORM.                    "ENTRY_HUNGARY

***********************************************************************
*                                                                     *
* Customer Entry-Routines                                             *
*                                                                     *
***********************************************************************



***********************************************************************
*                                                                     *
* Standard Routine PROCESSING                                         *
*                                                                     *
***********************************************************************

FORM processing USING proc_screen.

  PERFORM get_data.
  CHECK retcode = 0.
  IF nast-anzal EQ 0.
    nast_anzal = 1.
  ELSE.
    nast_anzal = nast-anzal.
  ENDIF.
  nast-anzal = 1.
  DO nast_anzal TIMES.
* In the case of repetition only one time archiving
    IF sy-index > 1 AND nast-tdarmod = 3.
      nast_tdarmod = nast-tdarmod.
      nast-tdarmod = 1.
    ENDIF.
    IF sy-index NE 1 AND repeat IS INITIAL.
      repeat = 'X'.
    ENDIF.

    CLEAR : gv_flag_prnt , gv_flag_view , gv_flag_others. " *Comment CHG0037806 ZAYIDU CEDK963987

    PERFORM form_open USING proc_screen vbdkr-land1.
    CHECK retcode = 0.
    PERFORM form_title_print.
    CHECK retcode = 0.
    PERFORM header_consgnee.
    CHECK retcode = 0.
    PERFORM tax_text_print.
    CHECK retcode = 0.
    PERFORM header_data_print.
    CHECK retcode = 0.
    PERFORM header_text_print.
    CHECK retcode = 0.
    PERFORM item_print.
    CHECK retcode = 0.
    PERFORM end_print.
    CHECK retcode = 0.
* begin of change AO-Sam/21.04.2009/VN.1.6 -----------------------*
* Begin of Change YASH-CHITTA 09.08.2013
* Remove hardcoding for Sales org.
*    IF vbdkr-vkorg = '3100' OR vbdkr-vkorg = '3200'.
    IF ( r_vkorg_ctsg IS NOT INITIAL
    AND  vbdkr-vkorg  IN r_vkorg_ctsg )                     " '3100'
* Begin of Insert by YASH-CHITTA Logic for 3400 on 19.08.2013 --*
    OR ( r_vkorg_cttw IS NOT INITIAL
    AND  vbdkr-vkorg  IN r_vkorg_cttw )                     " '3400'
* End of Insert by YASH-CHITTA Logic for 3400 on 19.08.2013 --*
    OR ( r_vkorg_ctin IS NOT INITIAL
    AND  vbdkr-vkorg  IN r_vkorg_ctin ).                    " '3200'.
* End of Change YASH-CHITTA 09.08.2013
      PERFORM signature_print.
      CHECK retcode = 0.
    ENDIF.
* end of change AO-Sam/21.04.2009/VN.1.6   -----------------------*

*Begin of change ORI-TIBREWAL/18.01.2011/VN.2.1----------------*
*    IF vbdkr-vkorg = '3200'.
*      PERFORM additional_info_print.
*      CHECK retcode = 0.
*    ENDIF.
*End of change ORI-TIBREWAL/18.01.2011/VN.2.1----------------*

* Begin of change Atos-Meng/17.05.2010/VN.1.6----------------*
** Begin of Change YASH-CHITTA 09.08.2013
** Remove hardcoding for Sales org.
*    IF vbdkr-vkorg = '3300' .
    IF  vbdkr-vkorg  IN r_vkorg_ctcn                        " '3300'
    AND r_vkorg_ctcn IS NOT INITIAL.
** End of Change YASH-CHITTA 09.08.2013
      PERFORM signature_print_cn.
      CHECK retcode = 0.
* Begin of Insert TULARAJ-CEDK962236-Project Bahrine
    ELSEIF vbdkr-vkorg IN r_vkorg_ctbh
    AND r_vkorg_ctbh IS NOT INITIAL.
      PERFORM signature_print_cn.
      CHECK retcode = 0.
* End of Insert TULARAJ-CEDK962236-Project Bahrine
    ENDIF.
* End of change Atos-Meng/17.05.2010/VN.1.6----------------*

* begin of change IMG-MDs/19.12.2007/VN.1
    PERFORM add_summary.
    CHECK retcode = 0.
* end of change IMG-MDs/19.12.2007/VN.1
    PERFORM form_close.
    CHECK retcode = 0.

*Insert Begin CHG0037806 ZAYIDU CEDK963987

    IF NOT vbdkr-kunwe IS INITIAL       AND
           gv_flag_prnt IS NOT INITIAL  AND
           nast-kschl EQ 'ZMAL' .
      PERFORM send_form_via_email.
    ENDIF.

    CLEAR : gv_flag_prnt , gv_flag_view , gv_flag_others.
*Insert End   CHG0037806 ZAYIDU CEDK963987


  ENDDO.
  nast-anzal = nast_anzal.
  nast-tdarmod = nast_tdarmod.
ENDFORM.                    "PROCESSING

***********************************************************************
*                                                                     *
* Standard Routine PROCESSING_ESR                                     *
*                                                                     *
***********************************************************************

FORM processing_esr USING proc_screen.

  DATA : lt_fplt LIKE fpltvb OCCURS 1 WITH HEADER LINE.
  DATA : ld_fkwrt LIKE acccr-wrbtr.
  PERFORM get_data.
  ld_fkwrt = komk-fkwrt.
  CALL FUNCTION 'BILLING_SCHEDULE_CREATE_T052S'
    EXPORTING
      zterm                   = vbdkr-zterm
      wert                    = ld_fkwrt
      waerk                   = vbdkr-waerk
      fkdat                   = vbdkr-fkdat
      i_company_code          = vbdkr-bukrs
    TABLES
      zfplt                   = lt_fplt
    EXCEPTIONS
      no_entry_t052s          = 1
      no_zfbdt                = 2
      no_entry_t052           = 3
      no_billing_schedule     = 4
      no_entry_in_t001r_found = 5
      OTHERS                  = 6.
  IF sy-subrc EQ 4.
    PERFORM get_data_esr.
    CHECK retcode = 0.
    PERFORM form_open USING proc_screen vbdkr-land1.
    CHECK retcode = 0.
    PERFORM start_form.
    CHECK retcode = 0.
    PERFORM header_consgnee.
    CHECK retcode = 0.
    PERFORM header_text_print.
    CHECK retcode = 0.
    PERFORM item_print.
    CHECK retcode = 0.
    PERFORM end_print.
    CHECK retcode = 0.
    PERFORM form_close.
    CHECK retcode = 0.
  ELSEIF sy-subrc IS INITIAL.
    LOOP AT lt_fplt.
      komk-fkwrt = lt_fplt-fakwr.
      PERFORM get_data_esr.
      CHECK retcode = 0.
      PERFORM form_open USING proc_screen vbdkr-land1.
      CHECK retcode = 0.
      PERFORM start_form.
      CHECK retcode = 0.
      PERFORM header_consgnee.
      CHECK retcode = 0.
      PERFORM header_text_print.
      CHECK retcode = 0.
      PERFORM item_print.
      CHECK retcode = 0.
      PERFORM end_print.
      CHECK retcode = 0.
      PERFORM form_close.
      CHECK retcode = 0.
    ENDLOOP.
  ELSE.
    retcode = sy-subrc.
*   Die Zahlungsbedingungen sind fehlerhaft
    syst-msgid = 'F5'.
    syst-msgno = 158.
    syst-msgty = 'E'.
    PERFORM protocol_update.
  ENDIF.

ENDFORM.                    "PROCESSING_ESR

***********************************************************************
*                                                                     *
* Standard Routine PROCESSING_ITALY                                   *
*                                                                     *
***********************************************************************

FORM processing_italy USING proc_screen.

  PERFORM get_data.
  PERFORM get_data_italy USING proc_screen.
  CHECK retcode = 0.
  PERFORM form_open USING proc_screen vbdkr-land1.
  CHECK retcode = 0.
  PERFORM form_title_print.
  CHECK retcode = 0.
  PERFORM header_consgnee.
  CHECK retcode = 0.
  PERFORM tax_text_print.
  CHECK retcode = 0.
  PERFORM header_data_print.
  CHECK retcode = 0.
  PERFORM header_text_print.
  CHECK retcode = 0.
  PERFORM item_print.
  CHECK retcode = 0.
  PERFORM end_print.
  CHECK retcode = 0.
  PERFORM form_close.
  CHECK retcode = 0.

ENDFORM.                    "PROCESSING_ITALY

***********************************************************************
*                                                                     *
* Standard Routine PROCESSING_HUNGARY
*
*                                                                     *
***********************************************************************

FORM processing_hungary USING proc_screen.

  PERFORM get_data.
  CHECK retcode = 0.
  IF nast-anzal EQ 0.
    nast_anzal = 1.
  ELSE.
    nast_anzal = nast-anzal.
  ENDIF.
  nast-anzal = 1.
  DO nast_anzal TIMES.
    IF sy-index NE 1 AND repeat IS INITIAL.
      repeat = 'X'.
    ENDIF.
    PERFORM form_open USING proc_screen vbdkr-land1.
    CHECK retcode = 0.
    PERFORM form_title_print_hu.
    CHECK retcode = 0.
    PERFORM header_consgnee.
    CHECK retcode = 0.
    CLEAR vbdkr-counter_hu.
    IF NOT repeat IS INITIAL.
      IF anzal = 0.
        anzal = 1.
      ENDIF.
      MOVE anzal TO vbdkr-counter_hu.
      CONDENSE vbdkr-counter_hu.
      anzal = anzal + 1.
    ENDIF.
    PERFORM tax_text_print.
    CHECK retcode = 0.
    PERFORM header_data_print.
    CHECK retcode = 0.
    PERFORM header_text_print.
    CHECK retcode = 0.
    PERFORM item_print.
    CHECK retcode = 0.
    PERFORM end_print.
    CHECK retcode = 0.
    PERFORM form_close.
    CHECK retcode = 0.
  ENDDO.
  nast-anzal = nast_anzal.

ENDFORM.                    "PROCESSING_HUNGARY

***********************************************************************
*       SAP STANDARD-SUBROUTINES                                      *
***********************************************************************

*---------------------------------------------------------------------*
*       FORM AMOUNT_FOR_CASH_DISCOUNT                                 *
*---------------------------------------------------------------------*
*       This routine prints the amount qualifying for cash discount.  *
*---------------------------------------------------------------------*

FORM amount_for_cash_discount.

  CHECK vbdkr-skfbk NE 0.
  CALL FUNCTION 'WRITE_FORM'
    EXPORTING
      element = 'AMOUNT_QUALIFYING_FOR_CASH_DISCOUNT'
    EXCEPTIONS
      element = 1
      window  = 2.
  IF sy-subrc NE 0.
    PERFORM protocol_update.
  ENDIF.

ENDFORM.                    "AMOUNT_FOR_CASH_DISCOUNT

*---------------------------------------------------------------------*
*       FORM PAYMENT_SPLIT                                            *
*---------------------------------------------------------------------*
*       This routine prints the payment split                         *
*---------------------------------------------------------------------*
FORM payment_split.

  DATA: h_skfbt LIKE acccr-skfbt.
  DATA: h_fkdat LIKE vbrk-fkdat.
  DATA: h_fkwrt LIKE acccr-wrbtr.
  DATA : BEGIN OF payment_split OCCURS 3.
          INCLUDE STRUCTURE vtopis.
  DATA : END OF payment_split.


  CHECK vbdkr-zterm NE space.

  h_skfbt = vbdkr-skfbk.
  h_fkwrt = komk-fkwrt.
  h_fkdat = vbdkr-fkdat.
  IF vbdkr-valdt NE 0.
    h_fkdat = vbdkr-valdt.
  ENDIF.
  IF vbdkr-valtg NE 0.
    h_fkdat = vbdkr-fkdat + vbdkr-valtg.
  ENDIF.
  CALL FUNCTION 'SD_PRINT_TERMS_OF_PAYMENT_SPLI'
    EXPORTING
      i_country                     = vbdkr-land1
      bldat                         = h_fkdat
      budat                         = h_fkdat
      cpudt                         = h_fkdat
      language                      = vbco3-spras
      terms_of_payment              = vbdkr-zterm
      wert                          = h_fkwrt  "Warenwert + Tax
      waerk                         = vbdkr-waerk
      fkdat                         = vbdkr-fkdat
      skfbt                         = h_skfbt
      i_company_code                = vbdkr-bukrs
    TABLES
      top_text_split                = payment_split
    EXCEPTIONS
      terms_of_payment_not_in_t052  = 01
      terms_of_payment_not_in_t052s = 02.

  LOOP AT payment_split.

    AT FIRST.
      CALL FUNCTION 'CONTROL_FORM'
        EXPORTING
          command = 'PROTECT'.
      CALL FUNCTION 'WRITE_FORM'
        EXPORTING
          element = 'TERMS_OF_PAYMENT_SPLIT_HEADER'.
      IF sy-subrc NE 0.
        PERFORM protocol_update.
      ENDIF.
    ENDAT.

    vbdkr-text = payment_split-line.
    CALL FUNCTION 'WRITE_FORM'
      EXPORTING
        element = 'TERMS_OF_PAYMENT_SPLIT'
      EXCEPTIONS
        element = 1
        window  = 2.
    IF sy-subrc NE 0.
      PERFORM protocol_update.
    ENDIF.

    AT LAST.
      CALL FUNCTION 'CONTROL_FORM'
        EXPORTING
          command = 'ENDPROTECT'.
    ENDAT.

  ENDLOOP.

ENDFORM.                    "PAYMENT_SPLIT

*---------------------------------------------------------------------*
*       FORM CHECK_REPEAT
*
*---------------------------------------------------------------------*
*       A text is printed, if it is a repeat print for the document.  *
*---------------------------------------------------------------------*

FORM check_repeat.

  CLEAR repeat.
  CLEAR anzal.
  SELECT * INTO *nast FROM nast WHERE kappl = nast-kappl
                                AND   objky = nast-objky
                                AND   kschl = nast-kschl
                                AND   spras = nast-spras
                                AND   parnr = nast-parnr
                                AND   parvw = nast-parvw
                                AND   nacha BETWEEN '1' AND '4'.
    IF *nast-vstat = '1'.
      anzal = anzal + *nast-anzal.
      repeat = 'X'.
    ENDIF.
  ENDSELECT.

ENDFORM.                    "CHECK_REPEAT

*---------------------------------------------------------------------*
*       FORM DIFFERENT_CONSIGNEE                                      *
*---------------------------------------------------------------------*
*       If the consignee in the item is different to the header con-  *
*       signee, it is printed by this routine.                        *
*---------------------------------------------------------------------*

FORM different_consignee.

  CHECK vbdkr-name1_we NE vbdpr-name1_we
    OR  vbdkr-name2_we NE vbdpr-name2_we
    OR  vbdkr-name3_we NE vbdpr-name3_we
    OR  vbdkr-name4_we NE vbdpr-name4_we.
  CHECK vbdpr-name1_we NE space
    OR  vbdpr-name2_we NE space
    OR  vbdpr-name3_we NE space
    OR  vbdpr-name4_we NE space.
  CALL FUNCTION 'WRITE_FORM'
    EXPORTING
      element = 'ITEM_CONSIGNEE'
    EXCEPTIONS
      element = 1
      window  = 2.
  IF sy-subrc NE 0.
    PERFORM protocol_update.
  ENDIF.

ENDFORM.                    "DIFFERENT_CONSIGNEE

*---------------------------------------------------------------------*
*       FORM DIFFERENT_DELIVERY_NO                                    *
*---------------------------------------------------------------------*
*       If the delivery number is different to number in the header,  *
*       it is printed by this routine.                                *
*---------------------------------------------------------------------*

FORM different_delivery_no.

  CHECK vbdkr-vbtyp CA 'MUN'.
  CHECK vbdpr-vbeln_vl NE vbdpr-vbeln_vauf.
  CHECK vbdkr-vbeln_vl NE vbdpr-vbeln_vl.
  CALL FUNCTION 'WRITE_FORM'
    EXPORTING
      element = 'ITEM_DELIVERY_NO'
    EXCEPTIONS
      element = 1
      window  = 2.
  IF sy-subrc NE 0.
    PERFORM protocol_update.
  ENDIF.

ENDFORM.                    "DIFFERENT_DELIVERY_NO

*---------------------------------------------------------------------*
*       FORM DIFFERENT_ORDER_NO                                       *
*---------------------------------------------------------------------*
*       If the order number is different to number in the header,     *
*       it is printed by this routine.                                *
*---------------------------------------------------------------------*

FORM different_order_no.

  CHECK vbdkr-vbtyp CA 'MUN'.
  CHECK vbdpr-vbeln_vauf NE space.
  CHECK vbdkr-vbeln_vauf NE vbdpr-vbeln_vauf.
  CALL FUNCTION 'WRITE_FORM'
    EXPORTING
      element = 'ITEM_ORDER_NO'
    EXCEPTIONS
      element = 1
      window  = 2.
  IF sy-subrc NE 0.
    PERFORM protocol_update.
  ENDIF.

ENDFORM.                    "DIFFERENT_ORDER_NO

*---------------------------------------------------------------------*
*       FORM DIFFERENT_EXTERN_NO                                      *
*---------------------------------------------------------------------*
*       If the extern number is different to number in the header,    *
*       it is printed by this routine.                                *
*---------------------------------------------------------------------*

FORM different_extern_no.

  CHECK vbdkr-vbtyp CA 'MUN'.
  CHECK vbdkr-vbeln_vauf EQ space.
  CHECK vbdkr-vbeln_vl   EQ space.
  CHECK vbdpr-vbeln_vauf EQ space.
  CHECK vbdpr-vbeln_vl   EQ space.
  CHECK vbdkr-vgbel NE vbdpr-vgbel.
  CALL FUNCTION 'WRITE_FORM'
    EXPORTING
      element = 'ITEM_EXTERN_NO'
    EXCEPTIONS
      element = 1
      window  = 2.
  IF sy-subrc NE 0.
    PERFORM protocol_update.
  ENDIF.

ENDFORM.                    "DIFFERENT_EXTERN_NO
*---------------------------------------------------------------------*
*       FORM DIFFERENT_PURCHASE_ORDER_NO                              *
*---------------------------------------------------------------------*
*       If the purchase order number is different to number in the    *
*       header, it is printed by this routine.                        *
*---------------------------------------------------------------------*

FORM different_purchase_order_no.

  CHECK vbdkr-vbtyp CA 'MUN'.
  CHECK vbdpr-bstnk NE space.
  CHECK vbdkr-bstnk NE vbdpr-bstnk
    OR  vbdkr-bstdk NE vbdpr-bstdk.
  CALL FUNCTION 'WRITE_FORM'
    EXPORTING
      element = 'ITEM_PURCHASE_ORDER_NO'
    EXCEPTIONS
      element = 1
      window  = 2.
  IF sy-subrc NE 0.
    PERFORM protocol_update.
  ENDIF.

ENDFORM.                    "DIFFERENT_PURCHASE_ORDER_NO

*---------------------------------------------------------------------*
*       FORM END_PRINT                                                *
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*

FORM end_print.

* Start of change ORI-MULTANI/25.01.2013/CEDK936050
  DATA: w_address_selection LIKE addr1_sel.
* End of change ORI-MULTANI/25.01.2013/CEDK936050
* begin of change IMG-MDs/07.02.2008/VN.1.1
* No protect in the source template document
*  CALL FUNCTION 'CONTROL_FORM'
*    EXPORTING
*      command = 'PROTECT'.
* end of change IMG-MDs/07.02.2008/VN.1.1

  PERFORM header_price_print.


* begin of change IMG-MDs/20.10.2008/VN.1.3
*  PERFORM print_batch_table.
* end of change IMG-MDs/20.10.2008/VN.1.3


  CALL FUNCTION 'WRITE_FORM'
    EXPORTING
      element = 'END_VALUES'.
* begin of change AL/2.0
*  if vbdkr-spart = '01' or vbdkr-spart = '02'. "Anzahlungsprocess?
  IF vbdkr-fkart = 'F2'.
    SELECT SINGLE * FROM vbap WHERE vbeln = vbdkr-vbeln_vauf.
    IF sy-subrc = 0 AND vbap-pstyv = 'TAO'.
      PERFORM scan_it. "check noch offene Anzahlungen
    ENDIF.
  ENDIF.
*  endif.
* end of change AL/2.0

  PERFORM downpayment_value.
  PERFORM paymentcard_values.
  PERFORM amount_for_cash_discount.

* begin of change IMG-MDs/07.02.2008/VN.1.1
* No protect in the source template document
*  CALL FUNCTION 'CONTROL_FORM'
*    EXPORTING
*      command = 'ENDPROTECT'.
* end of change IMG-MDs/07.02.2008/VN.1.1

  PERFORM payment_split.
*begin of change AO-Sam/21.04.2009/VN.1.6 -----------------------*
* Remove for Sales Org. 3100
** Begin CR 1837 Vkorg 2100 want's this also AnR 12.11.09
*  IF vbdkr-vkorg = '3100'.
*  ELSE.
*    PERFORM downpayments.
*  ENDIF.
* end CR 1837 Vkorg 2100 want's this also AnR 12.11.09
*end of change AO-Sam/21.04.2009/VN.1.6   -----------------------*

* Begin of Change YASH-CHITTA 09.08.2013
* Commented code related to Sales org.2300
** begin of change Atos-Chenlp/12.06.2012/VN.2.4 ------------------------*
**-- print payment terms at end of items with element HEADER_ITEM_END------*
*  IF vbdkr-vkorg IN r_vkorg_ctms AND NOT r_vkorg_ctms IS INITIAL.
**  IF vbdkr-vkorg = '2300'.
** Start of change ORI-MULTANI/25.01.2013/CEDK936050
*    CLEAR gs_sadr_sp.
*    READ TABLE gt_vbpa INTO vbpa WITH KEY parvw = 'SP'.
*    IF sy-subrc = 0.
*
*      w_address_selection-addrnumber = vbpa-adrnr.
*
*      CALL FUNCTION 'ADDR_GET'
*        EXPORTING
*          address_selection = w_address_selection
*        IMPORTING
*          sadr              = gs_sadr_sp
*        EXCEPTIONS
*          parameter_error   = 1
*          address_not_exist = 2
*          version_not_exist = 3
*          internal_error    = 4
*          OTHERS            = 5.
*      IF sy-subrc <> 0.
*        CLEAR gs_sadr_sp.
*      ENDIF.
*
*    ENDIF.
** End of change ORI-MULTANI/25.01.2013/CEDK936050
*    CALL FUNCTION 'WRITE_FORM'
*      EXPORTING
*        element = 'HEADER_TERM_END'
*      EXCEPTIONS
*        element = 1
*        window  = 2.
*    IF sy-subrc NE 0.
*      PERFORM protocol_update.
*    ENDIF.
*  ENDIF.
* End of Change YASH-CHITTA 09.08.2013

* end of change Atos-Chenlp/12.06.2012/VN.2.4 ------------------------*
  PERFORM milestone_text.
  CALL FUNCTION 'WRITE_FORM'
    EXPORTING
      element = 'SUPPLEMENT_TEXT'
    EXCEPTIONS
      element = 1
      window  = 2.
  IF sy-subrc NE 0.
    PERFORM protocol_update.
  ENDIF.

ENDFORM.                    "END_PRINT
*-----------------------------------------------------------------------
*
* begin of change AL/2.0
FORM scan_it.
  DATA: print_dot TYPE c.
*data: save_datum like vbrk-fkdat. "AL/2.2
  CLEAR: print_dot. "print dotted line once, header date once
  CLEAR: t_temp[].
  count = 0.
  h_netwr = 0.

* select single * from vbrk where vbeln = vbrk-vbeln. "AL/2.2
* if sy-subrc = 0 and save_datum is initial.          "AL/2.2
*    move vbrk-fkdat to save_datum. "nötig für refblock nur 1x "AL/2.2
* endif.                                              "AL/2.2
  SELECT * FROM vbrp WHERE vgbel = vbdkr-vbeln_vauf. "anhand SD-beleg
    SELECT SINGLE * FROM vbrk WHERE vbeln = vbrp-vbeln AND
                                    fksto = space AND
                                  ( fkart = 'F2' OR fkart = 'FAZ' ).
    IF sy-subrc = 0.
      MOVE vbrp-vbeln TO t_temp-vbeln.
      MOVE vbrp-posnr TO t_temp-posnr.
      MOVE vbrp-fplnr TO t_temp-fplnr.
      MOVE vbrp-fpltr TO t_temp-fpltr.
      MOVE vbrk-fkart TO t_temp-fkart.
      MOVE vbrp-fbuda TO t_temp-fbuda.
      MOVE vbrp-netwr TO t_temp-netwr.
      MOVE vbrk-mwsbk TO t_temp-mwsbk.
      APPEND t_temp.
    ENDIF.
  ENDSELECT.
  t_compare[] = t_temp[].
  SORT t_compare BY fkart fplnr fpltr.
  LOOP AT t_temp WHERE fkart = 'F2'.
    READ TABLE t_compare WITH KEY fkart = 'FAZ'
                                  fplnr = t_temp-fplnr
                                  fpltr = t_temp-fpltr BINARY SEARCH.
    IF sy-subrc = 0.
      DELETE t_compare INDEX sy-tabix.
    ENDIF.
  ENDLOOP.
  DESCRIBE TABLE t_compare LINES count.
  IF count > 0.
    LOOP AT t_compare WHERE fkart = 'FAZ'.
      CLEAR vbdkr-text.
      IF kna1-spras = 'D'.
        WRITE t_compare-fbuda TO h_chr_10 DD/MM/YYYY.   "Fakturadatum
      ELSE.
        WRITE t_compare-fbuda+6(2) TO h_chr_10+0(2). "AL/1.9 umformatierung
        WRITE '.' TO h_chr_10+2(1).                         "AL/1.9
        WRITE t_compare-fbuda+4(2) TO h_chr_10+3(2).        "AL/1.9
        WRITE '.' TO h_chr_10+5(1).                         "AL/1.9
        WRITE t_compare-fbuda+0(4) TO h_chr_10+6(4).        "AL/1.9
      ENDIF.
      IF kna1-spras = 'D'.
        vbdkr-text+0(19)  = 'Anzahlung offen'.
      ELSE.
        vbdkr-text+0(19)  = 'Downpayment owing'.
      ENDIF.
      vbdkr-text+20(07) = t_compare-vbeln+3(7).             "AL/1.9
      vbdkr-text+28(02) = ' / '.                            "AL/1.9
      vbdkr-text+31(10) = h_chr_10.                         "AL/1.9
*   move t_compare-netwr to vbdkr-netwr_vg2.
      vbdkr-netwr_vg2 = t_compare-netwr + t_compare-mwsbk.
      IF vbdkr-text > space AND vbdkr-netwr_vg2 > 0 AND print_dot = space.
        CALL FUNCTION 'WRITE_FORM'
          EXPORTING
            element = 'ZULINE'. "dies nur 1x drucken
        MOVE 'X' TO print_dot.
      ENDIF.
      CALL FUNCTION 'WRITE_FORM'
        EXPORTING
          element = 'ZCHECK_ANZ'.
      h_netwr = h_netwr + t_compare-netwr +  t_compare-mwsbk. "for total
    ENDLOOP.  "of t_cmpare
    IF kna1-spras = 'D'.
      CONCATENATE 'Total Anzahlung offen inkl. allfälliger'
                  'Ausgangssteuer' INTO vbdkr-text SEPARATED BY space.
    ELSE.
      MOVE 'Total downpayment owing incl. possible VAT' TO vbdkr-text.
    ENDIF.
    IF h_netwr > 0.
      MOVE h_netwr TO vbdkr-netwr_vg2.
      CALL FUNCTION 'WRITE_FORM'
        EXPORTING
          element = 'ZCHECK_ANZ'.

* Request Zusatz Statement
      CALL FUNCTION 'WRITE_FORM'
        EXPORTING
          element = 'ZPRINT_SPECIAL'.
    ENDIF.
  ENDIF.                                                    "count > 0
* end   of change AL/2.0
*move save_datum to vbrk-fkdat. "nötig für refblock "AL/2.2
ENDFORM. "scan_it for any open anzahlungen
* begin of change AL/2.1
*----------------------------------------------------------------------*
* calculate_diff: aufgerufen von zrvadin2 ist nötig weil
* die errechnete Felder (Betrag zum abziehen) stehen nicht zur Verfügung
*-----------------------------------------------------------------------
FORM calculate_diff USING i_total o_total.
  DATA: w_betrag LIKE vbdkr-netwr_vg2.

  o_total = 0.
  COMPUTE w_betrag = ( i_total - vbdkr-netwr_vg2 ).
  MOVE w_betrag TO o_total.

ENDFORM. "calculate_diff
*  end of change AL/2.1

*---------------------------------------------------------------------*
*       FORM FORM_CLOSE                                               *
*---------------------------------------------------------------------*
*       End of printing the form                                      *
*---------------------------------------------------------------------*

FORM form_close.
  DATA: i_itcpp LIKE itcpp.

* insert note 508569 {
* OTF-Output, wenn Browser-Druck

*Comment Begin CHG0037806 ZAYIDU CEDK963987
* Define Internal table for OTF-Data
* DATA: otf_data LIKE itcoo OCCURS 0 WITH HEADER LINE.
*Comment End   CHG0037806 ZAYIDU CEDK963987
*replace begin CHG0037806 ZAYIDU CEDK963987
*  IF nast-sort1 = 'EBPP'.
*    CALL FUNCTION 'CLOSE_FORM'
*      IMPORTING
*        result  = i_itcpp
*      TABLES
*        otfdata = otf_data
*      EXCEPTIONS
*        OTHERS  = 1.
*   ELSE.
*    CALL FUNCTION 'CLOSE_FORM'
*      IMPORTING
*        result = i_itcpp
*      EXCEPTIONS
*        OTHERS = 1.
** insert note 508569 {
*  ENDIF.
** } end note 508569

   IF gv_flag_prnt IS NOT INITIAL AND nast-kschl EQ 'ZMAL'. "If Conversion to PDF
      i_itcpp-tdgetotf  = 'X'.
    CALL FUNCTION 'CLOSE_FORM'
      IMPORTING
        result  = i_itcpp
      TABLES
        otfdata = otf_data
      EXCEPTIONS
        OTHERS  = 1.
*    If Just Viewing the Print Output
  ELSEIF gv_flag_view IS NOT INITIAL AND nast-kschl EQ 'ZMAL'.
    CALL FUNCTION 'CLOSE_FORM'
      IMPORTING
        result = i_itcpp
      EXCEPTIONS
        OTHERS = 1.
  ELSEIF gv_flag_others IS NOT INITIAL.
    CALL FUNCTION 'CLOSE_FORM'
      IMPORTING
        result = i_itcpp
      EXCEPTIONS
        OTHERS = 1.

  ENDIF.
*replace end CHG0037806 ZAYIDU CEDK963987

  IF sy-subrc NE 0.
    retcode = sy-subrc.
    PERFORM protocol_update.
  ENDIF.

*Insert Begin CHG0037806 ZAYIDU CEDK963987
*MOVE otf CODE TO STRUCTURE soli FORM email
*Creation of the document attachment
*this form gets the otf code from the sapscript form.
CLEAR solisti1. REFRESH solisti1.
  LOOP AT otf_data.
  solisti1-line = otf_data.
  APPEND solisti1.
  ENDLOOP.
*Insert End CHG0037806 ZAYIDU CEDK963987

* insert note 508569 {
  IF nast-sort1 = 'EBPP'.
    CALL FUNCTION 'SAVE_OTF_TO_MEMORY'
      EXPORTING
        memory_key = nast-objky
      TABLES
        otf        = otf_data.
  ENDIF.
* } end note 508569

  IF i_itcpp-tdspoolid NE space.
    PERFORM protocol_update_spool USING '342' i_itcpp-tdspoolid
                                              space space space.
  ENDIF.

  SET COUNTRY space.

* update number of printed pages in VBRK for Argentina
  CALL FUNCTION 'J_1A_SD_UPD_NUM_OF_PAGES'
    EXPORTING
      pages = i_itcpp-tdpages
      vbeln = vbdkr-vbeln
      bukrs = vbdkr-bukrs.


ENDFORM.                    "FORM_CLOSE

*---------------------------------------------------------------------*
*       FORM FORM_OPEN                                                *
*---------------------------------------------------------------------*
*       Start of printing the form                                    *
*---------------------------------------------------------------------*
*  -->  US_SCREEN  Output on screen                                   *
*                  ' ' = Printer                                      *
*                  'X' = Screen                                       *
*  -->  US_COUNTRY County for telecommunication and SET COUNTRY       *
*---------------------------------------------------------------------*

FORM form_open USING us_screen us_country.

  DATA: l_result.
  CLEAR: gv_uline.

* begin of change MDs/19.11.2008/VN.1.5. -----------------------*
* not needed anymore CR1892 AnR 29.6.11
*  CALL METHOD ZCL_GLDB_ZTAB_ULINE_PRINT=>GET_ULINE_STRING
*    EXPORTING
*      I_LDEST  = NAST-LDEST
*    IMPORTING
*      E_ULINE  = GV_ULINE
*      E_RESULT = L_RESULT.
  DO 78 TIMES.
    CONCATENATE
      '_'
      gv_uline
      INTO gv_uline.
  ENDDO.

* end of CR 1892
* end of change MDs/19.11.2008/VN.1.5. -----------------------*
  INCLUDE zrvadopfo.

*Insert Begin CHG0037806 ZAYIDU CEDK963987
  gv_flag_others = lv_flag_others .
  gv_flag_prnt   = lv_flag_prnt   .
  gv_flag_view   = lv_flag_view   .

  CLEAR : lv_flag_others ,
          lv_flag_prnt   ,
          lv_flag_view   .
*Insert End   CHG0037806 ZAYIDU CEDK963987

* Begin of change ORI-MULTANI/11.04.2011/VN.2.3
* If sales organization is CTIN then change start page of FORM
* Begin of Change YASH-CHITTA 09.08.2013
* Remove hardcoding for Sales org.
*  IF  vbdkr-vkorg = '3200'.
  IF  r_vkorg_ctin IS NOT INITIAL
  AND vbdkr-vkorg  IN r_vkorg_ctin.                         " '3200'.
* End of Change YASH-CHITTA 09.08.2013
    IF vbdkr-fkart = 'F2' OR vbdkr-fkart = 'L2' OR vbdkr-fkart = 'F1'.
      CALL FUNCTION 'START_FORM'
        EXPORTING
*         ARCHIVE_INDEX          =
*         FORM        = ' '
*         LANGUAGE    = ' '
          startpage   = 'FIRST_2'
*         PROGRAM     = ' '
*         MAIL_APPL_OBJECT       =
*   IMPORTING
*         LANGUAGE    =
        EXCEPTIONS
          form        = 1
          format      = 2
          unended     = 3
          unopened    = 4
          unused      = 5
          spool_error = 6
          codepage    = 7
          OTHERS      = 8.
      IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.
    ELSE.

      CALL FUNCTION 'START_FORM'
        EXPORTING
*         ARCHIVE_INDEX          =
*         FORM        = ' '
*         LANGUAGE    = ' '
          startpage   = 'FIRST_1'
*         PROGRAM     = ' '
*         MAIL_APPL_OBJECT       =
*   IMPORTING
*         LANGUAGE    =
        EXCEPTIONS
          form        = 1
          format      = 2
          unended     = 3
          unopened    = 4
          unused      = 5
          spool_error = 6
          codepage    = 7
          OTHERS      = 8.
      IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.
    ENDIF.

  ENDIF.
* End of change ORI-MULTANI/11.04.2011/VN.2.3
ENDFORM.                    "FORM_OPEN

*---------------------------------------------------------------------*
*       FORM FORM_TITLE_PRINT                                         *
*---------------------------------------------------------------------*
*       Printing of the form title depending of the field VBTYP       *
*---------------------------------------------------------------------*

FORM form_title_print.

* Header already printed in the constant window
*  CASE vbdkr-vbtyp.
*    WHEN 'M'.
*      CALL FUNCTION 'WRITE_FORM'
*        EXPORTING
*          element = 'TITLE_M'
*          window  = 'TITLE'
*        EXCEPTIONS
*          element = 1
*          window  = 2.
**ENHANCEMENT-SECTION     FORM_TITLE_PRINT_01 SPOTS ES_RVADIN01.
*      IF sy-subrc NE 0.
*        PERFORM protocol_update.
*      ENDIF.
**END-ENHANCEMENT-SECTION.
*    WHEN 'N'.
*      CALL FUNCTION 'WRITE_FORM'
*        EXPORTING
*          element = 'TITLE_N'
*          window  = 'TITLE'
*        EXCEPTIONS
*          element = 1
*          window  = 2.
*      IF sy-subrc NE 0.
*        PERFORM protocol_update.
*      ENDIF.
*    WHEN 'O'.
*      CALL FUNCTION 'WRITE_FORM'
*        EXPORTING
*          element = 'TITLE_O'
*          window  = 'TITLE'
*        EXCEPTIONS
*          element = 1
*          window  = 2.
*      IF sy-subrc NE 0.
*        PERFORM protocol_update.
*      ENDIF.
*    WHEN 'P'.
*      CALL FUNCTION 'WRITE_FORM'
*        EXPORTING
*          element = 'TITLE_P'
*          window  = 'TITLE'
*        EXCEPTIONS
*          element = 1
*          window  = 2.
*      IF sy-subrc NE 0.
*        PERFORM protocol_update.
*      ENDIF.
*    WHEN 'S'.
*      CALL FUNCTION 'WRITE_FORM'
*        EXPORTING
*          element = 'TITLE_S'
*          window  = 'TITLE'
*        EXCEPTIONS
*          element = 1
*          window  = 2.
*      IF sy-subrc NE 0.
*        PERFORM protocol_update.
*      ENDIF.
*    WHEN 'U'.
*      CALL FUNCTION 'WRITE_FORM'
*        EXPORTING
*          element = 'TITLE_U'
*          window  = 'TITLE'
*        EXCEPTIONS
*          element = 1
*          window  = 2.
*      IF sy-subrc NE 0.
*        PERFORM protocol_update.
*      ENDIF.
*    WHEN OTHERS.
*      CALL FUNCTION 'WRITE_FORM'
*        EXPORTING
*          element = 'TITLE_M'
*          window  = 'TITLE'
*        EXCEPTIONS
*          element = 1
*          window  = 2.
*      IF sy-subrc NE 0.
*        PERFORM protocol_update.
*      ENDIF.
*  ENDCASE.
  IF repeat NE space.
    CALL FUNCTION 'WRITE_FORM'
      EXPORTING
        element = 'REPEAT'
        window  = 'REPEAT'
      EXCEPTIONS
        element = 1
        window  = 2.
    IF sy-subrc NE 0.
      PERFORM protocol_update.
    ENDIF.
  ENDIF.

ENDFORM.                    "FORM_TITLE_PRINT
*---------------------------------------------------------------------*
*       FORM FORM_TITLE_PRINT_HU
*
*---------------------------------------------------------------------*
*       Printing of the form title depending of the field VBTYP       *
*---------------------------------------------------------------------*

FORM form_title_print_hu.

  CASE vbdkr-vbtyp.
    WHEN 'M'.
      CALL FUNCTION 'WRITE_FORM'
        EXPORTING
          element = 'TITLE_M'
          window  = 'TITLE'
        EXCEPTIONS
          element = 1
          window  = 2.
      IF sy-subrc NE 0.
        PERFORM protocol_update.
      ENDIF.
    WHEN 'N'.
      CALL FUNCTION 'WRITE_FORM'
        EXPORTING
          element = 'TITLE_N'
          window  = 'TITLE'
        EXCEPTIONS
          element = 1
          window  = 2.
      IF sy-subrc NE 0.
        PERFORM protocol_update.
      ENDIF.
    WHEN 'O'.
      CALL FUNCTION 'WRITE_FORM'
        EXPORTING
          element = 'TITLE_O'
          window  = 'TITLE'
        EXCEPTIONS
          element = 1
          window  = 2.
      IF sy-subrc NE 0.
        PERFORM protocol_update.
      ENDIF.
    WHEN 'P'.
      CALL FUNCTION 'WRITE_FORM'
        EXPORTING
          element = 'TITLE_P'
          window  = 'TITLE'
        EXCEPTIONS
          element = 1
          window  = 2.
      IF sy-subrc NE 0.
        PERFORM protocol_update.
      ENDIF.
    WHEN 'S'.
      CALL FUNCTION 'WRITE_FORM'
        EXPORTING
          element = 'TITLE_S'
          window  = 'TITLE'
        EXCEPTIONS
          element = 1
          window  = 2.
      IF sy-subrc NE 0.
        PERFORM protocol_update.
      ENDIF.
    WHEN 'U'.
      CALL FUNCTION 'WRITE_FORM'
        EXPORTING
          element = 'TITLE_U'
          window  = 'TITLE'
        EXCEPTIONS
          element = 1
          window  = 2.
      IF sy-subrc NE 0.
        PERFORM protocol_update.
      ENDIF.
    WHEN OTHERS.
      CALL FUNCTION 'WRITE_FORM'
        EXPORTING
          element = 'TITLE_M'
          window  = 'TITLE'
        EXCEPTIONS
          element = 1
          window  = 2.
      IF sy-subrc NE 0.
        PERFORM protocol_update.
      ENDIF.
  ENDCASE.
  vbdkr-repeat_hu = repeat.
  CALL FUNCTION 'WRITE_FORM'
    EXPORTING
      element = 'REPEAT'
      window  = 'REPEAT'
    EXCEPTIONS
      element = 1
      window  = 2.
  IF sy-subrc NE 0.
    PERFORM protocol_update.
  ENDIF.

ENDFORM.                    "FORM_TITLE_PRINT_HU

*---------------------------------------------------------------------*
*       FORM GET_DATA                                                 *
*---------------------------------------------------------------------*
*       General provision of data for the form                        *
*---------------------------------------------------------------------*

FORM get_data.

* begin of change AL/1.4
  TABLES: thead, stxh.
  DATA: BEGIN OF tlinetab OCCURS 10.
          INCLUDE STRUCTURE tline.
  DATA: END OF tlinetab.
  DATA: x_chr_70(70) TYPE c.
  CLEAR: x_chr_70.
* end of change AL/1.4

  DATA: lv_auart  TYPE auart.

* begin of change IMG-MDs/14.10.2008
* CR. from 09.10.2008 from P.Walker
  DATA: ls_ztab_vbrk  TYPE ztab_vbrk.
* end of change IMG-MDs/14.10.2008

* Begin of Declaration ZEN-JUTURU / 08.01.2015 / CHG3010125

  CONSTANTS : lc_100 TYPE fproz VALUE '100.00'.
  DATA : lv_perc  TYPE fproz,
         lv_tmp   TYPE fproz,
         lv_lines TYPE i.

* End of Declaration ZEN-JUTURU / 08.01.2015 / CHG3010125

  CALL FUNCTION 'RV_PRICE_PRINT_REFRESH'
    TABLES
      tkomv = tkomv.
  CLEAR komk.
  CLEAR komp.
  CLEAR nast_anzal.      "Clear aux. variable for number of outputs
  CLEAR   sdaccdpc.
  REFRESH ixsdaccdpc.
  CLEAR downpay_refresh.

* Initialization
  CLEAR: gs_tel_line, gs_fax_line.
  CLEAR: gs_t005k_1, gs_t005k_2, gs_t005k_3, gs_t005k_4.
  CLEAR: lv_auart.

* begin of change IMG-MDs/14.10.2008
* CR. from 09.10.2008 from P.Walker
  CLEAR: ls_ztab_vbrk, gs_head.
* end of change IMG-MDs/14.10.2008

  CLEAR: gv_no_adv_paym, gv_not_tax.

  IF nast-objky+10(6) NE space.
    vbco3-vbeln = nast-objky+16(10).
  ELSE.
    vbco3-vbeln = nast-objky.
  ENDIF.

  vbco3-mandt = sy-mandt.
  vbco3-spras = nast-spras.
  vbco3-kunde = nast-parnr.
  vbco3-parvw = nast-parvw.

  CALL FUNCTION 'RV_BILLING_PRINT_VIEW'
    EXPORTING
      comwa                        = vbco3
    IMPORTING
      kopf                         = vbdkr
    TABLES
      pos                          = tvbdpr
    EXCEPTIONS
      terms_of_payment_not_in_t052 = 1
      error_message                = 5
      OTHERS                       = 4.
  IF NOT sy-subrc IS INITIAL.
    IF sy-subrc = 1.
      syst-msgty = 'I'.
      PERFORM protocol_update.
    ENDIF.
  ENDIF.
  gv_paradrnr = vbdkr-adrnr.
* fill address key --> necessary for emails
  addr_key-addrnumber = vbdkr-adrnr.
  addr_key-persnumber = vbdkr-adrnp.
  addr_key-addr_type  = vbdkr-address_type.

  PERFORM sender.
  PERFORM check_repeat.

* Temporary solution based on the solition from CTP
* according P. Walker from 2008-10-28 - BEGIN

* Begin Met/28.07.2004 ------------------------------------------------

*   Fax ???
  IF nast-nacha EQ '2'.

*   Fax an Spedi 2 25 80 => RE
    IF nast-kschl EQ 'ZDF3'.

      CLEAR nast-telfx.
      nast-telfx = '052 262 25 80'.
      nast-tland = 'CH'.

      SHIFT nast-objky LEFT DELETING LEADING '0'.
      CONCATENATE 'Rechnung  :'  nast-objky '  an Spedi'
                  INTO nast-tdcovtitle SEPARATED BY space .

    ENDIF.

* Begin Met/27.09.2006 ------------------------------------------------
*   Fax an Spedi 2 25 80  => WE
    IF nast-kschl EQ 'ZDF4'.

      CLEAR nast-telfx.
      nast-telfx = '052 262 25 80'.
      nast-tland = 'CH'.

      SHIFT nast-objky LEFT DELETING LEADING '0'.
      CONCATENATE 'Rechnung  :'  nast-objky '  an Spedi'
                  INTO nast-tdcovtitle SEPARATED BY space .

    ENDIF.
* End   Met/27.09.2006 -------------------------------------------------------

*   Fax an Quadro-System 2 03 88
    IF nast-kschl EQ 'ZDF2'.

      CLEAR nast-telfx.
      nast-telfx = '052 262 03 88'.
      nast-tland = 'CH'.

      SHIFT nast-objky LEFT DELETING LEADING '0'.
      CONCATENATE 'Rechnung  :'  nast-objky '  an QSY'
                  INTO nast-tdcovtitle SEPARATED BY space .

    ENDIF.

*   Fax an Kunde
    IF nast-kschl EQ 'ZDF1'.

      SHIFT nast-objky LEFT DELETING LEADING '0'.
      CONCATENATE 'Rechnung  :'  nast-objky '  an Kunde' INTO
      nast-tdcovtitle
                  SEPARATED BY space .

* Beginn Met/04.07.2006 ------------------------------------------------
      IF nast-telfx(2) EQ '00'.

        MOVE nast-telfx+4(27) TO nast-telfx.

      ENDIF.
* End    Met/04.07.2006 ------------------------------------------------
    ENDIF.

  ENDIF.

* End   Met/28.07.2004 -------------------------------------------------


* Temporary solution according P. Walker from 2008-10-28 - END


  PERFORM get_header_prices.
* CT-spezifische Daten aufbereiten

* Vertriebbelegkopf lesen (Kundenbestellnummer)
  SELECT SINGLE * FROM vbak WHERE vbeln EQ vbdkr-vbeln_vauf. "ID-01


* Vertriebbelegposition lesen (Gewichte)
  SELECT SINGLE * FROM vbap WHERE vbeln EQ vbdkr-vbeln_vauf "ID-01
                            AND   posnr EQ '000010'.        "ID-01
** begin of change IMG-MDs/13.08.2008
** Weight should be a sum of all positions.
*  CLEAR: gs_vbap_sum, gs_vbap_simple.
*  SELECT vbeln brgew ntgew FROM vbap
*     INTO CORRESPONDING FIELDS OF gs_vbap_simple
*       WHERE vbeln EQ vbdkr-vbeln_vauf.
*    COLLECT  gs_vbap_simple INTO gt_vbap_sum.
*  ENDSELECT.
*  READ TABLE gt_vbap_sum INTO gs_vbap_sum  WITH KEY vbeln = vbdkr-vbeln_vauf.
** end of change IMG-MDs/13.08.2008

* begin of change IMG-MDs/14.10.2008
* CR. from 09.10.2008 from P.Walker
  CLEAR: gs_vbrp_sum, gs_vbrp_simple, gt_vbrp_sum[].
* ad 1) read table ZTAB_VBRK with invoice number => if something found => print it as net and grossweight.
  SELECT SINGLE * FROM ztab_vbrk
    INTO ls_ztab_vbrk
      WHERE vbeln = vbdkr-vbeln.
  IF sy-subrc = 0.
    gs_vbrp_sum-brgew = ls_ztab_vbrk-brgew.
    gs_vbrp_sum-ntgew = ls_ztab_vbrk-ntgew.
  ELSE.
* Further processing
*   begin of change IMG-MDs/17.09.2008
*   Weight should be a sum of all positions from the invoice.
*     clear: gs_vbrp_sum, gs_vbrp_simple, gt_vbrp_sum[].
    SELECT vbeln brgew ntgew FROM vbrp
       INTO CORRESPONDING FIELDS OF gs_vbrp_simple
         WHERE vbeln EQ vbdkr-vbeln.
      COLLECT  gs_vbrp_simple INTO gt_vbrp_sum.
    ENDSELECT.
    READ TABLE gt_vbrp_sum INTO gs_vbrp_sum  WITH KEY vbeln = vbdkr-vbeln.
*   end of change IMG-MDs/17.09.2008
  ENDIF.

* end of change IMG-MDs/14.10.2008

* Vertrieb Kaufmännische Daten Position (Zahlungsbed., Incoterms)
  SELECT SINGLE * FROM vbkd WHERE vbeln EQ vbdkr-vbeln_vauf "ID-01
                            AND   posnr EQ '000000'.        "ID-01
* Text zu den Zahlungsbedingungen lesen
*begin of change AO-Sam/21.04.2009/VN.1.6 -----------------------*
*For sales org. 3100, read description of payment term of Invoice
*header.

*Begin of change Atos-Chenxh/09.07.2010/VN.2.0----------------*
**  IF vbdkr-vkorg = '3100' OR vbdkr-vkorg = '3300' .
*End of change Atos-Chenxh/09.07.2010/VN.2.0----------------*
  SELECT SINGLE * FROM tvzbt WHERE spras = nast-spras       "ID-01
                             AND   zterm = vbdkr-zterm.     "ID-01
**  ELSE.
***End of change AO-Sam/21.04.2009/VN.1.6 -------------------------*
**    SELECT SINGLE * FROM tvzbt WHERE spras = nast-spras     "ID-01
**                               AND   zterm = vbkd-zterm.    "ID-01
**  ENDIF.


*--> YOUN_M  23052018 CHG0035751
*-------------------------------------------------------------------*
*Begin of Change on 04.July 2018
*-------------------------------------------------------------------*
*Read Pay.Term from T052U insted of TVZBT
*However, Keep prior code(reading from tvzbt) above
*bacause other fields could be used.
*-------------------------------------------------------------------*
*c.f>>>  FORM :ZGL_RVINVOICE02  / Window MAIN
*-------------------------------------------------------------------*
*Begin of Change on 04.July 2018 : read Pay.Term from T052U - YOUN_M
*<B>Terms of Payment:</>,,&TVZBT-VTEXT(C30)&
*<B>Terms of Payment:</>,,&T052U-TEXT1(C30)&
*End of Change on 04.July 2018 : read Pay.Term from T052U - YOUN_M
*-------------------------------------------------------------------*
*  TABLES  :  T052U.

  SELECT SINGLE *
  FROM   t052u
  WHERE  spras  =  nast-spras       "ID-01
  AND    zterm  =  vbdkr-zterm.     "ID-01
* AND    ZTAGG  =  '00'.            "No Need to consider - all '00'
*-------------------------------------------------------------------*
*End of Change on 04.July 2018 :
*-------------------------------------------------------------------*
*<-- YOUN_M  23052018 CHG0035751


* Lesen Faktura Dateum
  SELECT SINGLE * FROM vbrk WHERE vbeln = vbdkr-vbeln.      "AL/15.06
  IF sy-subrc <> 0.                                         "AL/15.06
    CLEAR vbrk.                                             "AL/15.06
  ENDIF.                                                    "AL/15.06

* begin of change AL/1.4
  CLEAR zflag.
  CLEAR thead.
  MOVE vbdkr-tdname TO x_chr_70.
  CALL FUNCTION 'READ_TEXT'
    EXPORTING
      id        = '0013'  "OBJID for bank details
      language  = nast-spras
      name      = x_chr_70
      object    = 'VBBK'
    IMPORTING
      header    = thead
    TABLES
      lines     = tlinetab
    EXCEPTIONS
      id        = 1
      language  = 2
      name      = 3
      not_found = 4
      object    = 5.

  IF sy-subrc = 0.
    MOVE '1' TO zflag. "user eingebenen bank statt default
  ENDIF.
* end of change AL/1.4

* begin of change ORI-TIBREWAL/18.01.2011/VN.2.1 -----------------------*
* get company's detail

  IF vbrk IS NOT INITIAL.
    SELECT * UP TO 1 ROWS  FROM j_1imocomp INTO w_j_1imocomp
      WHERE bukrs = vbrk-bukrs.
    ENDSELECT.
    "Insert Begin By WADHYO/P-CHG0032457/ CEDK955856/13.07.2017
    SELECT SINGLE gstin
    FROM  j_1bbranch
    INTO lv_gstin
    WHERE branch = vbrk-vkorg.

    SELECT SINGLE paval
    FROM t001z INTO gv_cin
    WHERE bukrs = vbrk-bukrs
    AND party = 'CIN' .

    SELECT SINGLE paval
    FROM t001z INTO gv_pan1
    WHERE bukrs = vbrk-bukrs
    AND party = 'J_1I02' .
    "Indert End By WADHYO/P-CHG0032457/ CEDK955856/13.07.2017
  ENDIF.

* get customer's detail
  IF vbak IS NOT INITIAL.
    SELECT SINGLE * FROM j_1imocust INTO w_j_1imocust
      WHERE kunnr = vbak-kunnr.
  ENDIF.

* end of change ORI-TIBREWAL/18.01.2011/VN.2.1 -----------------------*

* Calling customer subroutine dynamically for additional data transfer
  IF NOT get_data_userexit IS INITIAL.
    PERFORM (get_data_userexit) IN PROGRAM rvadin01 IF FOUND.
  ENDIF.


* begin of change IMG-MDs/31.01.2008/VN.1.1 -----------------------*
* Get all partners into internal
  DATA: ls_address_selection LIKE addr1_sel,
        lt_adr6              TYPE TABLE OF adr6.

  SELECT * FROM vbpa
    INTO CORRESPONDING FIELDS OF TABLE gt_vbpa
      WHERE vbeln EQ vbdkr-vbeln.

  READ TABLE gt_vbpa INTO gs_vbpa_ag WITH KEY parvw = 'AG'.
  IF sy-subrc = 0.
    ls_address_selection-addrnumber = gs_vbpa_ag-adrnr.

    CALL FUNCTION 'ADDR_GET'
      EXPORTING
        address_selection = ls_address_selection
      IMPORTING
        sadr              = gs_sadr_ag
      EXCEPTIONS
        parameter_error   = 1
        address_not_exist = 2
        version_not_exist = 3
        internal_error    = 4
        OTHERS            = 5.
    IF sy-subrc <> 0.
    ENDIF.

* Get customer data:
    CLEAR: gs_kna1_ag.
    CALL FUNCTION 'KNA1_READ_SINGLE'
      EXPORTING
        id_kunnr            = gs_vbpa_ag-kunnr
      IMPORTING
        es_kna1             = gs_kna1_ag
      EXCEPTIONS
        not_found           = 1
        input_not_specified = 2
        OTHERS              = 3.
    IF sy-subrc <> 0.
    ENDIF.

  ENDIF.

* Get RE Partner
  READ TABLE gt_vbpa INTO gs_vbpa_re WITH KEY parvw = 'RE'.
  IF sy-subrc = 0.
    SELECT SINGLE * FROM knb1 WHERE kunnr = gs_vbpa_re-kunnr.
  ENDIF.

*--Begin of Insert TULARAJ-CEDK961813-Project Bahrine
* Get WE Partner
  READ TABLE gt_vbpa INTO gs_vbpa_we WITH KEY parvw = 'WE'.
  IF sy-subrc = 0.
    SELECT SINGLE land1 INTO gv_land1 FROM kna1 WHERE kunnr = gs_vbpa_we-kunnr.
  ENDIF.
*--End of Insert TULARAJ-CEDK961813-Project Bahrine

* begin of change IMG-MDs/04.09.2008/Error 638 --------------------*

* Check reference order type
  CALL FUNCTION 'ZGL_SD_CHECK_REF_ORD_TYPE'
    EXPORTING
      im_vbrk  = vbrk
    IMPORTING
      ex_auart = lv_auart.

* If order type is...
  CASE lv_auart.
    WHEN  cs_auart-zor OR cs_auart-zfor OR cs_auart-ta.
* ...ZOR or ZFOR, get data "Our contact" header data from PS (Project Manager)
      PERFORM get_header_cont_data_proj_ord.
    WHEN OTHERS.
* ...alse get "Our contact" header data from SD Order (ZP or ZV Partner)
* ... or ZM Partner (CR from 21.11.2008)
      PERFORM get_header_contact_data.
  ENDCASE.

  PERFORM obtain_ref_doc_numb.
* end of change IMG-MDs/04.09.2008/Error 638 --------------------*


* begin of change IMG-MDs/06.05.2008/VN.1.1 ---------------------*
* Get "Unsere USt-ID-Nr."
*    IF NOT vbak-bukrs_vf IS INITIAL.
*      SELECT SINGLE * FROM t001 INTO gs_t001 WHERE bukrs = vbak-bukrs_vf.
*      IF sy-subrc = 0.
*        SELECT SINGLE * FROM t001n INTO gs_t001n  WHERE bukrs = gs_t001-bukrs
*                                                    AND land1 = gs_t001-land1.
*
*      ENDIF.
*    ENDIF.
* end of change IMG-MDs/06.05.2008/VN.1.1 ---------------------*
*  ENDIF.

* begin of change IMG-MDs/05.11.2008/VN.1.6 ---------------------*
** begin of change IMG-MDs/06.05.2008/VN.1.1 ---------------------*
** Get country of the plant (from first position of the invoice)
*  READ TABLE tvbdpr INTO vbdpr INDEX 1.
*  IF sy-subrc = 0.
*    SELECT SINGLE * FROM t001w INTO gs_t001w WHERE werks = vbdpr-werks.
*    IF sy-subrc = 0.
** In case of Down payments (the invoice type "FAZ" and "FAS") if departure country
**  is different than destination country (VBRK-LANDX <> VBRK-LAND1) read the Tax number for Switzerland.
*      IF ( vbrk-fkart = 'FAZ' OR vbrk-fkart = 'FAS' ) AND ( vbrk-landtx <> vbrk-land1 ). "Fkart for downpayments (will never change)
*        SELECT SINGLE * FROM t001n INTO gs_t001n  WHERE bukrs = vbrk-bukrs
*                                                    AND land1 = c_land_ch.
*      ELSE.
*        SELECT SINGLE * FROM t001n INTO gs_t001n  WHERE bukrs = vbrk-bukrs
*                                                    AND land1 = gs_t001w-land1.
*      ENDIF.
*    ENDIF.
*  ENDIF.
*
**  SELECT SINGLE * FROM t001 INTO gs_t001 WHERE bukrs = vbak-bukrs_vf.
**  IF sy-subrc = 0.
**    SELECT SINGLE * FROM t001n INTO gs_t001n  WHERE bukrs = gs_t001-bukrs
**                                                AND land1 = gs_t001-land1.
**
**  ENDIF.
*
*
** end of change IMG-MDs/06.05.2008/VN.1.1 ---------------------*
* New logic required according V1.6 (P.Walker / 4 November 2008 16:27)
* ‘our VAT’ should be according this logic. Look in T001n if you find entry with VBRK-LANDTX, if nothing is found, take fix CH number
  SELECT SINGLE * FROM t001n INTO gs_t001n  WHERE bukrs = vbrk-bukrs
                                              AND land1 = vbrk-landtx.

*  IF SY-SUBRC <> 0.   "Commented by TULARAJ CEDK960799-Project Bahrine
* Insert Begin TULARAJ CEDK960799-Project Bahrine
  IF sy-subrc <> 0.
    IF vbrk-bukrs = '3600'.
      SELECT SINGLE * FROM t001n INTO gs_t001n  WHERE bukrs = vbrk-bukrs
                                                AND land1 = 'BH'.
    ELSE.
* Insert End TULARAJ CEDK960799-Project Bahrine
      SELECT SINGLE * FROM t001n INTO gs_t001n  WHERE bukrs = vbrk-bukrs
                                                 AND land1 = c_land_ch.
    ENDIF.
  ENDIF.


* end of change IMG-MDs/05.11.2008/VN.1.6 ---------------------*


* end of change IMG-MDs/31.01.2008/VN.1.1 -----------------------*


* begin of change IMG-MDs/06.02.2008/VN.1.1 ---------------------*
* Get Buchhaltung data

  CLEAR: gs_usaddr, gs_usr03, lt_adr6[], gs_adr6.
  CALL FUNCTION 'SUSR_USER_ADDRESS_READ'
    EXPORTING
      user_name              = vbrk-ernam
*     READ_DB_DIRECTLY       = ' '
    IMPORTING
      user_address           = gs_usaddr
      user_usr03             = gs_usr03
    EXCEPTIONS
      user_address_not_found = 1
      OTHERS                 = 2.
  IF sy-subrc <> 0.
  ELSE.
    CALL FUNCTION 'ADDR_SELECT_ADR6_SINGLE'
      EXPORTING
        addrnumber          = gs_usaddr-addrnumber
        persnumber          = gs_usaddr-persnumber
      TABLES
        et_adr6             = lt_adr6
      EXCEPTIONS
        comm_data_not_exist = 1
        parameter_error     = 2
        internal_error      = 3
        OTHERS              = 4.
    IF sy-subrc <> 0.
    ELSE.
* OK
      DELETE lt_adr6 WHERE flgdefault = space.
      SORT lt_adr6 BY date_from DESCENDING.
      READ TABLE lt_adr6 INTO gs_adr6 INDEX 1.
    ENDIF.
* begin of change IMG-MDs/13.05.2008/VN.1.1 ---------------------*
* Adjust telephone numbers
    SHIFT gs_usaddr-tel_number LEFT DELETING LEADING '0'.
    SHIFT gs_usaddr-fax_number LEFT DELETING LEADING '0'.
    SELECT SINGLE * FROM t005k INTO gs_t005k_3 WHERE land1 = gs_usaddr-country.

* end of change IMG-MDs/13.05.2008/VN.1.1 ---------------------*

  ENDIF.


* Determine Tax exempt as intra-community supply

  DATA: ls_t001  TYPE t001,
        ls_t005  TYPE t005,
        ls_t007a TYPE t007a,
        lv_mwsk1 TYPE mwskz,
        lt_lines TYPE TABLE OF tline.

  DATA: ls_tkomv LIKE LINE OF tkomv.

  CLEAR: ls_t001, ls_t005, ls_t007a.



  SELECT SINGLE * FROM t001 INTO ls_t001 WHERE bukrs = vbdkr-bukrs.
  IF sy-subrc = 0.
    SELECT SINGLE * FROM t005 INTO ls_t005 WHERE land1 = ls_t001-land1.
    IF sy-subrc = 0.


*  Determine lv_mwsk1


      IF lv_mwsk1 IS INITIAL.
        LOOP AT tkomv INTO ls_tkomv WHERE NOT mwsk1 IS INITIAL.
          lv_mwsk1 = ls_tkomv-mwsk1.
          EXIT.
        ENDLOOP.
      ENDIF.

      SELECT SINGLE * FROM t007a INTO ls_t007a WHERE kalsm = ls_t005-kalsm
                                                 AND mwskz = lv_mwsk1.
      IF sy-subrc = 0.
        IF ls_t007a-egrkz = '1'  OR
           ls_t007a-egrkz = '2' .
          g_sd_tax_exempt_text = g_st_text_1.
          CALL FUNCTION 'READ_TEXT'
            EXPORTING
              id                      = 'ST'
              language                = nast-spras
              name                    = g_sd_tax_exempt_text
              object                  = 'TEXT'
            TABLES
              lines                   = lt_lines
            EXCEPTIONS
              id                      = 1
              language                = 2
              name                    = 3
              not_found               = 4
              object                  = 5
              reference_check         = 6
              wrong_access_to_archive = 7
              OTHERS                  = 8.
          IF sy-subrc <> 0.
            CLEAR: g_sd_tax_exempt_text.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.
* Determine second case (Triangulation supply under Article...)
  IF vbrk-xegdr = c_true.
    g_sd_tax_exempt_text_2 = g_st_text_2.
    CLEAR: lt_lines[].
    CALL FUNCTION 'READ_TEXT'
      EXPORTING
        id                      = 'ST'
        language                = nast-spras
        name                    = g_sd_tax_exempt_text_2
        object                  = 'TEXT'
      TABLES
        lines                   = lt_lines
      EXCEPTIONS
        id                      = 1
        language                = 2
        name                    = 3
        not_found               = 4
        object                  = 5
        reference_check         = 6
        wrong_access_to_archive = 7
        OTHERS                  = 8.
    IF sy-subrc <> 0.
      CLEAR: g_sd_tax_exempt_text_2.
    ENDIF.
  ENDIF.

* end of change IMG-MDs/06.02.2008/VN.1.1 -----------------------*


* begin of change IMG-MDs/07.02.2008/VN.1.1 -----------------------*

* Determine Autotext mit BEZUG auf Empfaengerland
* g_sd_tax_exempt_text = g_st_text_1.
*ZSD_GL_EMP_LAND_BEZ_1 &G_SD_EMP_LAND_BEZUG& g_st_EMP_LAND_1
* end of change IMG-MDs/07.02.2008/VN.1.1 -----------------------*

* begin of change IMG-MDs/20.10.2008/VN.1.3
  PERFORM determine_business_case USING gs_flags.


* If case 1 - preceeding delivery = NL
  IF gs_flags-case1 = c_true.
*  Prepare list of batches and weights
    PERFORM build_batches_table USING gt_batch.
* begin of change IMG-MDs/27.10.2008/VN.1.4
*    PERFORM read_sap_user_data.
    IF gs_flags-case2 = c_true.
      PERFORM read_sap_user_data_for_sh.
    ELSE.
      PERFORM read_sap_user_data.
    ENDIF.
* end of change IMG-MDs/27.10.2008/VN.1.4
  ENDIF.

* Prepare dynamic address for certain business case
  IF gs_flags-dynaddr = c_true.
    PERFORM prepader_dynamic_address.
  ENDIF.

* Adjustment for getting partner address (reason, if there is no in the document header)
  PERFORM update_partner_address.

* Get amount of coils for display in the invoice header.
  PERFORM get_amount_of_coils.
* end of change IMG-MDs/20.10.2008/VN.1.3

* begin of change IMG-MDs/27.10.2008/VN.1.4
* New logic.
* If there is no reference SD Order (some information are also missing)
* try to obtain those information from the corresponding Sulprice Order (with account assignment of first item)

* Change the communication structure (due to further change in the source)
  gs_head-bstkd = vbkd-bstkd.
  gs_head-bstdk = vbkd-bstdk.

  PERFORM obtain_sulprice_order_data.

  IF gs_flags-case2 = c_true.
    PERFORM read_address_for_consignee.
  ENDIF.
* end of change IMG-MDs/27.10.2008/VN.1.4

* begin of change Atos-Chenlp/12.06.2012/VN.2.4 ------------------------*
*-- 0: read sale org. of CTMS
*-- 1: read footer text ------*
*-- 2: check if more than one SO number in billing items ------*
*-- 3: calculte due date  ------*
  DATA: lv_belnr     TYPE bkpf-belnr,
        lv_gjahr     TYPE bkpf-gjahr,
        ls_faede_in  TYPE faede,
        ls_faede_out TYPE faede.

  DATA: lt_params TYPE STANDARD TABLE OF ztab_gl_params.
  DATA: lth_vbdpr TYPE vbdpr.

* Begin of Change YASH-CHITTA 09.08.2013
  DATA: lt_params_temp TYPE STANDARD TABLE OF ztab_gl_params.
* Remove hardcoding for Sales org.
* Get Sales org. Params
  FREE lt_params.
**Call function to get the parameter value
  CALL FUNCTION 'ZGL_TECH_PARAM'
    EXPORTING
      im_progname   = c_prog
    CHANGING
      ch_params     = lt_params
    EXCEPTIONS
      novaluesfound = 1
      OTHERS        = 2.

  IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.
*
* Begin of Insert ZEN-GAURAV / CEDK961813/PRJ0021776/09.01.2019
*Get Accouting phone no/Fax no from Parameter table
  DATA : lw_params LIKE LINE OF lt_params.
  READ TABLE lt_params INTO lw_params WITH KEY fieldname = c_tele.
  IF sy-subrc IS INITIAL.
    gv_tele_number = lw_params-low.
  ENDIF.
  READ TABLE lt_params INTO lw_params WITH KEY fieldname = c_fax.
  IF sy-subrc IS INITIAL.
    gv_fax_number = lw_params-low.
  ENDIF.
* End of Insert ZEN-GAURAV / CEDK961813/PRJ0021776/09.01.2019
*
* Form Ranges for CTSG Sales Org.
  lt_params_temp = lt_params.

  DELETE lt_params_temp
    WHERE fieldname NE gc_vkorg_ctsg.

  IF NOT lt_params_temp IS INITIAL.
*-- Call function to get the parametric range
    CALL FUNCTION 'ZGL_PARAM_RANGE'
      EXPORTING
        im_params = lt_params_temp
      CHANGING
        ch_range  = r_vkorg_ctsg.
  ENDIF.

* Form Ranges for CTIN Sales Org.
  lt_params_temp = lt_params.

  DELETE lt_params_temp
    WHERE fieldname NE gc_vkorg_ctin.

  IF NOT lt_params_temp IS INITIAL.
*-- Call function to get the parametric range
    CALL FUNCTION 'ZGL_PARAM_RANGE'
      EXPORTING
        im_params = lt_params_temp
      CHANGING
        ch_range  = r_vkorg_ctin.
  ENDIF.

* Form Ranges for CTCN Sales Org.
  lt_params_temp = lt_params.

  DELETE lt_params_temp
    WHERE fieldname NE gc_vkorg_ctcn.

  IF NOT lt_params_temp IS INITIAL.
*-- Call function to get the parametric range
    CALL FUNCTION 'ZGL_PARAM_RANGE'
      EXPORTING
        im_params = lt_params_temp
      CHANGING
        ch_range  = r_vkorg_ctcn.
  ENDIF.
* End of Change YASH-CHITTA 09.08.2013

*Begin of Insert by YASH-CHITTA Logic for 3400 on 19.08.2013 --*
* Form Ranges for CTTW Sales Org.
  lt_params_temp = lt_params.

  DELETE lt_params_temp
    WHERE fieldname NE gc_vkorg_cttw.

  IF NOT lt_params_temp IS INITIAL.
*-- Call function to get the parametric range
    CALL FUNCTION 'ZGL_PARAM_RANGE'
      EXPORTING
        im_params = lt_params_temp
      CHANGING
        ch_range  = r_vkorg_cttw.
  ENDIF.
* End of Insert by YASH-CHITTA Logic for 3400 on 19.08.2013 --*

* Begin of Insert TULARAJ-CEDK961813-Project Bahrine
* Form Ranges for CTBH Sales Org.
  lt_params_temp = lt_params.

  DELETE lt_params_temp
    WHERE fieldname NE gc_vkorg_ctbh.

  IF NOT lt_params_temp IS INITIAL.
*-- Call function to get the parametric range
    CALL FUNCTION 'ZGL_PARAM_RANGE'
      EXPORTING
        im_params = lt_params_temp
      CHANGING
        ch_range  = r_vkorg_ctbh.
  ENDIF.
* End of Insert TULARAJ-CEDK961813-Project Bahrine

* Begin of Change YASH-CHITTA 09.08.2013
* Commented code related to Sales org.2300
***Call function to get the parameter value
***for the constant
*  CALL FUNCTION 'ZGL_TECH_PARAM'
*    EXPORTING
*      im_progname   = c_prog
*      im_fieldname  = c_ctms
*    CHANGING
*      ch_params     = lt_params
*    EXCEPTIONS
*      novaluesfound = 1
*      OTHERS        = 2.
*  IF sy-subrc <> 0.
** MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
**         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*  ENDIF.
*
*  IF NOT lt_params IS INITIAL.
**-- Call function to get the parametric range
*    CALL FUNCTION 'ZGL_PARAM_RANGE'
*      EXPORTING
*        im_params = lt_params
*      CHANGING
*        ch_range  = r_vkorg_ctms.
*  ENDIF.
*
**  IF vbdkr-vkorg = '2300'.
*  IF vbdkr-vkorg IN r_vkorg_ctms AND NOT r_vkorg_ctms IS INITIAL.
*    CLEAR: gv_footer, gv_so_diff, gv_duedate, gv_absender, lth_vbdpr.
**-- read absender text ------*
*    READ TABLE tvbdpr INTO lth_vbdpr INDEX 1.
*    SELECT SINGLE sender_adr INTO gv_absender
*      FROM ztab_sd_sender
*      WHERE vkorg = vbdkr-vkorg
*        AND vkbur = lth_vbdpr-vkbur.
*
**-- read footer text ------*
**-----add logic: if it is a German customer but in CHF, it just prints CHF bank details
*    IF  vbdkr-lland = c_conty_de AND vbdkr-waerk = c_waerk_eur.
*      gv_footer = c_zhasd_footer2300_de.
*
*    ELSEIF vbdkr-waerk NE ''.
*      CONCATENATE c_sdfooter vbdkr-waerk INTO gv_footer.
*      CONDENSE gv_footer NO-GAPS.
*    ENDIF.
*
**-- check header so number and item so number ------*
*    IF vbdkr-vbeln_vauf NE space.
*      LOOP AT tvbdpr.
*        IF tvbdpr-vbeln_vauf <> vbdkr-vbeln_vauf.
*          gv_so_diff = 'X'.
*          EXIT.
*        ENDIF.
*      ENDLOOP.
*      IF gv_so_diff = 'X'.
*        SORT tvbdpr BY vbeln_vauf posnr.
*      ENDIF.
*    ENDIF.
**-- read due-date via baseline date -----------*
**    IF vbdkr-zterm NE space.
*    SELECT SINGLE belnr gjahr FROM bkpf INTO (lv_belnr, lv_gjahr)
*      WHERE bukrs = vbdkr-bukrs AND
*            awtyp = 'VBRK' AND
*            awkey = vbdkr-vbeln.
*    IF sy-subrc = 0.
*      SELECT SINGLE * FROM bseg
*        INTO CORRESPONDING FIELDS OF ls_faede_in
*        WHERE bukrs = vbdkr-bukrs AND
*              belnr = lv_belnr AND
*              gjahr = lv_gjahr AND
*              koart = 'D'.  "customer
*      IF sy-subrc = 0.
*        CALL FUNCTION 'DETERMINE_DUE_DATE'
*          EXPORTING
*            i_faede            = ls_faede_in
**              I_GL_FAEDE      =
*         IMPORTING
*           e_faede             = ls_faede_out
*         EXCEPTIONS
*           account_type_not_supported       = 1
*           OTHERS                           = 2.
*        IF sy-subrc <> 0.
** MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
**         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*        ELSE.
*          gv_duedate = ls_faede_out-netdt.
*        ENDIF.
*      ENDIF.
*    ENDIF.
**    ENDIF.
*
**--P2100 10012013 Atos-chenlp
*    CLEAR gv_kverm_ag.
*    SELECT SINGLE kverm FROM knb1 INTO gv_kverm_ag WHERE kunnr = vbdkr-kunag
*                                  AND bukrs = vbdkr-bukrs.
*  ENDIF.
** end of change Atos-Chenlp/12.06.2012/VN.2.4 ------------------------*
* End of Change YASH-CHITTA 09.08.2013

*--> GeB 28112012 I48937
  CLEAR: gv_rcomp, gv_kverm, gv_kunnr.
  IF NOT vbdkr-bukrs IS INITIAL.
    SELECT SINGLE rcomp FROM t001 INTO gv_rcomp WHERE bukrs EQ vbdkr-bukrs.
    IF NOT gv_rcomp IS INITIAL.
      MOVE gv_rcomp TO gv_kunnr.
      IF gv_kunnr CO '0123456789 '.
        UNPACK gv_kunnr TO gv_kunnr.
      ENDIF.
      SELECT SINGLE kverm FROM knb1 INTO gv_kverm WHERE kunnr EQ gv_kunnr
                                                    AND bukrs EQ vbdkr-bukrs.
    ENDIF.
  ENDIF.
*<-- GeB 28112012 I48937

*begin of change Meng(NOCO)/17.Sep.2014 for C2316-------------*

  "Add 3500 and 3500 = 3300
  "Maintained 3500 just like 3300 in add on table

  IF r_vkorg_ctcn IS NOT INITIAL AND vbdkr-vkorg IN r_vkorg_ctcn.
    gv_flag_vkorg = 'X'.
  ELSE.
    CLEAR gv_flag_vkorg.
  ENDIF.

  "Get absender standard text name
  "3100 ZSGSD_ABSENDER
  "3200 ZINSD_ABSENDER
  "3300 ZCNSD_ABSENDER
  "3400 ZTWSD_ABSENDER
  "3500 ZXCSD_ABSENDER
  "ELSE ZSD_WT_ABSENDER

  SELECT SINGLE low
  INTO gv_absender
  FROM ztab_gl_params
  WHERE progname = 'ZGL_RVADIN02'
  AND fieldname = 'ABSENDER'
  AND bukrs = vbdkr-vkorg.

  IF gv_absender = 'ZTAB_SD_SENDER'.
    READ TABLE tvbdpr INTO lth_vbdpr INDEX 1.
    SELECT SINGLE sender_adr INTO gv_absender
      FROM ztab_sd_sender
      WHERE vkorg = vbdkr-vkorg
        AND vkbur = lth_vbdpr-vkbur.
  ELSE.
    IF sy-subrc <> 0.
      gv_absender = 'ZSD_WT_ABSENDER'.
    ENDIF.
  ENDIF.



  "Get footer standard text name
  "3100 ZSGSD_FOOTER
  "3200 ZINSD_FOOTER
  "3300 ZCNSD_FOOTER
  "3400 ZTWSD_FOOTER
  "3500 ZXCSD_FOOTER
  "ELSE ZSD_WT_FOOTER_V2

  SELECT SINGLE low
  INTO gv_footer
  FROM ztab_gl_params
  WHERE progname = 'ZGL_RVADIN02'
  AND fieldname = 'FOOTER'
  AND bukrs = vbdkr-vkorg.
*--> YOO_Y CHG0031716
  IF gv_footer = 'ZTAB_SD_SENDER'.
    READ TABLE tvbdpr INTO lth_vbdpr INDEX 1.
    SELECT SINGLE footer INTO gv_footer
      FROM ztab_sd_sender
      WHERE vkorg = vbdkr-vkorg
        AND vkbur = lth_vbdpr-vkbur.
  ELSE.
*<-- YOO_Y CHG0031716
    IF sy-subrc <> 0.
      gv_footer = 'ZSD_WT_FOOTER_V2'.
    ENDIF.
*--> YOO_Y CHG0031716
  ENDIF.
*<-- YOO_Y CHG0031716
*Begin Insert ZEN-GAURAV /
*  BREAK ZEN-GAURAV.
  SELECT SINGLE low
  INTO gv_footer_address
  FROM ztab_gl_params
  WHERE progname = 'ZGL_RVADIN02'
  AND fieldname = 'FOOTER_ADDRESS'
  AND bukrs = vbdkr-vkorg.
*End Insert ZEN-GAURAV /
*end   of change Meng(NOCO)/17.Sep.2014 for C2316-------------*
*
*  Begin of logic ZEN-JUTURU / 08.01.2015 / CHG3010125.

  SELECT SINGLE * FROM fpla     "Billing plan header
                INTO  gs_fpla
                WHERE vbeln = vbdkr-vbeln_vauf
                  AND rfpln = space.
  SELECT fplnr                     "Billing item
         fpltr
         fproz
         fakwr
         mlstn
         zterm
    FROM fplt
    INTO TABLE gt_fplt
    WHERE fplnr = gs_fpla-fplnr.

  IF gt_fplt[] IS NOT INITIAL.

    SELECT mltx_zaehl               " Mile stone text
           ktext
      FROM mltx
      INTO TABLE gt_mltx
      FOR ALL ENTRIES IN gt_fplt
      WHERE mltx_zaehl = gt_fplt-mlstn
      AND langu = nast-spras.
*  Start of Insertion SGS-PALA / 14.01.2016 / CHG3010125.
    SELECT zterm vtext
    FROM tvzbt
    INTO TABLE gt_tvzbt
    FOR ALL ENTRIES IN gt_fplt
    WHERE spras = nast-spras
    AND   zterm = gt_fplt-zterm.
*  End of Insertion SGS-PALA / 13.01.2016 / CHG3010125.

*  Start of comment SGS-PALA / 13.01.2016 / CHG3010125.
*  ENDIF.
*  End of comment SGS-PALA / 13.01.2016 / CHG3010125.
    LOOP AT gt_fplt INTO gs_fplt.
      gs_milefinal-fplnr = gs_fplt-fplnr.
      gs_milefinal-fproz = gs_fplt-fproz.
      gs_milefinal-fakwr = gs_fplt-fakwr.
      gs_milefinal-mlstn = gs_fplt-mlstn.
*  Start of Insertion SGS-PALA / 14.01.2016 / CHG3010125.
      IF NOT gs_fplt-zterm IS INITIAL.
        gs_milefinal-zterm = gs_fplt-zterm.
      ELSE.
        gs_milefinal-zterm = vbdkr-zterm.
      ENDIF.
      READ TABLE gt_mltx INTO gs_mltx WITH KEY mltx_zaehl = gs_fplt-mlstn.
      gs_milefinal-ktext = gs_mltx-ktext.
      IF NOT gs_fplt-zterm IS INITIAL.
        READ TABLE gt_tvzbt INTO gs_tvzbt WITH KEY zterm = gs_fplt-zterm.
        gs_milefinal-vtext = gs_tvzbt-vtext.
      ELSE.
        gs_milefinal-vtext = tvzbt-vtext.
      ENDIF.
*  End of Insertion SGS-PALA / 14.01.2016 / CHG3010125.
      APPEND gs_milefinal TO gt_milefinal.
      CLEAR gs_milefinal.
    ENDLOOP.

    LOOP AT gt_milefinal INTO gs_milefinal.
      lv_perc = lv_perc + gs_milefinal-fproz.
    ENDLOOP.

    IF lv_perc LT lc_100.
      DESCRIBE TABLE gt_milefinal LINES lv_lines.
      lv_tmp  = lc_100 - lv_perc.
      READ TABLE gt_milefinal INTO gs_milefinal INDEX lv_lines.
      gs_milefinal-fproz = lv_tmp.
      MODIFY gt_milefinal FROM gs_milefinal INDEX lv_lines.
    ENDIF.
*  Start of insertion SGS-PALA / 13.01.2016 / CHG3010125.
  ENDIF.
*  End of insertion SGS-PALA / 13.01.2016 / CHG3010125.

*  End of logic ZEN-JUTURU / 08.01.2015 / CHG3010125.

ENDFORM.                    "GET_DATA


*---------------------------------------------------------------------*
*       FORM GET_ITEM_CHARACTERISTICS                                 *
*---------------------------------------------------------------------*
*       In this routine the configuration data item is fetched from   *
*       the database.                                                 *
*---------------------------------------------------------------------*

FORM get_item_characteristics.

  DATA da_t_cabn LIKE cabn OCCURS 10 WITH HEADER LINE.
  DATA: BEGIN OF da_key,
          mandt LIKE cabn-mandt,
          atinn LIKE cabn-atinn,
        END   OF da_key.

  REFRESH tkomcon.
  CHECK NOT vbdpr-cuobj IS INITIAL.

  CALL FUNCTION 'VC_I_GET_CONFIGURATION'
    EXPORTING
      instance      = vbdpr-cuobj
      language      = nast-spras
      print_sales   = 'X'
    TABLES
      configuration = tkomcon
    EXCEPTIONS
      OTHERS        = 4.

  RANGES : da_in_cabn FOR da_t_cabn-atinn.
* Beschreibung der Merkmale wegen Objektmerkmalen auf sdcom-vkond holen
  CLEAR da_in_cabn. REFRESH da_in_cabn.
  LOOP AT tkomcon.
    da_in_cabn-option = 'EQ'.
    da_in_cabn-sign   = 'I'.
    da_in_cabn-low    = tkomcon-atinn.
    APPEND da_in_cabn.
  ENDLOOP.

  CLEAR da_t_cabn. REFRESH da_t_cabn.
  CALL FUNCTION 'CLSE_SELECT_CABN'
*    EXPORTING
*         KEY_DATE                     = SY-DATUM
*         BYPASSING_BUFFER             = ' '
*         WITH_PREPARED_PATTERN        = ' '
*         I_AENNR                      = ' '
*    IMPORTING
*         AMBIGUOUS_OBJ_CHARACTERISTIC =
    TABLES
      in_cabn        = da_in_cabn
      t_cabn         = da_t_cabn
    EXCEPTIONS
      no_entry_found = 1
      OTHERS         = 2.

* Preisfindungsmerkmale und Merkmale auf vcsd_update herausnehmen
  SORT da_t_cabn.
  LOOP AT tkomcon.
    da_key-mandt = sy-mandt.
    da_key-atinn = tkomcon-atinn.
    READ TABLE da_t_cabn WITH KEY da_key BINARY SEARCH.
    IF sy-subrc <> 0 OR
         ( ( da_t_cabn-attab = 'SDCOM' AND
            da_t_cabn-atfel = 'VKOND'       ) OR
          ( da_t_cabn-attab = 'VCSD_UPDATE' ) ) .
      DELETE tkomcon.
    ENDIF.
  ENDLOOP.

ENDFORM.                    "GET_ITEM_CHARACTERISTICS

*---------------------------------------------------------------------*
*       FORM GET_ITEM_PRICES                                          *
*---------------------------------------------------------------------*
*       In this routine the price data for the item is fetched from   *
*       the database.                                                 *
*---------------------------------------------------------------------*

FORM get_item_prices.

  CLEAR: komp,
         tkomv.

  IF komk-knumv NE vbdkr-knumv.
    CLEAR komk.
    komk-mandt = sy-mandt.
    komk-kalsm = vbdkr-kalsm.
    komk-fkart = vbdkr-fkart.
    komk-kappl = pr_kappl.
    IF vbdkr-kappl NE space.
      komk-kappl = vbdkr-kappl.
    ENDIF.
    komk-waerk = vbdkr-waerk.
    komk-knumv = vbdkr-knumv.
    komk-vbtyp = vbdkr-vbtyp.
    komk-bukrs = vbdkr-bukrs.
    komk-land1 = vbdkr-lland.
    komk-vkorg = vbdkr-vkorg.
    komk-vtweg = vbdkr-vtweg.
    komk-spart = vbdkr-spart.
    komk-hwaer = vbdkr-waers.
    komk-prsdt = vbdkr-erdat.
    komk-kurst = vbdkr-kurst.
    komk-kurrf = vbdkr-kurrf.
    komk-kurrf_dat = vbdkr-kurrf_dat.
  ENDIF.
  komp-kposn = vbdpr-posnr.
  komp-kursk = vbdpr-kursk.
  komp-kursk_dat = vbdpr-kursk_dat.
  IF vbdkr-vbtyp CA 'HKNOT6'.
    IF  vbdpr-shkzg CA ' A'.
      komp-shkzg = 'X'.
    ENDIF.
  ELSE.
    IF  vbdpr-shkzg CA 'BX'.
      komp-shkzg = 'X'.
    ENDIF.
  ENDIF.

  CALL FUNCTION 'RV_PRICE_PRINT_ITEM'
    EXPORTING
      comm_head_i = komk
      comm_item_i = komp
      language    = nast-spras
    IMPORTING
      comm_head_e = komk
      comm_item_e = komp
    TABLES
      tkomv       = tkomv
      tkomvd      = tkomvd.
* Calling customer subroutine dynamically for handling item prices
  IF NOT item_userexit IS INITIAL.
    PERFORM (item_userexit) IN PROGRAM rvadin01 IF FOUND.
  ENDIF.

ENDFORM.                    "GET_ITEM_PRICES

*---------------------------------------------------------------------*
*       FORM GET_HEADER_PRICES                                        *
*---------------------------------------------------------------------*
*       In this routine the price data for the header is fetched from *
*       the database.                                                 *
*---------------------------------------------------------------------*

FORM get_header_prices.

  IF komk-knumv NE vbdkr-knumv.
    CLEAR komk.
    komk-mandt = sy-mandt.
    komk-kalsm = vbdkr-kalsm.
    komk-fkart = vbdkr-fkart.
    komk-kappl = pr_kappl.
    IF vbdkr-kappl NE space.
      komk-kappl = vbdkr-kappl.
    ENDIF.
    komk-waerk = vbdkr-waerk.
    komk-knumv = vbdkr-knumv.
    komk-vbtyp = vbdkr-vbtyp.
    komk-knuma = vbdkr-knuma.
    komk-bukrs = vbdkr-bukrs.
    komk-land1 = vbdkr-lland.
    komk-vkorg = vbdkr-vkorg.
    komk-vtweg = vbdkr-vtweg.
    komk-spart = vbdkr-spart.
    komk-hwaer = vbdkr-waers.
    komk-prsdt = vbdkr-erdat.
    komk-kurst = vbdkr-kurst.
    komk-kurrf = vbdkr-kurrf.
    komk-kurrf_dat = vbdkr-kurrf_dat.
  ENDIF.
  CALL FUNCTION 'RV_PRICE_PRINT_HEAD'
    EXPORTING
      comm_head_i = komk
      language    = nast-spras
    IMPORTING
      comm_head_e = komk
      comm_mwskz  = print_mwskz
    TABLES
      tkomv       = tkomv
      tkomvd      = hkomvd.
* Calling customer subroutine dynamically for handling header prices
  IF NOT header_userexit IS INITIAL.
    PERFORM (header_userexit) IN PROGRAM rvadin01 IF FOUND.
  ENDIF.

ENDFORM.                    "GET_HEADER_PRICES

*---------------------------------------------------------------------*
*       FORM HEADER_PRICE_PRINT                                       *
*---------------------------------------------------------------------*
*       Printout of the header prices                                 *
*---------------------------------------------------------------------*

FORM header_price_print.

  DATA: lv_print_bold  TYPE xfeld,
        lv_print_2line TYPE xfeld,
*begin of change AO-Sam/21.04.2009/VN.1.6 -----------------------*
        lv_mwskz       TYPE mwskz.
*end of change AO-Sam/21.04.2009/VN.1.6   -----------------------*

*Begin of change Atos-Chenlp/11.06.2010/VN.1.9----------------*
* Begin of Change YASH-CHITTA 09.08.2013
* Remove hardcoding for Sales org.
*  IF vbdkr-vkorg = '3300'.
  IF  vbdkr-vkorg  IN r_vkorg_ctcn                          " '3300'
  AND r_vkorg_ctcn IS NOT INITIAL.
* End of Change YASH-CHITTA 09.08.2013
    CLEAR gv_final_invoice.
    LOOP AT tvbdpr WHERE fareg = '3'.
      gv_final_invoice = 'X'.
      EXIT.
    ENDLOOP.

    CLEAR gv_ctcn.
    IF vbdkr-fkart = 'F2' OR vbdkr-fkart = 'FAZ'.
      gv_ctcn = 'X'.
    ENDIF.
  ENDIF.
*end of change Atos-Chenlp/11.06.2010/VN.1.9----------------*

  CLEAR: lv_print_bold, gv_taxamt_sum.

* Begin of Insert TULARAJ-CEDK961813-Project Bahrine
  IF vbdkr-vkorg EQ '3600'.
    gv_adv_pay_rcd_bhd = ( vbdkr-dpnet * vbrk-kurrf ).
  ENDIF.
* End of Insert TULARAJ-CEDK961813-Project Bahrine

  LOOP AT hkomvd.

    lv_print_2line = c_true.

    AT FIRST.
      IF komk-supos NE 0.
        CALL FUNCTION 'WRITE_FORM'
          EXPORTING
            element = 'ITEM_SUM'.
      ELSE.
        CALL FUNCTION 'WRITE_FORM'
          EXPORTING
            element = 'UNDER_LINE'
          EXCEPTIONS
            element = 1
            window  = 2.
        IF sy-subrc NE 0.
          PERFORM protocol_update.
        ENDIF.
      ENDIF.
      CLEAR: lv_print_2line.
    ENDAT.

    komvd = hkomvd.
*Insert Begin ZEN-GAURAV / TFS PROJECT
*  BREAK ZEN-GAURAV.
    DATA : lv_prctr TYPE vbap-prctr.
    lv_prctr = vbap-prctr.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = lv_prctr
      IMPORTING
        output = lv_prctr.
    IF vbdkr-vkorg = '3200'AND  lv_prctr = '2100'.
      IF hkomvd-kschl = 'JSB2'.
        PERFORM f_convert_into_words USING komvd-kwert
                                    CHANGING gv_sbtaxwd.
        CONCATENATE gv_sbtaxwd 'Only' INTO gv_sbtaxwd SEPARATED BY space.
      ENDIF.
      IF hkomvd-kschl = 'JKK2'.
        PERFORM f_convert_into_words USING komvd-kwert
                                    CHANGING gv_kkcwd.
        CONCATENATE gv_kkcwd 'Only' INTO gv_kkcwd SEPARATED BY space.
      ENDIF.
    ENDIF.
*Insert End ZEN-GAURAV / TFS PROJECT
*begin of change AO-Sam/21.04.2009/VN.1.6 -----------------------*
* Keep the tax code
    CLEAR lv_mwskz.
    MOVE komvd-mwskz TO lv_mwskz.
*end of change AO-Sam/21.04.2009/VN.1.6   -----------------------*
    IF print_mwskz = space.
      CLEAR komvd-mwskz.
    ENDIF.

* begin of change IMG-MDs/17.09.2008 -----------------------*
* According request from Peter Walker from 2008.08.27.
* print the VAT amout of 0 as a number on the right side.
* Don't print the KAWRT if KWERT is initial.

*begin of change AO-Sam/21.04.2009/VN.1.6 -----------------------*
* For Singapore, the GST base amount to be printed

*    IF KOMVD-KOAID = 'D' AND KOMVD-KWERT IS INITIAL.
*      CLEAR: KOMVD-KAWRT.
*    ENDIF.

* Begin of Change YASH-CHITTA 09.08.2013
* Remove hardcoding for Sales org.
*    IF vbdkr-vkorg = '3100'.
    IF  r_vkorg_ctsg IS NOT INITIAL
    AND vbdkr-vkorg  IN r_vkorg_ctsg.                       " '3100'.
* End of Change YASH-CHITTA 09.08.2013

    ELSE.
      IF komvd-koaid = 'D' AND komvd-kwert IS INITIAL.
        CLEAR: komvd-kawrt.
      ENDIF.
    ENDIF.
*end of change AO-Sam/21.04.2009/VN.1.6   -----------------------*
* end of change IMG-MDs/17.09.2008 -----------------------*

* Begin of Insert TULARAJ-CEDK960799-Project Bahrine
    IF vbrk-vkorg = '3600' AND komvd-kbetr IS NOT INITIAL.
      gv_kbetr =  komvd-kbetr .
      gv_koein =  komvd-koein.
    ENDIF.
* End of Insert TULARAJ-CEDK960799-Project Bahrine

* begin of change IMG-MDs/07.02.2008/VN.1.1 -----------------------*
    AT LAST.

      CALL FUNCTION 'CONTROL_FORM'
        EXPORTING
          command = 'PROTECT'.
      IF NOT lv_print_2line IS INITIAL.
        CALL FUNCTION 'WRITE_FORM'
          EXPORTING
            element = 'UNDER_LINE'
          EXCEPTIONS
            element = 1
            window  = 2.
      ENDIF.
      lv_print_bold = 'X'.
      IF sy-subrc NE 0.
        PERFORM protocol_update.
      ENDIF.
    ENDAT.
* end of change IMG-MDs/07.02.2008/VN.1.1 -----------------------*
    IF lv_print_bold = 'X'.
      IF komvd-koaid = 'D'.
*  begin of change ORI-TIBREWAL/02.03.2011/VN.2.1 -----------------------*
* Begin of Change YASH-CHITTA 09.08.2013
* Remove hardcoding for Sales org.
*        IF vbdkr-vkorg = '3200'.
        IF  r_vkorg_ctin IS NOT INITIAL
        AND vbdkr-vkorg  IN r_vkorg_ctin.                   " '3200'.
* End of Change YASH-CHITTA 09.08.2013
          gv_taxamt_sum = gv_taxamt_sum + komvd-kwert. "Sum total item tax amount
        ENDIF.
*  end of change ORI-TIBREWAL/02.03.2011/VN.2.1 -----------------------*
*begin of change AO-Sam/21.04.2009/VN.1.6 -----------------------*
* Begin of Change YASH-CHITTA 09.08.2013
* Remove hardcoding for Sales org.
*        IF vbdkr-vkorg = '3100'.
        IF  r_vkorg_ctsg IS NOT INITIAL
        AND vbdkr-vkorg  IN r_vkorg_ctsg.                   " '3100'.
* End of Change YASH-CHITTA 09.08.2013
          PERFORM convert_vat_to_gst USING komvd-vtext.
        ENDIF.
*end of change AO-Sam/21.04.2009/VN.1.6   -----------------------*
        CALL FUNCTION 'WRITE_FORM'
          EXPORTING
            element = 'TAX_LINE_BOLD'.
      ELSE.
        IF NOT komvd-kntyp EQ 'f'.
*  begin of change ORI-TIBREWAL/02.03.2011/VN.2.1 -----------------------*
* Begin of Change YASH-CHITTA 09.08.2013
* Remove hardcoding for Sales org.
*          IF vbdkr-vkorg = '3200'.
          IF  r_vkorg_ctin IS NOT INITIAL
          AND vbdkr-vkorg  IN r_vkorg_ctin.                 " '3200'.
* End of Change YASH-CHITTA 09.08.2013
            gv_netamt_sum =  komvd-kwert. "Get total before tax
          ENDIF.
*  begin of change ORI-TIBREWAL/02.03.2011/VN.2.1 -----------------------*
*begin of change AO-Sam/21.04.2009/VN.1.6 -----------------------*
* Get tax code description & convert "Tax" to "GST"
* Begin of Change YASH-CHITTA 09.08.2013
* Remove hardcoding for Sales org.
*          IF vbdkr-vkorg = '3100'.
          IF  r_vkorg_ctsg IS NOT INITIAL
          AND vbdkr-vkorg  IN r_vkorg_ctsg.                 " '3100'.
* End of Change YASH-CHITTA 09.08.2013
            PERFORM convert_tax_to_gst USING komvd-vtext.
          ENDIF.
*end of change AO-Sam/21.04.2009/VN.1.6   -----------------------*

* Begin of Insert by YASH-CHITTA Logic for 3400 on 19.08.2013 --*
          IF  r_vkorg_cttw IS NOT INITIAL
          AND vbdkr-vkorg  IN r_vkorg_cttw.

            IF nast-spras = 'M'.
*              komvd-vtext = TEXT-030.
              MOVE text-030 TO komvd-vtext.
            ELSE.
              REPLACE 'Tax' IN komvd-vtext WITH 'VAT'.
              REPLACE 'tax' IN komvd-vtext WITH 'VAT'.
            ENDIF.
          ENDIF.
* End of Insert by YASH-CHITTA Logic for 3400 on 19.08.2013 --*

* Insert Begin TULARAJ CEDK961813-Project Bahrine
          IF  r_vkorg_ctbh IS NOT INITIAL
          AND vbdkr-vkorg  IN r_vkorg_ctbh.
            REPLACE 'Tax' IN komvd-vtext WITH 'VAT'.
            REPLACE 'tax' IN komvd-vtext WITH 'VAT'.

            gv_tot_avat_doc_curr = ( komvd-kwert * vbrk-kurrf ).
          ENDIF.
* End of insert TULARAJ CEDK961813-Project Bahrine

          CALL FUNCTION 'WRITE_FORM'
            EXPORTING
              element = 'SUM_LINE_BOLD'.
        ENDIF.
      ENDIF.
      CALL FUNCTION 'CONTROL_FORM'
        EXPORTING
          command = 'ENDPROTECT'.
    ELSE.
      IF komvd-koaid = 'D'.
*begin of change AO-Sam/21.04.2009/VN.1.6 -----------------------*
* Get tax code description & convert "VAT" to "GST"
* Begin CR 1837 Vkorg 2100 want's this also AnR 12.11.09
        gv_taxamt_sum = gv_taxamt_sum + komvd-kwert. "Sum total item tax amount
* end CR 1837 Vkorg 2100 want's this also AnR 12.11.09
* Begin of Change YASH-CHITTA 09.08.2013
* Remove hardcoding for Sales org.
*        IF vbdkr-vkorg = '3100'.
        IF  r_vkorg_ctsg IS NOT INITIAL
        AND vbdkr-vkorg  IN r_vkorg_ctsg.                   " '3100'.
* End of Change YASH-CHITTA 09.08.2013
          CLEAR gv_taxcode.
          SELECT SINGLE text1 FROM t007s
                              INTO gv_taxcode
                             WHERE spras = 'E'
                               AND kalsm = 'TAXCT'
                               AND mwskz = lv_mwskz.
          PERFORM convert_vat_to_gst USING komvd-vtext.
* Begin of Insert by YASH-CHITTA Logic for 3400 on 19.08.2013 --*
        ELSEIF  r_vkorg_cttw IS NOT INITIAL
        AND vbdkr-vkorg  IN r_vkorg_cttw.

          IF nast-spras = 'M'.
*            komvd-vtext = text-040.
            MOVE text-040 TO komvd-vtext.
          ELSE.
            komvd-vtext = text-050.
          ENDIF.
* End of Insert by YASH-CHITTA Logic for 3400 on 19.08.2013 --*

* Begin CR 1837 Vkorg 2100 want's this also AnR 12.11.09
*          gv_taxamt_sum = gv_taxamt_sum + komvd-kwert. "Sum total item tax amount
* end CR 1837 Vkorg 2100 want's this also AnR 12.11.09

* Insert Begin TULARAJ CEDK961813-Project Bahrine
        ELSEIF  r_vkorg_ctbh IS NOT INITIAL
        AND vbdkr-vkorg  IN r_vkorg_ctbh.
          komvd-vtext = text-050.

          gv_taxamt_sum_doc_curr = ( gv_taxamt_sum * vbrk-kurrf ).
        ENDIF.
* End of insert TULARAJ CEDK961813-Project Bahrine

*end of change AO-Sam/21.04.2009/VN.1.6   -----------------------*
        CALL FUNCTION 'WRITE_FORM'
          EXPORTING
            element = 'TAX_LINE'.
      ELSE.
        IF NOT komvd-kntyp EQ 'f'.
* Begin CR 1837 Vkorg 2100 want's this also AnR 12.11.09
          gv_netamt_sum =  komvd-kwert. "Get total before tax
* end CR 1837 Vkorg 2100 want's this also AnR 12.11.09
*begin of change AO-Sam/21.04.2009/VN.1.6 -----------------------*

* Begin of Insert by YASH-CHITTA Logic for 3400 on 19.08.2013 --*
          IF  r_vkorg_cttw IS NOT INITIAL
          AND vbdkr-vkorg  IN r_vkorg_cttw.

            IF nast-spras = 'M'.
              MOVE text-020 TO komvd-vtext.
            ELSE.
              REPLACE 'Tax' IN komvd-vtext WITH 'VAT'.
              REPLACE 'tax' IN komvd-vtext WITH 'VAT'.
            ENDIF.
          ENDIF.
* End of Insert by YASH-CHITTA Logic for 3400 on 19.08.2013 --*

* Insert Begin TULARAJ CEDK961813-Project Bahrine
          IF  r_vkorg_ctbh IS NOT INITIAL
          AND vbdkr-vkorg  IN r_vkorg_ctbh.



            REPLACE 'Tax' IN komvd-vtext WITH 'VAT'.
            REPLACE 'tax' IN komvd-vtext WITH 'VAT'.

            gv_netamt_sum_doc_curr = ( gv_netamt_sum * vbrk-kurrf ).
          ENDIF.
* End of insert TULARAJ CEDK961813-Project Bahrine

* Begin of Change YASH-CHITTA 09.08.2013
* Remove hardcoding for Sales org.
*          IF vbdkr-vkorg = '3100'.
          IF  r_vkorg_ctsg IS NOT INITIAL
          AND vbdkr-vkorg  IN r_vkorg_ctsg.                 " '3100'.
* End of Change YASH-CHITTA 09.08.2013

* Begin CR 1837 Vkorg 2100 want's this also AnR 12.11.09
*            gv_netamt_sum =  komvd-kwert. "Get total before tax
* end CR 1837 Vkorg2100 want's this also AnR 12.11.09
* Get tax code description & convert "Tax" to "GST"
            PERFORM convert_tax_to_gst USING komvd-vtext.
          ENDIF.
*end of change AO-Sam/21.04.2009/VN.1.6   -----------------------*
          CALL FUNCTION 'WRITE_FORM'
            EXPORTING
              element = 'SUM_LINE'.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDLOOP.
  DESCRIBE TABLE hkomvd LINES sy-tfill.
  IF sy-tfill = 0.
    CALL FUNCTION 'WRITE_FORM'
      EXPORTING
        element = 'UNDER_LINE'
      EXCEPTIONS
        element = 1
        window  = 2.
    IF sy-subrc NE 0.
      PERFORM protocol_update.
    ENDIF.
  ENDIF.
* Calling customer subroutine dynamically for handling header price
* printing
  IF NOT header_print_userexit IS INITIAL.
    PERFORM (header_print_userexit) IN PROGRAM rvadin01 IF FOUND.
  ENDIF.

ENDFORM.                    "HEADER_PRICE_PRINT

*---------------------------------------------------------------------*
*       FORM HEADER_TEXT_PRINT                                        *
*---------------------------------------------------------------------*
*       Printout of the headertexts                                   *
*---------------------------------------------------------------------*

FORM header_text_print.

  CALL FUNCTION 'WRITE_FORM'
    EXPORTING
      element = 'HEADER_TEXT'
    EXCEPTIONS
      element = 1
      window  = 2.
  IF sy-subrc NE 0.
    PERFORM protocol_update.
  ENDIF.

ENDFORM.                    "HEADER_TEXT_PRINT

*---------------------------------------------------------------------*
*       FORM ITEM_CHARACERISTICS_PRINT                                *
*---------------------------------------------------------------------*
*       Printout of the item characteristics -> configuration         *
*---------------------------------------------------------------------*

FORM item_characteristics_print.

  LOOP AT tkomcon.
    conf_out = tkomcon.
    IF sy-tabix = 1.
      CALL FUNCTION 'WRITE_FORM'
        EXPORTING
          element = 'ITEM_LINE_CONFIGURATION_HEADER'
        EXCEPTIONS
          OTHERS  = 1.
      IF sy-subrc NE 0.
        PERFORM protocol_update.
      ENDIF.
    ELSE.
      CALL FUNCTION 'WRITE_FORM'
        EXPORTING
          element = 'ITEM_LINE_CONFIGURATION'
        EXCEPTIONS
          OTHERS  = 1.
      IF sy-subrc NE 0.
        PERFORM protocol_update.
      ENDIF.
    ENDIF.
  ENDLOOP.

ENDFORM.                    "ITEM_CHARACTERISTICS_PRINT

*---------------------------------------------------------------------*
*       FORM ITEM_PRICE_PRINT                                         *
*---------------------------------------------------------------------*
*       Printout of the item prices                                   *
*---------------------------------------------------------------------*

FORM item_price_print.

* begin of change IMG-MDs/20.10.2008/VN.1.3
  CLEAR: g_text_elem.
*  IF gs_flags-case1 = c_true AND marc-zztextbatch = space.
  IF gs_flags-case1 = c_true.
    g_text_elem = 'ITEM_LINE_EXTENDED_C1'.
  ELSE.
    g_text_elem = 'ITEM_LINE_EXTENDED'.
  ENDIF.

  LOOP AT tkomvd.

    komvd = tkomvd.
    IF print_mwskz EQ space.
      CLEAR komvd-mwskz.
    ENDIF.
    IF sy-tabix = 1.
*ENHANCEMENT-POINT ITEM_PRICE_PRINT_01 SPOTS ES_RVADIN01.
      IF komvd-koaid = 'B' OR komvd-kschl IS INITIAL.
        IF g_print_line_items = 'X'.
          CALL FUNCTION 'WRITE_FORM'
            EXPORTING
              element = g_text_elem.
        ELSE.
          CALL FUNCTION 'WRITE_FORM'
            EXPORTING
              element = 'ITEM_LINE_PRICE_QUANTITY'.
        ENDIF.
      ELSE.
        IF g_print_line_items = 'X'.
          CALL FUNCTION 'WRITE_FORM'
            EXPORTING
              element = g_text_elem.
        ELSE.
*begin of change AO-Sam/21.04.2009/VN.1.6 -----------------------*
* Begin of Change YASH-CHITTA 09.08.2013
* Remove hardcoding for Sales org.
*          IF vbdkr-vkorg = '3100'.
          IF  r_vkorg_ctsg IS NOT INITIAL
          AND vbdkr-vkorg  IN r_vkorg_ctsg.                 " '3100'.
* End of Change YASH-CHITTA 09.08.2013
            PERFORM convert_vat_to_gst USING komvd-vtext.
          ENDIF.
*end of change AO-Sam/21.04.2009/VN.1.6   -----------------------*
          CALL FUNCTION 'WRITE_FORM'
            EXPORTING
              element = 'ITEM_LINE_PRICE_TEXT'.
        ENDIF.
      ENDIF.
    ELSE.
      IF komvd-kntyp NE 'f'.
*begin of change AO-Sam/21.04.2009/VN.1.6 -----------------------*
* Begin of Change YASH-CHITTA 09.08.2013
* Remove hardcoding for Sales org.
*        IF vbdkr-vkorg = '3100'.
        IF  r_vkorg_ctsg IS NOT INITIAL
        AND vbdkr-vkorg  IN r_vkorg_ctsg.                   " '3100'.
* End of Change YASH-CHITTA 09.08.2013
          PERFORM convert_vat_to_gst USING komvd-vtext.
        ENDIF.
*end of change AO-Sam/21.04.2009/VN.1.6   -----------------------*
        CALL FUNCTION 'WRITE_FORM'
          EXPORTING
            element = 'ITEM_LINE_PRICE_TEXT'.
      ELSE.
        CALL FUNCTION 'WRITE_FORM'
          EXPORTING
            element = 'ITEM_LINE_REBATE_IN_KIND'.
      ENDIF.
    ENDIF.
  ENDLOOP.
* Calling customer subroutine dynamically for handling item price
* printing
  IF NOT item_print_userexit IS INITIAL.
    PERFORM (item_print_userexit) IN PROGRAM rvadin01 IF FOUND.
  ENDIF.

ENDFORM.                    "ITEM_PRICE_PRINT

*---------------------------------------------------------------------*
*       FORM ITEM_PRINT                                               *
*---------------------------------------------------------------------*
*       Printout of the items                                         *
*---------------------------------------------------------------------*

FORM item_print.

  TABLES: eipo.                                             "AL/6.4.01

  DATA: da_ganf(1) TYPE c,      "Print flag for billing correction
        da_lanf(1) TYPE c.      "Print flag for billing correction

  DATA: lv_vbeln TYPE vbdpr-vbeln_vauf.

* Initialization
  CLEAR: ixsdaccdpc, gt_sdaccdpc_doc[], da_xfilkd, chara, charb, downpay_refresh.

* Begin of Change YASH-CHITTA 09.08.2013
* Commented code related to Sales org.2300
** begin of change Atos-Chenlp/12.06.2012/VN.2.4 ------------------------*
**----if 2300, print with special sequence --------*
**  IF vbdkr-vkorg = '2300'.
*  IF vbdkr-vkorg IN r_vkorg_ctms AND NOT r_vkorg_ctms IS INITIAL.
*    LOOP AT tvbdpr.
*      vbdpr = tvbdpr.
*      CLEAR: gv_aeskd.
*** -- read Custom Tariff No. AND Country of Origin from EIPO
**      SELECT SINGLE * FROM eipo WHERE exnum = tvbdpr-exnum AND
**                                      expos = tvbdpr-expos.
**  Custom Tariff No.  = VBDPR-STAWN.
**  Country of Origin = VBDPR-HERKL.
*
** -- read change index from VBSN
**      SELECT SINGLE aeskd INTO gv_aeskd FROM vbsn
**        WHERE vbeln = vbdkr-vbeln AND posnr = vbdpr-posnr.
** -- read change index from LIPS
*      SELECT SINGLE aeskd INTO gv_aeskd FROM lips
*        WHERE vbeln = vbdpr-vgbel AND posnr = vbdpr-vgpos.
*
** -- Write ITEM_HEADER ---*
** ----print Element ITEM_HEADER_2300 at first---*
*      IF lv_vbeln IS INITIAL.
*        CALL FUNCTION 'WRITE_FORM'
*          EXPORTING
*            element = 'ITEM_HEADER_2300'
*            window  = 'MAIN'
*          EXCEPTIONS
*            OTHERS  = 1.
*        IF sy-subrc NE 0.
*          PERFORM protocol_update.
*        ENDIF.
*        lv_vbeln = vbdpr-vbeln_vauf.
*
** ---- if more than one SO number in billing, print every SO number befor billing items ---*
*      ELSEIF lv_vbeln <> vbdpr-vbeln_vauf.
** -- Write UNDER LINE ---*
*        CALL FUNCTION 'WRITE_FORM'
*          EXPORTING
*            element = 'UNDER_LINE'
*          EXCEPTIONS
*            OTHERS  = 1.
*        IF sy-subrc NE 0.
*          PERFORM protocol_update.
*        ENDIF.
** -- Write ITEM_HEADER_2300 ---*
*        CALL FUNCTION 'WRITE_FORM'
*          EXPORTING
*            element = 'ITEM_HEADER_2300'
*          EXCEPTIONS
*            OTHERS  = 1.
*        IF sy-subrc NE 0.
*          PERFORM protocol_update.
*        ENDIF.
*        lv_vbeln = vbdpr-vbeln_vauf.
*      ENDIF.
*
** -- Write ITEM_LINE ---*
** --- 1: get item price
** --- 2: print item line & item text in Element ITEM_LINE_2300
*      PERFORM get_item_prices.
*      LOOP AT tkomvd.
*        komvd = tkomvd.
*        CALL FUNCTION 'WRITE_FORM'
*          EXPORTING
*            element = 'ITEM_LINE_2300'
*          EXCEPTIONS
*            OTHERS  = 1.
*        IF sy-subrc NE 0.
*          PERFORM protocol_update.
*        ENDIF.
*      ENDLOOP.
*
*    ENDLOOP.
*
*  ELSE.
** end of change Atos-Chenlp/12.06.2012/VN.2.4 ------------------------*
* End of Change YASH-CHITTA 09.08.2013

  CALL FUNCTION 'WRITE_FORM'           "First header
    EXPORTING
      element = 'ITEM_HEADER'
    EXCEPTIONS
      OTHERS  = 1.
  IF sy-subrc NE 0.
    PERFORM protocol_update.
  ENDIF.
  CALL FUNCTION 'WRITE_FORM'           "Activate header
    EXPORTING
      element = 'ITEM_HEADER'
      type    = 'TOP'
    EXCEPTIONS
      OTHERS  = 1.
  IF sy-subrc NE 0.
    PERFORM protocol_update.
  ENDIF.

* Begin - TEST

*  APPEND LINES OF tvbdpr TO tvbdpr.
*  APPEND LINES OF tvbdpr TO tvbdpr.
*  APPEND LINES OF tvbdpr TO tvbdpr.
*  APPEND LINES OF tvbdpr TO tvbdpr.
*  APPEND LINES OF tvbdpr TO tvbdpr.
*  APPEND LINES OF tvbdpr TO tvbdpr.

* End - TEST


  LOOP AT tvbdpr.

* begin of change IMG-MDs/21.02.2008/VN.1.1
    CLEAR: g_print_line_items.
* end of change IMG-MDs/21.02.2008/VN.1.1

* begin of change AL/6.4.01
    SELECT SINGLE * FROM eipo WHERE exnum = tvbdpr-exnum AND
                                    expos = tvbdpr-expos.
* end   of change AL/6.4.01

    vbdpr = tvbdpr.

* begin of change IMG-MDs/07.02.2008/VN.1.1
    SELECT SINGLE * FROM marc WHERE matnr = vbdpr-matnr
                              AND werks = vbdpr-werks.



* end of change IMG-MDs/07.02.2008/VN.1.1

* Bei Fakturen, die keine Anzahlungsanforderungen darstellen, werden
* die Verrechnungspositionen nicht gedruckt
    IF ( vbdkr-fktyp EQ 'P'  )       OR
       ( vbdkr-fktyp NE 'P' AND vbdpr-fareg NA '45' ).
      PERFORM item_billing_correction_header USING da_ganf da_lanf.
      IF tvbdpr-uecha EQ vbdpr-posnr OR
         tvbdpr-uecha IS INITIAL.
        PERFORM get_item_prices.
        PERFORM get_item_characteristics.
        CALL FUNCTION 'CONTROL_FORM'
          EXPORTING
            command = 'PROTECT'.
* begin of change AL/2.0
        IF vbdpr-kzwi2 < 0 AND vbdpr-idnkd <> space AND
                               vbdpr-pstyv <> 'TAS'.
*      if vbdpr-kzwi2 < 0 and VBDPR-IDNKD <> space.
          MOVE '*' TO vbdpr-dummy.
        ENDIF.
* end   of change AL/2.0
* begin of change IMG-MDs/21.02.2008/VN.1.1
*        CALL FUNCTION 'WRITE_FORM'
*          EXPORTING
*            element = 'ITEM_LINE'.

        g_print_line_items = 'X'.
* end of change IMG-MDs/21.02.2008/VN.1.1
        IF tvbdpr-charg NE space.
          CALL FUNCTION 'WRITE_FORM'
            EXPORTING
              element = 'ITEM_LINE_BATCH'
            EXCEPTIONS
              OTHERS  = 1.
          IF sy-subrc NE 0.
            PERFORM protocol_update.
          ENDIF.
        ENDIF.
        PERFORM item_price_print.
* begin of change IMG-MDs/27.10.2008/VN.1.4
        PERFORM print_batch_lines.
* end of change IMG-MDs/27.10.2008/VN.1.4
        PERFORM item_characteristics_print.
        PERFORM item_reference_billing.
        CALL FUNCTION 'CONTROL_FORM'
          EXPORTING
            command = 'ENDPROTECT'.
        PERFORM item_text_print.
        PERFORM different_consignee.
        PERFORM different_order_no.
        PERFORM different_delivery_no.
        PERFORM different_extern_no.
        PERFORM different_purchase_order_no.
        PERFORM different_reference_no.
      ELSE.
        IF NOT tvbdpr-fkimg IS INITIAL.
          PERFORM get_item_prices.
          CALL FUNCTION 'WRITE_FORM'
            EXPORTING
              element = 'ITEM_LINE_BATCH'
            EXCEPTIONS
              OTHERS  = 1.
          IF sy-subrc NE 0.
            PERFORM protocol_update.
          ENDIF.
          PERFORM item_price_print.
        ENDIF.
      ENDIF.

*--> GeB 26012011
      IF NOT tvbdpr-idnkd IS INITIAL.
        CALL FUNCTION 'WRITE_FORM'
          EXPORTING
            element = 'ITEM_LINE_CUSTOMER_MATERIAL'
          EXCEPTIONS
            OTHERS  = 1.
        IF sy-subrc NE 0.
          PERFORM protocol_update.
        ENDIF.
      ENDIF.
*<-- GeB 26012011

*   IF NOT VBDPR-PREFE IS INITIAL.
*     CALL FUNCTION 'WRITE_FORM'
*          EXPORTING
*               ELEMENT = 'PREFERENCE_TEXT'
*          EXCEPTIONS
*               OTHERS  = 1.
*     IF SY-SUBRC NE 0.
*       PERFORM PROTOCOL_UPDATE.
*     ENDIF.
*   ENDIF.
*ENHANCEMENT-POINT ITEM_PRINT_01 SPOTS ES_RVADIN01.
    ENDIF.

    IF vbdkr-fktyp NE 'P'.
      IF vbdpr-fareg CA '45'.
        PERFORM get_downpayment_data.
      ENDIF.
    ENDIF.
  ENDLOOP.

  CALL FUNCTION 'WRITE_FORM'           "Deactivate Header
    EXPORTING
      element  = 'ITEM_HEADER'
      function = 'DELETE'
      type     = 'TOP'
    EXCEPTIONS
      OTHERS   = 1.
  IF sy-subrc NE 0.
    PERFORM protocol_update.
  ENDIF.

* Begin of Change YASH-CHITTA 09.08.2013
* Commented code related to Sales org.2300
** begin of change Atos-Chenlp/12.06.2012/VN.2.4 ------------------------*
*  ENDIF.
** end of change Atos-Chenlp/12.06.2012/VN.2.4 ------------------------*
* End of Change YASH-CHITTA 09.08.2013

ENDFORM.                    "ITEM_PRINT

*---------------------------------------------------------------------*
*       FORM ITEM_TEXT_PRINT                                          *
*---------------------------------------------------------------------*
*       Printout of the item texts                                    *
*---------------------------------------------------------------------*

FORM item_text_print.

  CALL FUNCTION 'WRITE_FORM'
    EXPORTING
      element = 'ITEM_TEXT'
    EXCEPTIONS
      element = 1
      window  = 2.
  IF sy-subrc NE 0.
    PERFORM protocol_update.
  ENDIF.

ENDFORM.                    "ITEM_TEXT_PRINT

*---------------------------------------------------------------------*
*       FORM PROTOCOL_UPDATE                                          *
*---------------------------------------------------------------------*
*       The messages are collected for the processing protocol.       *
*---------------------------------------------------------------------*

FORM protocol_update.

  CHECK xscreen = space.
  CALL FUNCTION 'NAST_PROTOCOL_UPDATE'
    EXPORTING
      msg_arbgb = syst-msgid
      msg_nr    = syst-msgno
      msg_ty    = syst-msgty
      msg_v1    = syst-msgv1
      msg_v2    = syst-msgv2
      msg_v3    = syst-msgv3
      msg_v4    = syst-msgv4
    EXCEPTIONS
      OTHERS    = 1.

ENDFORM.                    "PROTOCOL_UPDATE
*---------------------------------------------------------------------*
*       FORM PROTOCOL_UPDATE_SPOOL                                    *
*---------------------------------------------------------------------*
*       The messages are collected for the processing protocol.       *
*---------------------------------------------------------------------*

FORM protocol_update_spool USING syst-msgno h_i_itcpp-tdspoolid
                                 syst-msgv2 syst-msgv3 syst-msgv4.
  syst-msgid = 'VN'.
  syst-msgv1 = h_i_itcpp-tdspoolid.
  CONDENSE syst-msgv1.
  CHECK xscreen = space.
  CALL FUNCTION 'NAST_PROTOCOL_UPDATE'
    EXPORTING
      msg_arbgb = syst-msgid
      msg_nr    = syst-msgno
      msg_ty    = syst-msgty
      msg_v1    = syst-msgv1
      msg_v2    = syst-msgv2
      msg_v3    = syst-msgv3
      msg_v4    = syst-msgv4
    EXCEPTIONS
      OTHERS    = 1.

ENDFORM.                    "PROTOCOL_UPDATE_SPOOL
*---------------------------------------------------------------------*
*       FORM REFERENCE_NUMBER                                         *
*---------------------------------------------------------------------*
*       Printing of the reference numbers                             *
*---------------------------------------------------------------------*
*
FORM reference_number.
*
*  check vbdkr-vbtyp ca 'MUN'.
*
*  call function 'RV_BILLING_REFERENCES'
*       exporting
*            faktura = vbdkr-vbeln
*       tables
*            pos     = tvbdpr
*       changing
*            kopf    = vbdkr.
*
  CALL FUNCTION 'WRITE_FORM'
    EXPORTING
      element = 'REFERENCE_NUMBER'
      window  = 'REFNUMB'
    EXCEPTIONS
      element = 1
      window  = 2.
  IF sy-subrc NE 0.
    PERFORM protocol_update.
  ENDIF.
*
ENDFORM.   "Ende reference_number
*---------------------------------------------------------------------*
*       FORM SENDER                                                   *
*---------------------------------------------------------------------*
*       This routine determines the address of the sender (Table VKO) *
*---------------------------------------------------------------------*

FORM sender.

  SELECT SINGLE * FROM tvko  WHERE vkorg = vbdkr-vkorg.
  IF sy-subrc NE 0.
    syst-msgid = 'VN'.
    syst-msgno = '203'.
    syst-msgty = 'E'.
    syst-msgv1 = 'TVKO'.
    syst-msgv2 = syst-subrc.
    PERFORM protocol_update.
    EXIT.
  ENDIF.
  CLEAR gv_fb_addr_get_selection.
  gv_fb_addr_get_selection-addrnumber = tvko-adrnr.
  CALL FUNCTION 'ADDR_GET'
    EXPORTING
      address_selection = gv_fb_addr_get_selection
      address_group     = 'CA01'
    IMPORTING
      sadr              = sadr
    EXCEPTIONS
      OTHERS            = 01.                               "SADR40A
  IF sy-subrc NE 0.
    CLEAR sadr.
  ENDIF.

  vbdkr-sland = sadr-land1.
  IF sy-subrc NE 0.
    syst-msgid = 'VN'.
    syst-msgno = '203'.
    syst-msgty = 'E'.
    syst-msgv1 = 'SADR'.
    syst-msgv2 = syst-subrc.
    PERFORM protocol_update.
  ENDIF.

* Interne Verrechnung: Adresse des Buchungskreises lesen
  IF vbdkr-vbtyp CA '56'.
    CLEAR t001g.
    SELECT SINGLE * FROM t001g WHERE bukrs = vbdkr-bukrs
                                 AND programm EQ sy-repid
                                 AND txtid EQ 'SD'.
  ENDIF.

ENDFORM.                    "SENDER

*&---------------------------------------------------------------------*
*&      Form  HEADER_CONSGNEE
*&---------------------------------------------------------------------*
*       text                                                           *
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM header_consgnee.

  IF vbdkr-name1 NE vbdkr-name1_we OR
     vbdkr-name2 NE vbdkr-name2_we OR
     vbdkr-name3 NE vbdkr-name3_we OR
     vbdkr-name4 NE vbdkr-name4_we   .
    CALL FUNCTION 'WRITE_FORM'
      EXPORTING
        element = 'HEADER_CONSGNEE'
        window  = 'CONSGNEE'
      EXCEPTIONS
        element = 1
        window  = 2.
* begin of change IMG-MDs/06.02.2008/VN.1.1
* Always
*    CALL FUNCTION 'WRITE_FORM'
*      EXPORTING
*        element = 'HEADER_CONSGNEE'
*        window  = 'INFO1'
*      EXCEPTIONS
*        element = 1
*        window  = 2.
  ENDIF.

** begin of change IMG-MDs/06.02.2008/VN.1.1
*  IF vbdkr-vkorg <> '3200'.
* begin of change Atos-Chenlp/12.06.2012/VN.2.4 ------------------------*
*----- skip to printe HEAER_CONSGNEE in INFO1--------*
* Begin of Change YASH-CHITTA 09.08.2013
* Commented code related to Sales org.2300
*  IF vbdkr-vkorg <> '2300'.
*  IF vbdkr-vkorg IN r_vkorg_ctms AND NOT r_vkorg_ctms IS INITIAL.
*  ELSE.
* End of Change YASH-CHITTA 09.08.2013
  CALL FUNCTION 'WRITE_FORM'
    EXPORTING
      element = 'HEADER_CONSGNEE'
      window  = 'INFO1'
    EXCEPTIONS
      element = 1
      window  = 2.
* Begin of Change YASH-CHITTA 09.08.2013
* Commented code related to Sales org.2300
*  ENDIF.
* End of Change YASH-CHITTA 09.08.2013
* end of change Atos-Chenlp/12.06.2012/VN.2.4 ------------------------*
*  ENDIF.
* end of change ORI-/18.01.2011/VN.2.1
* end of change IMG-MDs/06.02.2008/VN.1.1
* Begin of change ORI-MULTANI/11.04.2011/VN.2.3
* Begin of Change YASH-CHITTA 09.08.2013
* Remove hardcoding for Sales org.
*  IF vbdkr-vkorg = '3200'.
  IF  r_vkorg_ctin IS NOT INITIAL
  AND vbdkr-vkorg  IN r_vkorg_ctin.                         " '3200'.
* End of Change YASH-CHITTA 09.08.2013

    CALL FUNCTION 'WRITE_FORM'
      EXPORTING
        element = 'HEADER_COMP'
        window  = 'INFO3'
      EXCEPTIONS
        element = 1
        window  = 2.
  ENDIF.
* End of change ORI-MULTANI/11.04.2011/VN.2.3
ENDFORM.                               " HEADER_CONSGNEE
*&---------------------------------------------------------------------*
*&      Form  DIFFERENT_REFERENCE_NO
*&---------------------------------------------------------------------*
*       text                                                           *
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM different_reference_no.

  CHECK vbdkr-vbtyp CA 'OP'.
  CHECK vbdkr-vbeln_vg2 NE vbdpr-vbeln_vg2.
  CALL FUNCTION 'WRITE_FORM'
    EXPORTING
      element = 'ITEM_REFERENCE_NO'
    EXCEPTIONS
      element = 1
      window  = 2.
  IF sy-subrc NE 0.
    PERFORM protocol_update.
  ENDIF.

ENDFORM.                               " DIFFERENT_REFERENCE_NO
*&---------------------------------------------------------------------*
*&      Form  HEADER_DATA_PRINT
*&---------------------------------------------------------------------*
*       text                                                           *
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM header_data_print.

  CALL FUNCTION 'WRITE_FORM'
    EXPORTING
      element = 'HEADER_DATA'
    EXCEPTIONS
      element = 1
      window  = 2.
  IF sy-subrc NE 0.
    PERFORM protocol_update.
  ENDIF.

* begin of change AL/1.4
  IF zflag = space.
    CALL FUNCTION 'WRITE_FORM'
      EXPORTING
        element = 'DEFBANK'.
  ELSE.
    CALL FUNCTION 'WRITE_FORM'
      EXPORTING
        element = 'ZBANK'.
  ENDIF.

* folgendes nötig, weil das Inco terms sonst verloren geht
  CALL FUNCTION 'WRITE_FORM'
    EXPORTING
      element = 'ZINCO'.
* end   of change AL/1.4

ENDFORM.                               " HEADER_DATA_PRINT
*&---------------------------------------------------------------------*
*&      Form  GET_DATA_ESR
*&---------------------------------------------------------------------*
*       text                                                           *
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_data_esr.

  CALL FUNCTION 'SD_ESR_GET_DATA'
    EXPORTING
      vbdkr_bukrs                   = vbdkr-bukrs
      vbdkr_vkorg                   = vbdkr-vkorg
      komk_fkwrt                    = komk-fkwrt
      vbdkr_vbeln                   = vbdkr-vbeln
      vbdkr_kunrg                   = vbdkr-kunrg
      vbdkr_waerk                   = vbdkr-waerk
    CHANGING
      ivbdre                        = vbdre
    EXCEPTIONS
      t049e_no_entry                = 1
      t001_no_entry                 = 2
      bnka_no_entry                 = 3
      sadr_no_entry                 = 4
      fkwrt_not_valid               = 5
      esr_digits_to_check_not_valid = 6
      esr_check_method_not_valid    = 7
      OTHERS                        = 8.

  IF sy-subrc NE 0.
    retcode = sy-subrc.
    PERFORM protocol_update.
  ENDIF.

ENDFORM.                               " GET_DATA_ESR

*----------------------------------------------------------------------*
*       Form  GET_DATA_ITALY
*----------------------------------------------------------------------*
*                                                                      *
*----------------------------------------------------------------------*
*
*
*----------------------------------------------------------------------*
FORM get_data_italy USING proc_screen.

  CLEAR konh.
  CLEAR tlic.
  LOOP AT tkomv WHERE koaid = 'D'
                AND   kntyp ='+'.
    SELECT SINGLE * FROM konh WHERE knumh = tkomv-knumh.
    IF sy-subrc EQ 0.
      IF NOT konh-licno IS INITIAL AND NOT konh-licdt IS INITIAL.
        SELECT SINGLE * FROM tlic WHERE licno  = konh-licno
                                  AND   kunnr  = vbdkr-kunag.
        IF sy-subrc NE 0.
* Alte TLIC-Sätze haben KUNNR initial. Alter Satz vorhanden ?
          DATA: da_kunnr_initial LIKE vbdkr-kunag.
          CLEAR da_kunnr_initial.
          SELECT SINGLE * FROM tlic WHERE licno = konh-licno
                                    AND   kunnr = da_kunnr_initial.
        ENDIF.
        IF sy-subrc EQ 0.
          IF NOT tlic-prnum_nr IS INITIAL AND
             NOT tlic-prnum_dt IS INITIAL.
            MOVE:
              konh-licno TO vbdkr-licno,
              konh-licdt TO vbdkr-licdt.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
    IF vbdkr-licno     IS INITIAL OR
       vbdkr-licdt     IS INITIAL OR
       tlic-prnum_nr   IS INITIAL OR
       tlic-prnum_dt   IS INITIAL.
      IF proc_screen = space.
        retcode = 3.
        syst-msgno = '205'.
        syst-msgid = 'VN'.
        syst-msgty = 'I'.
        PERFORM protocol_update.
      ELSE.
        MESSAGE i205.
      ENDIF.
    ENDIF.
    EXIT.
  ENDLOOP.



ENDFORM.                               " get_data_italy

*&---------------------------------------------------------------------*
*&      Form  START_FORM
*&---------------------------------------------------------------------*
*       text                                                           *
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM start_form.

  DATA : startseite(8) VALUE 'FIRSTBSR'.
  DATA : sprache LIKE sy-langu.

  IF vbdre-verfa = '04' OR vbdre-verfa = '08'.

    CALL FUNCTION 'START_FORM'
      EXPORTING
        archive_index = toa_dara
        startpage     = startseite
      IMPORTING
        language      = sprache
      EXCEPTIONS
        form          = 1
        format        = 2
        unended       = 3
        unopened      = 4
        unused        = 5
        OTHERS        = 6.
    IF sy-subrc NE 0.
      retcode = sy-subrc.
      PERFORM protocol_update.
    ENDIF.

  ENDIF.

ENDFORM.                               " START_OPEN
*&---------------------------------------------------------------------*
*&      Form  TAX_TEXT_PRINT
*&---------------------------------------------------------------------*
*       text                                                           *
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM tax_text_print.

* Text element not used
*  CALL FUNCTION 'WRITE_FORM'
*    EXPORTING
*      element = 'TAX_TEXT'
*    EXCEPTIONS
*      element = 1
*      window  = 2.
*  IF sy-subrc NE 0.
*    PERFORM protocol_update.
*  ENDIF.

ENDFORM.                               " TAX_TEXT_PRINT

***********************************************************************
*                SUBROUTINES OF ENTRY_CH                              *
***********************************************************************

FORM header_ch.
  CLEAR print_local_curr_ch.
  REFRESH komvdk_ch.
* Hauswährung <> Belegwährung ?
  SELECT SINGLE * FROM t001 WHERE bukrs EQ vbdkr-bukrs.
  CHECK sy-subrc = 0.
  CHECK t001-waers <> vbdkr-waerk.
  MOVE 'X' TO print_local_curr_ch.
  LOOP AT hkomvd WHERE koaid = 'D'.
    CLEAR komvdk_ch.
    CALL FUNCTION 'CONVERT_TO_LOCAL_CURRENCY'
      EXPORTING
        date             = vbdkr-fkdat
        foreign_amount   = hkomvd-kwert
        foreign_currency = vbdkr-waerk
        local_currency   = t001-waers
        rate             = vbdkr-kurrf
      IMPORTING
        local_amount     = komvdk_ch-kwert
      EXCEPTIONS
        no_rate_found    = 1
        overflow         = 2
        no_factors_found = 3
        no_spread_found  = 4
        OTHERS           = 5.
    CHECK sy-subrc = 0.
    MOVE: t001-waers TO komvdk_ch-awein,
          t001-waers TO komvdk_ch-awei1,
          hkomvd-vtext TO komvdk_ch-vtext,
          vbdkr-kurrf TO hkomvd-kkurs.
    APPEND komvdk_ch.
  ENDLOOP.
ENDFORM.                    "HEADER_CH

*---------------------------------------------------------------------*
*       FORM ITEM_CH                                                  *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM item_ch.
  CHECK print_local_curr_ch EQ 'X'.
  REFRESH komvdp_ch.
* Suche die Steuerkonditionen der Position und rechne Hauswährung aus.
  LOOP AT tkomvd WHERE koaid = 'D'.
    CLEAR komvdp_ch.
    CALL FUNCTION 'CONVERT_TO_LOCAL_CURRENCY'
      EXPORTING
        date             = vbdkr-fkdat
        foreign_amount   = tkomvd-kwert
        foreign_currency = vbdkr-waerk
        local_currency   = t001-waers
        rate             = vbdkr-kurrf
      IMPORTING
        local_amount     = komvdp_ch-kwert
      EXCEPTIONS
        no_rate_found    = 1
        overflow         = 2
        no_factors_found = 3
        no_spread_found  = 4
        OTHERS           = 5.
    CHECK sy-subrc = 0.
    MOVE: t001-waers TO komvdp_ch-awein,
          t001-waers TO komvdp_ch-awei1,
          tkomvd-vtext TO komvdp_ch-vtext,
          vbdkr-kurrf TO komvdp_ch-kkurs.
    APPEND komvdp_ch.
  ENDLOOP.
ENDFORM.                    "ITEM_CH

*---------------------------------------------------------------------*
*       FORM ITEM_PRINT_CH                                            *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM item_print_ch.
  DATA: save_waerk_fw LIKE komk-waerk.
  save_waerk_fw = komk-waerk.
  LOOP AT komvdp_ch.
    komvd = komvdp_ch.
    komk-waerk = komvd-awein.
    IF print_mwskz EQ space.
      CLEAR komvd-mwskz.
    ENDIF.
    CALL FUNCTION 'WRITE_FORM'
      EXPORTING
        element = 'ITEM_LINE_TAX_HAUSWAEHRUNG'.
  ENDLOOP.
  komk-waerk = save_waerk_fw.
ENDFORM.                    "ITEM_PRINT_CH

*---------------------------------------------------------------------*
*       FORM HEADER_PRINT_CH                                          *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM header_print_ch.
  DATA: save_waerk_fw LIKE komk-waerk.
  save_waerk_fw = komk-waerk.
  LOOP AT komvdk_ch.
    komvd = komvdk_ch.
    komk-waerk = komvd-awein.
    IF print_mwskz = space.
      CLEAR komvd-mwskz.
    ENDIF.
    CALL FUNCTION 'WRITE_FORM'
      EXPORTING
        element = 'SUM_LINE_TAX_HAUSWAEHRUNG'.
  ENDLOOP.
  komk-waerk = save_waerk_fw.
ENDFORM.                    "HEADER_PRINT_CH








***********************************************************************
*       CUSTOMER SUBROUTINES                                          *
***********************************************************************
*&---------------------------------------------------------------------*
*&      Form  ITEM_BILLING_CORRECTION_HEADER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_DA_GANF  text                                              *
*      -->P_DA_LANF  text                                              *
*----------------------------------------------------------------------*
FORM item_billing_correction_header USING    us_ganf
                                             us_lanf.
  CHECK : vbdkr-knuma IS INITIAL.
  IF vbdpr-autyp = 'K'.
*   Gutschriftsanforderung
    IF vbdpr-shkzg = 'X'.
      IF us_ganf IS INITIAL.
        MOVE 'X'   TO us_ganf.
        MOVE space TO us_lanf.

        CALL FUNCTION 'WRITE_FORM'
          EXPORTING
            element = 'CORRECTION_TEXT_K'
          EXCEPTIONS
            element = 1
            window  = 2.
        IF sy-subrc NE 0.
          PERFORM protocol_update.
        ENDIF.
      ENDIF.
    ELSE.
      IF us_lanf IS INITIAL.
        MOVE 'X'   TO us_lanf.
        MOVE space TO us_ganf.

        CALL FUNCTION 'WRITE_FORM'
          EXPORTING
            element = 'CORRECTION_TEXT_L'
          EXCEPTIONS
            element = 1
            window  = 2.
        IF sy-subrc NE 0.
          PERFORM protocol_update.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

  IF vbdpr-autyp = 'L'.
*   Lastschriftsanforderung
    IF vbdpr-shkzg = space.
      IF us_lanf IS INITIAL.
        MOVE 'X'   TO us_lanf.
        MOVE space TO us_ganf.

        CALL FUNCTION 'WRITE_FORM'
          EXPORTING
            element = 'CORRECTION_TEXT_L'
          EXCEPTIONS
            element = 1
            window  = 2.
        IF sy-subrc NE 0.
          PERFORM protocol_update.
        ENDIF.
      ENDIF.
    ELSE.
      IF us_ganf IS INITIAL.
        MOVE 'X'   TO us_ganf.
        MOVE space TO us_lanf.

        CALL FUNCTION 'WRITE_FORM'
          EXPORTING
            element = 'CORRECTION_TEXT_K'
          EXCEPTIONS
            element = 1
            window  = 2.
        IF sy-subrc NE 0.
          PERFORM protocol_update.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.                               " ITEM_BILLING_CORRECTION_HEADER
*&---------------------------------------------------------------------*
*&      Form  ITEM_REFERENCE_BILLING
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM item_reference_billing.

  CHECK vbdpr-vbklt EQ 'D'.
  CALL FUNCTION 'WRITE_FORM'
    EXPORTING
      element = 'ITEM_REFERENCE_BILLING'
    EXCEPTIONS
      element = 1
      window  = 2.
  IF sy-subrc NE 0.
    PERFORM protocol_update.
  ENDIF.

ENDFORM.                               " ITEM_REFERENCE_BILLING
*&---------------------------------------------------------------------*
*&      Form  DOWNPAYMENT_INFO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM downpayment_value.

* Begin of change ORI-MULTANI/11.04.2011/VN.2.3   -----------------------*
  TYPES: BEGIN OF ty_bseg,
           bukrs TYPE bseg-bukrs,
           belnr TYPE bseg-belnr,
           gjahr TYPE bseg-gjahr,
           umskz TYPE bseg-umskz,
           wrbtr TYPE bseg-wrbtr,
         END OF ty_bseg.

  TYPES: BEGIN OF ty_bkpf,
           bukrs TYPE bkpf-bukrs,
           belnr TYPE bkpf-belnr,
           gjahr TYPE bkpf-gjahr,
           blart TYPE bkpf-blart,
           bldat TYPE bkpf-bldat,
           budat TYPE bkpf-budat,
           xblnr TYPE bkpf-xblnr,
           bstat TYPE bkpf-bstat,
         END OF ty_bkpf.

  DATA : lt_bseg_clr TYPE STANDARD TABLE OF ty_bseg,
         lt_bkpf_clr TYPE STANDARD TABLE OF ty_bkpf,
         w_bseg_clr  TYPE ty_bseg,
         lv_flag     TYPE c.
* End of change ORI-MULTANI/11.04.2011/VN.2.3   -----------------------*
*begin of change AO-Sam/21.04.2009/VN.1.6 -----------------------*
  DATA: lv_belnr       LIKE bset-belnr,
        lv_dpamt       LIKE bseg-wrbtr,
        lv_dpflag_z001 TYPE c,
        lv_dpflag_z002 TYPE c,
*  begin of change AO-Sam/30.06.2009/VN.1.7 -----------------------*
        lv_key3        LIKE ytab_map-key3,
        lv_key5        LIKE ytab_map-key5.
*  end of change AO-Sam/30.06.2009/VN.1.7   -----------------------*
  DATA: lt_bkpf  LIKE bkpf OCCURS 0 WITH HEADER LINE,
        lt_bseg  LIKE bseg OCCURS 0 WITH HEADER LINE,
        ls_fpla  LIKE fpla,
        lt_fplt  LIKE fplt OCCURS 0 WITH HEADER LINE,
        ls_vbdpr LIKE vbdpr.
*Begin of change ORI-MULTANI/11.04.2011/VN.2.3----------------*
  DATA: lt_params     TYPE STANDARD TABLE OF ztab_gl_params.
  CONSTANTS: lc_program_ctin TYPE ztab_gl_params-progname VALUE 'ZGL_RVADIN02',
             lc_excise       TYPE ztab_gl_params-progname VALUE 'EXCISE_COND',
             lc_serv_tax     TYPE ztab_gl_params-progname VALUE 'SERV_TAX_COND'.
*End of change ORI-MULTANI/11.04.2011/VN.2.3----------------*

*Begin of Declaration ZEN-JUTURU / 08.01.2015 / CHG3012303.

  DATA : gv_cess        TYPE vbdkr-dpend,
         gv_staxwd(256) TYPE c,
         gv_cesswd(256) TYPE c.

*End of Declaration ZEN-JUTURU / 08.01.2015 / CHG3012303.

* Skip for SG 3100
* Begin CR 1837 Vkorg want's this also AnR 12.11.09
*  IF vbdkr-vkorg = '3100'.
* End CR 1837 Vkorg want's this also AnR 12.11.09
* Begin of Change YASH-CHITTA 09.08.2013
* Remove hardcoding for Sales org.
*  IF vbdkr-vkorg <> '3200'.
  IF  r_vkorg_ctin IS NOT INITIAL
  AND vbdkr-vkorg  NOT IN r_vkorg_ctin.                     " '3200'.
* End of Change YASH-CHITTA 09.08.2013
    CHECK vbdkr-fkart = 'F2' .    "Doc type F2 print out DP
  ENDIF.
  SELECT SINGLE * FROM fpla     "Billing plan header
                  INTO ls_fpla
                 WHERE vbeln = vbdkr-vbeln_vauf
                   AND rfpln = space.
  SELECT * FROM fplt            "Billing item
           INTO CORRESPONDING FIELDS OF TABLE lt_fplt
          WHERE fplnr = ls_fpla-fplnr.
  LOOP AT lt_fplt.
    IF lt_fplt-mlbez = 'Z001' OR lt_fplt-tetxt = 'Z001'
*--> GeB I43553 31082012
       OR lt_fplt-mlbez = 'Z004' OR lt_fplt-tetxt = 'Z004'.
*<-- GeB I43553 31082012
      lv_dpflag_z001 = 'X'.        "With DP
      CONTINUE.
    ENDIF.
    IF lt_fplt-mlbez = 'Z002' OR lt_fplt-tetxt = 'Z002'.
      lv_dpflag_z002 = 'X'.        "With partial IV.
      CONTINUE.
    ENDIF.
  ENDLOOP.

  READ TABLE tvbdpr INTO ls_vbdpr INDEX 1.
*Begin of change Atos-Chenlp/10.06.2010/VN.1.9----------------*
* Begin of Change YASH-CHITTA 09.08.2013
* Remove hardcoding for Sales org.
*  IF vbdkr-vkorg = '3300' OR vbdkr-vkorg = '3200'.
  IF ( r_vkorg_ctin IS NOT INITIAL
  AND  vbdkr-vkorg  IN r_vkorg_ctin )                       " '3200'.
  OR ( r_vkorg_ctcn IS NOT INITIAL
  AND  vbdkr-vkorg  IN r_vkorg_ctcn ).                      " '3300'
* End of Change YASH-CHITTA 09.08.2013
*    IF ls_vbdpr-fareg = '3'.  "Final invoice
*      CHECK lv_dpflag_z002 = ''.
*    ENDIF.
  ELSE.
    IF ls_vbdpr-fareg = '3'.  "Final invoice
      CHECK lv_dpflag_z001 = 'X'.
      CHECK lv_dpflag_z002 = ''.
    ELSEIF ls_vbdpr-fareg = 1 OR ls_vbdpr-fareg = 2. "Partial invoice
      CHECK lv_dpflag_z001 = 'X'.
    ENDIF.
  ENDIF.
*end of change Atos-Chenlp/10.06.2010/VN.1.9----------------*

* Begin CR 1837 Vkorg want's this also AnR 12.11.09
*  ELSE.
*    CHECK NOT vbdkr-dpval IS INITIAL.
*  ENDIF.
* End CR 1837 Vkorg want's this also AnR 12.11.09
*end of change AO-Sam/21.04.2009/VN.1.6   -----------------------*
  vbdkr-dpend = komk-fkwrt.

*begin of change AO-Sam/21.04.2009/VN.1.6 -----------------------*
* Begin CR 1837 Vkorg want's this also AnR 12.11.09
*  IF vbdkr-vkorg = '3100'.
* End CR 1837 Vkorg want's this also AnR 12.11.09
* Begin of change ORI-MULTANI/11.04.2011/VN.2.3   -----------------------*

* Begin of Change YASH-CHITTA 09.08.2013
* Remove hardcoding for Sales org.
*  IF vbdkr-vkorg <> '3200'.
  IF  r_vkorg_ctin IS NOT INITIAL
  AND vbdkr-vkorg  NOT IN r_vkorg_ctin.
* End of Change YASH-CHITTA 09.08.2013

* End of change ORI-MULTANI/11.04.2011/VN.2.3   -----------------------*
    CLEAR gv_dptax_amt.
* Get related acct. doc. number
    SELECT SINGLE belnr FROM bkpf
                        INTO lv_belnr
                       WHERE awtyp = 'VBRK'
                         AND awkey = vbdkr-vbeln.
* Sum DP received tax amount
    SELECT * FROM bset
            WHERE bukrs = vbdkr-bukrs
              AND belnr = lv_belnr
              AND kschl = 'MWAS'.
      gv_dptax_amt = gv_dptax_amt + bset-fwste.
    ENDSELECT.
* Get total after recevid advance payment
    gv_dprcv_tol = komvd-kwert - gv_dptax_amt - vbdkr-dpnet.

* Begin of Insert TULARAJ-CEDK961813-Project Bahrine
    IF vbdkr-vkorg = '3600'.
      gv_dptax_amt_doc_curr      = ( gv_dptax_amt * vbrk-kurrf ). "VAT(BHD)
      gv_dprcv_tol_arap_doc_curr = ( gv_dprcv_tol * vbrk-kurrf ). "Total after Received advance Payments BHD
    ENDIF.
* End of Insert TULARAJ-CEDK961813-Project Bahrine

* Begin CR 1837 Vkorg want's this also AnR 12.11.09
*  ELSE.
**end of change AO-Sam/21.04.2009/VN.1.6   -----------------------*
*    SUBTRACT vbdkr-dpval FROM vbdkr-dpend.
*    vbdkr-dpmws_end = vbdkr-mwsbk - vbdkr-dpmws.
**begin of change AO-Sam/21.04.2009/VN.1.6 -----------------------*
*  ENDIF.
* Begin CR 1837 Vkorg want's this also AnR 12.11.09
*end of change AO-Sam/21.04.2009/VN.1.6   -----------------------*

* ER952 - Begin
* Don't print, if 0
    CLEAR: gv_no_adv_paym, gv_not_tax.
* Set flags:
    IF vbdkr-dpnet = 0.
      gv_no_adv_paym = 'X'.
    ENDIF.
    IF vbdkr-dpmws = 0.
      gv_not_tax = 'X'.
    ENDIF.
* ER952 - End

*begin of change AO-Sam/21.04.2009/VN.1.6 -----------------------*
* New logic & layout for downpayment(received & not received)
* Begin CR 1837 Vkorg want's this also AnR 12.11.09
*  IF vbdkr-vkorg = '3100'.
* end CR 1837 Vkorg want's this also AnR 12.11.09
* Call DP received output
    CALL FUNCTION 'WRITE_FORM'
      EXPORTING
        element = 'DOWNPAYMENT_RECEIVED'
      EXCEPTIONS
        element = 1
        window  = 2.
    IF sy-subrc NE 0.
      PERFORM protocol_update.
    ENDIF.

* Call DP not received output
*  begin of change AO-Sam/30.06.2009/VN.1.7 -----------------------*
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = vbdkr-vbeln_vauf
      IMPORTING
        output = lv_key5.
* 1.Get migrate DP.
    SELECT SINGLE key3 FROM ytab_map  "Get old SO no.
                       INTO lv_key3
                      WHERE key5 = lv_key5
                        AND key2 = 'IMG_PROJ'.
    IF sy-subrc = 0.
      SELECT * FROM bkpf    "Checking related acct. doc.(Noted items)
               INTO CORRESPONDING FIELDS OF TABLE lt_bkpf
              WHERE bktxt = lv_key3
                AND bstat = 'S'
                AND bukrs = vbdkr-vkorg
           ORDER BY belnr.
    ENDIF.
* 2. Get normal DP
    SELECT * FROM bkpf    "Checking related acct. doc.(Noted items)
        APPENDING CORRESPONDING FIELDS OF TABLE lt_bkpf
            WHERE xblnr = vbdkr-vbeln_vauf
              AND bstat = 'S'
              AND bukrs = vbdkr-vkorg
         ORDER BY belnr.
*  end of change AO-Sam/30.06.2009/VN.1.7   -----------------------*

    IF NOT lt_bkpf[] IS INITIAL.

* Pick all the line items for 3100, 3200, 3300
*  begin of change ORI-TIBREWAL/02.03.2011/VN.2.1 -----------------------*
* Begin of Change YASH-CHITTA 09.08.2013
* Remove hardcoding for Sales org.
*      IF vbdkr-vkorg = '3100'
*        OR vbdkr-vkorg = '3300'     "+IMG-BBz 14-OCT-2010 P1951
*        OR vbdkr-vkorg = '3200'.
      IF ( r_vkorg_ctsg IS NOT INITIAL
      AND  vbdkr-vkorg  IN r_vkorg_ctsg )                   " '3100'.
      OR ( r_vkorg_ctcn IS NOT INITIAL
      AND  vbdkr-vkorg  IN r_vkorg_ctcn )                   " '3300'
      OR ( r_vkorg_ctin IS NOT INITIAL
      AND  vbdkr-vkorg  IN r_vkorg_ctin ).                  " '3200'.
* End of Change YASH-CHITTA 09.08.2013
*  end of change ORI-TIBREWAL/02.03.2011/VN.2.1 -----------------------*
        SELECT * FROM bseg    "Get line items
                 INTO CORRESPONDING FIELDS OF TABLE lt_bseg
                  FOR ALL ENTRIES IN lt_bkpf
                WHERE belnr = lt_bkpf-belnr
                  AND bukrs = lt_bkpf-bukrs
                  AND augbl = space.
      ELSE.
*anr 26.11.09 CTCH likes to only the amount that belongs to the item
*      pick the dp of the first item not the one that is needed
        SELECT * FROM bseg    "Get line items
                       INTO CORRESPONDING FIELDS OF TABLE lt_bseg
                        FOR ALL ENTRIES IN lt_bkpf
                      WHERE belnr = lt_bkpf-belnr
                        AND bukrs = lt_bkpf-bukrs
                        AND augbl = space.
*--> GeB 12102012 I43553
*                        AND posn2 = vbdpr-posnr_vauf.
*<-- GeB 12102012 I43553
      ENDIF.
*end of 26.11.09 AnR

      IF NOT lt_bseg[] IS INITIAL.
        CALL FUNCTION 'WRITE_FORM'
          EXPORTING
            element = 'DOWNPAYMENT_NOT_RECEIVED_TITLE'
          EXCEPTIONS
            element = 1
            window  = 2.
        IF sy-subrc NE 0.
          PERFORM protocol_update.
        ENDIF.
        CLEAR: gv_dpamt_nrcv_tol, gv_dptax_nrcv_tol.
        LOOP AT lt_bkpf.
          CLEAR: lv_dpamt, gv_dpamt_nrcv,gv_dptax_nrcv, gv_fkdat, gv_dprnr.
*  begin of change AO-Sam/30.06.2009/VN.1.7 -----------------------*
          IF lt_bkpf-blart <> 'UE'.
            gv_dprnr = lt_bkpf-belnr.   "Get IV no. from acct. doc. no.(for Normal DP)
          ENDIF.
          gv_fkdat = lt_bkpf-bldat.   "Get IV date from acct. doc. date(for Normal DP & migrate DP both)
*  end of change AO-Sam/30.06.2009/VN.1.7   -----------------------*
          LOOP AT lt_bseg WHERE belnr EQ lt_bkpf-belnr.
*  begin of change AO-Sam/30.06.2009/VN.1.7 -----------------------*
            IF lt_bkpf-blart = 'UE'. " for Migrate DP
              gv_dprnr = lt_bseg-sgtxt(7). "Get IV no. form acct. doc item text
            ENDIF.
*  end of change AO-Sam/30.06.2009/VN.1.7   -----------------------*
            lv_dpamt = lt_bseg-wrbtr - lt_bseg-wmwst.
            gv_dpamt_nrcv = gv_dpamt_nrcv + lv_dpamt.       "Sum DP net amount not received(each doc.)
            gv_dptax_nrcv = gv_dptax_nrcv + lt_bseg-wmwst.  "Sum DP tax amount not received
          ENDLOOP.
          IF sy-subrc = 0.
*            CLEAR: GV_FKDAT, GV_DPRNR.
**  begin of change AO-Sam/30.06.2009/VN.1.7 -----------------------*
*            GV_FKDAT = LT_BKPF-BLDAT.   "Get IV date from acct. doc. date
**  end of change AO-Sam/30.06.2009/VN.1.7   -----------------------*
            CALL FUNCTION 'WRITE_FORM'
              EXPORTING
                element = 'DOWNPAYMENT_NOT_RECEIVED_VALUE'
              EXCEPTIONS
                element = 1
                window  = 2.
            IF sy-subrc NE 0.
              PERFORM protocol_update.
            ENDIF.
            gv_dpamt_nrcv_tol = gv_dpamt_nrcv_tol + gv_dpamt_nrcv. "Total DP net amount not received
            gv_dptax_nrcv_tol = gv_dptax_nrcv_tol + gv_dptax_nrcv. "Total DP tax amount not received
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDIF.
*  begin of change AO-Sam/30.06.2009/VN.1.7 -----------------------*
* 2. Get normal DP
*    CLEAR: LT_BKPF, LT_BSEG, LT_BKPF[], LT_BSEG[].
*    SELECT * FROM BKPF    "Checking related acct. doc.(Noted items)
*             INTO CORRESPONDING FIELDS OF TABLE LT_BKPF
*            WHERE XBLNR = VBDKR-VBELN_VAUF
*              AND BSTAT = 'S'
*              AND BUKRS = VBDKR-VKORG
*         ORDER BY BELNR.
*    IF NOT LT_BKPF[] IS INITIAL.
*      SELECT * FROM BSEG    "Get line items
*               INTO CORRESPONDING FIELDS OF TABLE LT_BSEG
*                FOR ALL ENTRIES IN LT_BKPF
*              WHERE BELNR = LT_BKPF-BELNR
*                AND BUKRS = LT_BKPF-BUKRS
*                AND AUGBL = SPACE.
*      IF NOT LT_BSEG[] IS INITIAL.
*        CLEAR: GV_DPAMT_NRCV_TOL, GV_DPTAX_NRCV_TOL.
*        LOOP AT LT_BKPF.
*          CLEAR: LV_DPAMT, GV_DPAMT_NRCV,GV_DPTAX_NRCV, GV_FKDAT, GV_DPRNR.
*          LOOP AT LT_BSEG WHERE BELNR EQ LT_BKPF-BELNR.
*            LV_DPAMT = LT_BSEG-WRBTR - LT_BSEG-WMWST.
*            GV_DPAMT_NRCV = GV_DPAMT_NRCV + LV_DPAMT.       "Sum DP net amount not received(each doc.)
*            GV_DPTAX_NRCV = GV_DPTAX_NRCV + LT_BSEG-WMWST.  "Sum DP tax amount not received
*          ENDLOOP.
*          IF SY-SUBRC = 0.
*            CLEAR: GV_FKDAT, GV_DPRNR.
*            GV_DPRNR = LT_BKPF-BELNR.   "Get IV no. from acct. doc. no.
*            GV_FKDAT = LT_BKPF-BLDAT.   "Get IV date from acct. doc. date
*            CALL FUNCTION 'WRITE_FORM'
*              EXPORTING
*                ELEMENT = 'DOWNPAYMENT_NOT_RECEIVED_VALUE'
*              EXCEPTIONS
*                ELEMENT = 1
*                WINDOW  = 2.
*            IF SY-SUBRC NE 0.
*              PERFORM PROTOCOL_UPDATE.
*            ENDIF.
*            GV_DPAMT_NRCV_TOL = GV_DPAMT_NRCV_TOL + GV_DPAMT_NRCV. "Total DP net amount not received
*            GV_DPTAX_NRCV_TOL = GV_DPTAX_NRCV_TOL + GV_DPTAX_NRCV. "Total DP tax amount not received
*          ENDIF.
*        ENDLOOP.
*      ENDIF.
*    ENDIF.
*  end of change AO-Sam/30.06.2009/VN.1.7   -----------------------*
    CLEAR: gv_dpend, gv_dpmws_end, gv_tolat.
* Net amount to be paid = item net total - Net DP received - Net DP not received
*--> GeB 06072011 I28200
    gv_dpend = vbdkr-netwr - vbdkr-dpnet - gv_dpamt_nrcv_tol.
*    gv_dpend = gv_netamt_sum - vbdkr-dpnet - gv_dpamt_nrcv_tol.
*--> GeB 06072011 I28200

* Tax amount to be paid = total item tax amount - DP tax amount received - DP tax amount not received
    gv_dpmws_end = gv_taxamt_sum - gv_dptax_amt - gv_dptax_nrcv_tol.
* Total amount to be paid

*  IF vbdkr-vkorg <> 3200.
    gv_tolat = gv_dpend + gv_dpmws_end.
*  ELSE.
*    gv_tolat = komp-netwr + komp-mwsbp.
*  ENDIF.

* Begin of Insert TULARAJ-CEDK961813-Project Bahrine
    IF vbdkr-vkorg = '3600'.
      gv_dpend_doc_curr     = ( gv_dpend * vbrk-kurrf ).    "Remaining amount to be paid before vat(BHD)
      gv_dpmws_end_doc_curr = ( gv_dpmws_end * vbrk-kurrf )."VAT(BHD)
      gv_tolat_doc_curr     = ( gv_tolat * vbrk-kurrf ).    "Remaining amount after VAT(BHD)
    ENDIF.
* End of Insert TULARAJ-CEDK961813-Project Bahrine
* Begin of change ORI-MULTANI/11.04.2011/VN.2.3   -----------------------*
  ENDIF.
* End of change ORI-MULTANI/11.04.2011/VN.2.3   -----------------------*

* start of change ORI-TIBREWAL/18.01.2011/VN.2.1   -----------------------*

* Begin of Change YASH-CHITTA 09.08.2013
* Remove hardcoding for Sales org.
*  IF vbdkr-vkorg = '3200'.
  IF  r_vkorg_ctin IS NOT INITIAL
  AND vbdkr-vkorg  IN r_vkorg_ctin.                         " '3200'.
* End of Change YASH-CHITTA 09.08.2013

* Get Condition type for excise duty
    CALL FUNCTION 'ZGL_TECH_PARAM'
      EXPORTING
        im_progname   = lc_program_ctin
      CHANGING
        ch_params     = lt_params
      EXCEPTIONS
        novaluesfound = 1
        OTHERS        = 2.

    IF sy-subrc <> 0.
      CLEAR: lt_params.

    ELSE.
      PERFORM f_get_tax USING lt_params
                              lc_excise
                        CHANGING gv_excise_tax.

* Begin of replacement logic ZEN-JUTURU / 08.01.2015 / CHG3012303 .

*      PERFORM f_get_tax USING lt_params
*                              lc_serv_tax
*                        CHANGING gv_serv_tax

      PERFORM f_get_service_tax USING lt_params
                                      lc_serv_tax
                                CHANGING gv_serv_tax
                                         gv_cess.

* End of replacement logic ZEN-JUTURU / 08.01.2015 / CHG3012303 .


    ENDIF.
* convert excise into words
    CLEAR gv_taxwrds_exc.
    PERFORM f_convert_into_words USING    gv_excise_tax
                               CHANGING gv_taxwrds_exc.
    CONCATENATE gv_taxwrds_exc 'Only' INTO gv_taxwrds_exc
    SEPARATED BY space.

* convert service tax into words

    CLEAR gv_taxwrds_st.

* Begin of replacement logic ZEN-JUTURU / 08.01.2015 / CHG3012303 .

*    PERFORM f_convert_into_words USING    gv_serv_tax
*                               CHANGING gv_taxwrds_st.
*   concatenate gv_taxwrds_st 'Only' INTO gv_taxwrds_st
*   SEPARATED BY space.

    PERFORM f_convert_into_words USING    gv_serv_tax
                                  CHANGING gv_staxwd.

    PERFORM f_convert_into_words USING gv_cess
                              CHANGING gv_cesswd.

    CONCATENATE gv_staxwd 'only and SB Cess' gv_cesswd 'only' INTO gv_taxwrds_st SEPARATED BY space.

* End of replacement logic ZEN-JUTURU / 08.01.2015 / CHG3012303 .

* convert total amount in words.
    PERFORM f_convert_into_words USING    gv_netamt_sum
                               CHANGING gv_words.
    CLEAR gv_totwrds.
    CONCATENATE gv_words 'Only' INTO gv_totwrds
    SEPARATED BY space.
  ENDIF.
* end of change ORI-TIBREWAL/18.01.2011/VN.2.1   -----------------------*

* Call final amount after DP
  CALL FUNCTION 'WRITE_FORM'
    EXPORTING
      element = 'FINALAMT_AFTER_DOWNPAYMENT'
    EXCEPTIONS
      element = 1
      window  = 2.
  IF sy-subrc NE 0.

    PERFORM protocol_update.
  ENDIF.


* Begin of change ORI-MULTANI/11.04.2011/VN.2.3   -----------------------*
*For Sales org 3200 the requirement is to list down all DPRS which are cleared
* Begin of Change YASH-CHITTA 09.08.2013
* Remove hardcoding for Sales org.
*  IF vbdkr-vkorg = '3200' AND vbdkr-fkart = 'F2'.
  IF ( vbdkr-vkorg  IN r_vkorg_ctin                         " '3200'
  AND  r_vkorg_ctin IS NOT INITIAL )
  AND vbdkr-fkart   EQ 'F2'.
* End of Change YASH-CHITTA 09.08.2013
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = vbdkr-vbeln_vauf
      IMPORTING
        output = lv_key5.
* 1.Get migrate DP.
    SELECT SINGLE key3 FROM ytab_map  "Get old SO no.
                       INTO lv_key3
                      WHERE key5 = lv_key5
                        AND key2 = 'IMG_PROJ'.
    IF sy-subrc = 0.
      SELECT * FROM bkpf    "Checking related acct. doc.(Noted items)
               INTO CORRESPONDING FIELDS OF TABLE lt_bkpf
              WHERE bktxt = lv_key3
                AND bstat = 'S'
                AND bukrs = vbdkr-vkorg
           ORDER BY belnr.
    ENDIF.

* 2. Get normal DP
    SELECT * FROM bkpf    "Checking related acct. doc.(Noted items)
        APPENDING CORRESPONDING FIELDS OF TABLE lt_bkpf
            WHERE xblnr = vbdkr-vbeln_vauf
              AND bstat = 'S'
              AND bukrs = vbdkr-vkorg
         ORDER BY belnr.
*  end of change AO-Sam/30.06.2009/VN.1.7   -----------------------*

    IF NOT lt_bkpf[] IS INITIAL.

* Pick all the line items which are cleared
      SELECT * FROM bseg    "Get line items
               INTO CORRESPONDING FIELDS OF TABLE lt_bseg
                FOR ALL ENTRIES IN lt_bkpf
              WHERE belnr = lt_bkpf-belnr
                AND bukrs = lt_bkpf-bukrs
                AND augbl <> space.

      IF lt_bseg[] IS NOT INITIAL.

* Get clearing document header details
        SELECT bukrs
               belnr
               gjahr
               blart
               bldat
               budat
               xblnr
               bstat
          INTO TABLE lt_bkpf_clr
          FROM bkpf
          FOR ALL ENTRIES IN lt_bseg
          WHERE bukrs = lt_bseg-bukrs
            AND belnr = lt_bseg-augbl
            AND budat = lt_bseg-augdt.

        IF lt_bkpf_clr IS NOT INITIAL.

* Get all items for clearing document which are having indicator Downpayment
          SELECT bukrs
                 belnr
                 gjahr
                 umskz
                 wrbtr
            INTO TABLE lt_bseg_clr
            FROM bseg
            FOR ALL ENTRIES IN lt_bkpf_clr
            WHERE bukrs = lt_bkpf_clr-bukrs
              AND belnr = lt_bkpf_clr-belnr
              AND gjahr =  lt_bkpf_clr-gjahr
              AND umskz = 'A'.

        ENDIF.
      ENDIF.
    ENDIF.

* Now LT_BSEG_CLR contains all downpayment which are recieved and cleared by finance
    LOOP AT lt_bseg_clr INTO w_bseg_clr.

      gv_wrbtr = w_bseg_clr-wrbtr.

      LOOP AT lt_bseg WHERE augbl = w_bseg_clr-belnr.
        gv_belnr = lt_bseg-belnr.
        EXIT.
      ENDLOOP.

      AT FIRST.

        CALL FUNCTION 'CONTROL_FORM'
          EXPORTING
            command = 'PROTECT'.

        CALL FUNCTION 'WRITE_FORM'
          EXPORTING
            element = 'DPR_HEADING'
          EXCEPTIONS
            element = 1
            window  = 2.
        IF sy-subrc NE 0.
          PERFORM protocol_update.
        ENDIF.

        CALL FUNCTION 'WRITE_FORM'
          EXPORTING
            element = 'DPR_ITEMS'
          EXCEPTIONS
            element = 1
            window  = 2.
        IF sy-subrc NE 0.
          PERFORM protocol_update.
        ENDIF.

        CALL FUNCTION 'CONTROL_FORM'
          EXPORTING
            command = 'ENDPROTECT'.

        CALL FUNCTION 'WRITE_FORM'
          EXPORTING
            element = 'DPR_HEADING'
            type    = 'TOP'
          EXCEPTIONS
            element = 1
            window  = 2.
        IF sy-subrc NE 0.
          PERFORM protocol_update.
        ENDIF.

        lv_flag = 'X'.
      ENDAT.

      IF lv_flag IS INITIAL.
        CALL FUNCTION 'WRITE_FORM'
          EXPORTING
            element = 'DPR_ITEMS'
          EXCEPTIONS
            element = 1
            window  = 2.
        IF sy-subrc NE 0.
          PERFORM protocol_update.
        ENDIF.
      ELSE.
        CLEAR lv_flag.
      ENDIF.

      AT LAST.

        CALL FUNCTION 'WRITE_FORM'
          EXPORTING
            element  = 'DPR_HEADING'
            function = 'DELETE'
            type     = 'TOP'
          EXCEPTIONS
            element  = 1
            window   = 2.
        IF sy-subrc NE 0.

          PERFORM protocol_update.
        ENDIF.
      ENDAT.

    ENDLOOP.
  ENDIF.


* Print service text
  CALL FUNCTION 'WRITE_FORM'
    EXPORTING
      element = 'SERVICE_TEXT'
    EXCEPTIONS
      element = 1
      window  = 2.
  IF sy-subrc NE 0.

    PERFORM protocol_update.
  ENDIF.
* End of change ORI-MULTANI/11.04.2011/VN.2.3   -----------------------*
* Begin CR 1837 Vkorg want's this also AnR 12.11.09
*  ELSE.
**end of change AO-Sam/21.04.2009/VN.1.6   -----------------------*
*    CALL FUNCTION 'WRITE_FORM'
*      EXPORTING
*        element = 'DOWNPAYMENT_VALUE'
*      EXCEPTIONS
*        element = 1
*        window  = 2.
*    IF sy-subrc NE 0.
*      PERFORM protocol_update.
*    ENDIF.
*begin of change AO-Sam/21.04.2009/VN.1.6 -----------------------*
*  ENDIF.
*end of change AO-Sam/21.04.2009/VN.1.6   -----------------------*
* end CR 1837 Vkorg want's this also AnR 12.11.09
ENDFORM.                               " DOWNPAYMENT_INFO

*&---------------------------------------------------------------------*
*&      Form  PAYMENTCARD_VALUES
*&---------------------------------------------------------------------*
*       Print Payment Cards
*----------------------------------------------------------------------*
*  -->  VBDKR Header
*----------------------------------------------------------------------*
FORM paymentcard_values.

  DATA: da_xfplt LIKE fpltvb OCCURS 2 WITH HEADER LINE. " Cards

  IF NOT vbdkr-rplnr IS INITIAL.
* Read from the Database
    CALL FUNCTION 'BILLING_SCHEDULE_READ'
      EXPORTING
        fplnr         = vbdkr-rplnr
      TABLES
        zfplt         = da_xfplt
      EXCEPTIONS
        error_message = 0
        OTHERS        = 0.
* Loop at Cards
    LOOP AT da_xfplt.
      MOVE-CORRESPONDING da_xfplt TO fpltvb.
* Get text
      IF da_xfplt-ccins NE tvcint-ccins.
        SELECT SINGLE * FROM tvcint
               WHERE spras = vbco3-spras
               AND   ccins = da_xfplt-ccins.
        IF sy-subrc =  0.
          ccname = tvcint-vtext.
        ELSE.
          ccname = da_xfplt-ccins.
        ENDIF.
      ENDIF.
      CALL FUNCTION 'WRITE_FORM'
        EXPORTING
          element = 'PAYMENTCARDS'
        EXCEPTIONS
          element = 1
          window  = 2.
      IF sy-subrc NE 0.
        PERFORM protocol_update.
      ENDIF.
      ADD da_xfplt-fakwr TO vbdkr-ccval.
    ENDLOOP.
    IF da_xfplt-fakwr NE vbdkr-ccval.
      CALL FUNCTION 'WRITE_FORM'
        EXPORTING
          element = 'PAYMENTCARD_SUM'
        EXCEPTIONS
          element = 1
          window  = 2.
      IF sy-subrc NE 0.
        PERFORM protocol_update.
      ENDIF.
    ENDIF.
  ENDIF.
ENDFORM.                       "PAYMENTCARD_VALUES
*&---------------------------------------------------------------------*
*&      Form  GET_DOWNPAYMENT_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_downpayment_data .
*     Lesen der für die Kundenfaktura zu verrechnenden Anzahlung.

*     Can there be a head office?
  CASE vbdkr-xfilkd.
*       Ordering party
    WHEN chara.
      IF vbdkr-knkli IS INITIAL OR
         vbdkr-knkli EQ vbdkr-kunag.
        da_xfilkd = vbdkr-xfilkd.
      ENDIF.
*       Payer
    WHEN charb.
      da_xfilkd = vbdkr-xfilkd.
  ENDCASE.

*     Setzen der Belegnummer
  IF NOT vbdpr-vbelv IS INITIAL.
    gt_sdaccdpc_doc-vbeln = vbdpr-vbelv.
    gt_sdaccdpc_doc-posnr = vbdpr-posnv.
  ELSE.
    gt_sdaccdpc_doc-vbeln = vbdpr-vbeln_vauf.
    gt_sdaccdpc_doc-posnr = vbdpr-posnr_vauf.
  ENDIF.
  APPEND gt_sdaccdpc_doc.

  CLEAR: ixsdaccdpc[].
  CALL FUNCTION 'SD_DOWNPAYMENT_READ'
    EXPORTING
      i_waerk           = vbdkr-waerk
      i_bukrs           = vbdkr-bukrs
      i_kunnr           = vbdkr-kunrg
      i_vbel2           = gt_sdaccdpc_doc-vbeln
      i_vbeln           = vbdkr-vbeln
      i_sfakn           = vbdkr-sfakn
      i_xfilkd          = da_xfilkd
      i_gesanz          = 'X'
    TABLES
      t_sdaccdpc        = ixsdaccdpc
    CHANGING
      c_downpay_refresh = downpay_refresh
    EXCEPTIONS
      no_downpayments   = 1
      in_downpayments   = 2
      OTHERS            = 3.


ENDFORM.                    " GET_DOWNPAYMENT_DATA
*&---------------------------------------------------------------------*
*&      Form  DOWNPAYMENTS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM downpayments .

  SORT gt_sdaccdpc_doc BY vbeln posnr.
  DELETE ADJACENT DUPLICATES FROM gt_sdaccdpc_doc.

  LOOP AT ixsdaccdpc.
    READ TABLE gt_sdaccdpc_doc WITH KEY vbeln = ixsdaccdpc-vgbel
                                        posnr = ixsdaccdpc-vgpos
                                        BINARY SEARCH.
    IF NOT sy-subrc IS INITIAL.
      DELETE ixsdaccdpc.
    ENDIF.
  ENDLOOP.

  LOOP AT ixsdaccdpc.
    sdaccdpc = ixsdaccdpc.

    AT FIRST.
      CALL FUNCTION 'CONTROL_FORM'
        EXPORTING
          command = 'PROTECT'.
      CALL FUNCTION 'WRITE_FORM'
        EXPORTING
          element = 'TERMS_OF_DOWNPAYMENT_HEADER'.
      IF sy-subrc NE 0.
        PERFORM protocol_update.
      ENDIF.
    ENDAT.

    CALL FUNCTION 'WRITE_FORM'
      EXPORTING
        element = 'TERMS_OF_DOWNPAYMENTS'
      EXCEPTIONS
        element = 1
        window  = 2.
    IF sy-subrc NE 0.
      PERFORM protocol_update.
    ENDIF.

    AT LAST.
      CALL FUNCTION 'CONTROL_FORM'
        EXPORTING
          command = 'ENDPROTECT'.
    ENDAT.
  ENDLOOP.
ENDFORM.                    " DOWNPAYMENTS

*&---------------------------------------------------------------------*
*&      Form  get_fax_land
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_NAST_TLAND  text
*----------------------------------------------------------------------*
FORM get_fax_land USING   p_nast_land LIKE nast-tland.

  DATA  l_land    LIKE nast-tland .
  CLEAR l_land.

  IF NOT addr_key-addrnumber IS INITIAL.
    CALL FUNCTION 'WFMC_FAXNUMBER_FOR_ADDRESS'
      EXPORTING
        adrnr          = addr_key-addrnumber
      IMPORTING
        tland          = l_land
      EXCEPTIONS
        addr_not_exist = 1
        OTHERS         = 2.
    IF sy-subrc = 0 AND NOT l_land IS INITIAL.
      p_nast_land = l_land.
    ENDIF.

  ENDIF.
ENDFORM.                    " get_fax_land

*ENHANCEMENT-POINT RVADIN01_02 SPOTS ES_RVADIN01 STATIC.

*ENHANCEMENT-POINT RVADIN01_03 SPOTS ES_RVADIN01 STATIC.
*&---------------------------------------------------------------------*
*&      Form  add_summary
*&---------------------------------------------------------------------*
*       Procedure is responsible for printing additional information
*       1.6	Further extension to the invoice if order type was KE.
*----------------------------------------------------------------------*
FORM add_summary .

  PERFORM get_data_for_summary.

  IF NOT gt_con_sum[] IS INITIAL.
* Switch to the new page
    CALL FUNCTION 'CONTROL_FORM'
      EXPORTING
        command = 'NEW-PAGE'.
*          command = 'NEW-PAGE SUMMARY'.

    PERFORM print_summary.

  ENDIF.
ENDFORM.                    " add_summary
*&---------------------------------------------------------------------*
*&      Form  GET_DATA_FOR_SUMMARY
*&---------------------------------------------------------------------*
*       Gets data for the summary of the invoice (1.6)
*----------------------------------------------------------------------*
FORM get_data_for_summary .

  DATA: lv_vbeln_last     TYPE vbeln_vl,
        lv_to_be_appended TYPE xfeld,
        lv_add_mat_text   TYPE xfeld,
        lv_mat_no_added   TYPE xfeld.

  CLEAR: gt_con_sum[].

  CLEAR: gt_lips[], gt_vbap[], gt_vbrp[],
         gt_vbfa[], gt_lips2[], gt_lips3[], gt_likp[],
         gt_likp2[], gt_likp3[], gt_vbfa2[],
         gt_vbfa3[], gt_vbfa4[], gt_vbfa5[],
         gt_vbfa6[], gt_vbap2[], gt_vbrp[].

  CLEAR: vbrp.

* 1.find the delivery number (is also used in the list as issued (number 6 in the fig.2))
* the delivery number is stored in VBRP-VGBEL/VGPOS 80000373 is found
* theoretically it is possible to have different deliveries for every item.
* But it should not happen and we take only the first item into consideration
** ---> Read all positions of the invoice
  SELECT * FROM vbrp INTO TABLE gt_vbrp WHERE vbeln = vbrk-vbeln.
  IF sy-subrc = 0.
* ---> Get first delivery
    READ TABLE gt_vbrp INTO vbrp WITH KEY vbeln = vbrk-vbeln
                                          posnr = c_posnr_1.
    IF sy-subrc <> 0.
      READ TABLE gt_vbrp INTO vbrp INDEX 1.
    ENDIF.
    "mohan start
    DATA : gv_prctr TYPE vbrp-prctr.
    gv_prctr = vbrp-prctr .
    CLEAR gs_con_sum.
    IF NOT gt_vbrp[] IS INITIAL.
*   2.find the KE order number with LIPS-VGBEL/VGPOS è 10000208 is found
*   for the summary this has to be done on the item/material level
      CLEAR: lips.
      CLEAR: gs_con_sum.
      SELECT SINGLE * FROM lips WHERE vbeln = vbrp-vgbel.
      IF sy-subrc = 0.

* Check, whether the order is KE type
        SELECT SINGLE * FROM vbak WHERE vbeln = lips-vgbel
                                    AND auart = cs_auart-ke.
        IF sy-subrc <> 0.
          EXIT.
        ENDIF.
*   3.  with this KE order you can find the KB order with the document flow table VBFA
*   VBFA-VBELN = 10000208, result = 10000207. ....
        CLEAR: vbfa.
* Begin 16.01.2008
*        SELECT SINGLE * FROM vbfa WHERE vbeln = lips-vgbel.
*        SELECT SINGLE vbfa~vbelv vbfa~vbeln FROM vbfa
        SELECT SINGLE vbfa~vbelv vbfa~posnv vbfa~vbeln vbfa~posnn FROM vbfa
          INNER JOIN vbak
            ON vbfa~vbelv = vbak~vbeln
              INTO CORRESPONDING FIELDS OF vbfa
          WHERE vbfa~vbeln = lips-vgbel
            AND vbak~auart = cs_auart-kb.
* End 16.01.2008
        IF sy-subrc = 0.
*          ... double check if really a KB order with VBAK-AUART = KB.
          CLEAR: vbak.
*   Case 1 - KB Order (get data from DB)
          SELECT SINGLE * FROM vbak WHERE vbeln = vbfa-vbelv.
          IF vbak-auart = cs_auart-kb. " Proceed further
*   Case 1 - KB Order, get deliveries GET related to the kb order deliveries (1 case - c.  d.) (get data from DB)
            CLEAR gt_likp[].
            SELECT * FROM vbfa INTO TABLE gt_vbfa
            WHERE vbelv = vbak-vbeln
            AND vbtyp_n = c_vbtyp_n_j
            AND stufe  =  c_stufe_0.
            IF sy-subrc = 0.
              SORT gt_vbfa BY vbeln.
              IF NOT gt_vbfa[] IS INITIAL.
                SELECT * FROM likp INTO TABLE gt_likp FOR ALL ENTRIES IN gt_vbfa
                  WHERE vbeln = gt_vbfa-vbeln.
                SELECT * FROM lips INTO TABLE gt_lips FOR ALL ENTRIES IN gt_vbfa
                  WHERE vbeln = gt_vbfa-vbeln
                    AND posnr = gt_vbfa-posnn.
              ENDIF.
            ENDIF.
          ENDIF.
* Case 2 - KA Order (more than 1) (get data from DB) ...
          CLEAR: ls_vbfa, gt_vbfa2[], gt_vbap2[], gt_vbfa3[].
          SELECT va~vbelv va~posnv va~vbeln va~posnn va~vbtyp_v FROM vbfa AS va
            JOIN vbak AS vb
              ON vb~vbeln = va~vbeln
              INTO CORRESPONDING FIELDS OF TABLE gt_vbfa2
           WHERE va~vbelv = vbak-vbeln
             AND va~vbtyp_v = c_vbtyp_v_c
             AND vb~auart = cs_auart-ka.
          IF sy-subrc = 0.

            SORT gt_vbfa2 BY vbeln posnn.
            DELETE ADJACENT DUPLICATES FROM gt_vbfa2 COMPARING vbeln posnn.
* ... get order positions
            SELECT * FROM vbap
              INTO TABLE gt_vbap2
                FOR ALL ENTRIES IN gt_vbfa2
                  WHERE vbeln = gt_vbfa2-vbeln.
* ... get deliveries
            SELECT * FROM vbfa
              INTO TABLE gt_vbfa3
                FOR ALL ENTRIES IN gt_vbfa2
                  WHERE vbelv = gt_vbfa2-vbeln
                    AND vbtyp_n = c_vbtyp_n_t
                    AND stufe = c_stufe_00.
            IF sy-subrc = 0.
              SELECT * FROM likp
                INTO TABLE gt_likp2
                  FOR ALL ENTRIES IN gt_vbfa3
                    WHERE vbeln = gt_vbfa3-vbeln.
              SELECT * FROM lips
                INTO TABLE gt_lips2
                  FOR ALL ENTRIES IN gt_vbfa3
                    WHERE vbeln = gt_vbfa3-vbeln
                      AND posnr = gt_vbfa3-posnn.
            ENDIF.
          ENDIF.
* Case 3 - Get deliveries for the current invoice
          IF NOT gt_vbrp[] IS INITIAL.
            SELECT * FROM vbfa
              INTO TABLE gt_vbfa6
                FOR ALL ENTRIES IN gt_vbrp
                  WHERE vbeln = gt_vbrp-vbeln
                    AND posnn = gt_vbrp-posnr
                    AND vbtyp_v = c_vbtyp_v_j.
            IF sy-subrc = 0.
              SELECT * FROM likp
                INTO TABLE gt_likp3
                  FOR ALL ENTRIES IN gt_vbfa6
                    WHERE vbeln = gt_vbfa6-vbelv.
              SELECT * FROM lips
                INTO TABLE gt_lips3
                  FOR ALL ENTRIES IN gt_vbfa6
                    WHERE vbeln = gt_vbfa6-vbelv
                      AND posnr = gt_vbfa6-posnv.
            ENDIF.
          ENDIF.

* Case 2 - KA Order (Get corresponding deliveries) (get data from DB)

*   VBAK-VBELN is initial order. Take all materials.
          SELECT * FROM vbap INTO TABLE gt_vbap WHERE vbeln = vbak-vbeln.
          IF sy-subrc = 0.
*... List of materials available in VBAP-MATNR (1), VBAP-ARKTX (2)
            LOOP AT gt_vbrp INTO vbrp.
              CLEAR: gs_con_sum.
              CLEAR: lv_mat_no_added.
              CLEAR: lv_add_mat_text.                       "04.01.2007
              gs_con_sum-matnr = vbrp-matnr. "(1)
*              gs_con_sum-arktx = vbrp-arktx. "(2)
              gs_con_sum-arktx = vbrp-arktx(20). "(2)
*  Determine all positions in VBAP for the current material ...
              CLEAR: lv_vbeln_last.
*   Case 1 - KB Order
              LOOP AT gt_vbap INTO vbap WHERE matnr = vbrp-matnr.
                CLEAR: lv_to_be_appended.
*  ... and corresponding delivery(ies) for those position
*   Case 1 - KB Order, get deliveries GET related to the kb order deliveries (1 case - c.  d.)
                READ TABLE gt_vbfa INTO vbfa WITH KEY vbelv = vbap-vbeln
                                                      posnv = vbap-posnr.
                IF sy-subrc = 0.
                  READ TABLE gt_likp INTO likp WITH KEY vbeln = vbfa-vbeln.
                  IF sy-subrc = 0.
                    IF likp-vbeln <> lv_vbeln_last.
                      IF NOT lv_vbeln_last IS INITIAL.
                        APPEND gs_con_sum TO gt_con_sum.
                        lv_add_mat_text = c_true.
                        lv_mat_no_added = c_true.
                        CLEAR: gs_con_sum-matnr,gs_con_sum-arktx.
                        CLEAR: lv_to_be_appended.
                      ENDIF.
* Check, whether the delivery item is returnable
                      READ TABLE gt_lips WITH KEY vbeln = vbfa-vbeln
                                                  posnr = vbfa-posnn
                                                  pstyv = c_pstyv_zkbn  TRANSPORTING NO FIELDS.
                      IF sy-subrc = 0.
                        gs_con_sum-non_return = c_true.
                      ELSE.
                        CLEAR: gs_con_sum-non_return.
                      ENDIF.
                      gs_con_sum-wadat_ist = likp-wadat_ist. "(3)
                      gs_con_sum-vbeln = likp-vbeln. "(7)
                      gs_con_sum-kwmeng_del = vbap-kwmeng. "(4)
* Extension for material text in one line - 04.01.2007
                      IF NOT lv_add_mat_text IS INITIAL.
                        IF vbrp-arktx+20(20) <> ''.
                          gs_con_sum-arktx = vbrp-arktx+20(20). "(2) " 04.01.2007
                          CLEAR: vbrp-arktx.
                        ENDIF.
                      ENDIF.
* Extension for material text in one line - 04.01.2007
                      lv_to_be_appended = c_true.
                    ELSE.
                      lv_to_be_appended = c_true.
                      gs_con_sum-kwmeng_del = gs_con_sum-kwmeng_del + vbap-kwmeng. "(4)
                    ENDIF.
                    lv_vbeln_last = likp-vbeln.
                  ENDIF.
                ENDIF.
              ENDLOOP.
              IF lv_to_be_appended = c_true.
                APPEND gs_con_sum TO gt_con_sum.
                CLEAR: lv_vbeln_last." ! 04.01.2008
                lv_add_mat_text = c_true.
                lv_mat_no_added = c_true.
                CLEAR: gs_con_sum-matnr,gs_con_sum-arktx.
                CLEAR: lv_to_be_appended.
              ENDIF.
* Case 2 - KA Order (more than 1)
              IF NOT lv_mat_no_added IS INITIAL.
                CLEAR: gs_con_sum.
              ELSE.
                CLEAR: gs_con_sum-wadat_ist,
                       gs_con_sum-kwmeng_del,
                       gs_con_sum-kwmeng_ret,
                       gs_con_sum-fkimg,
                       gs_con_sum-vbeln,
                       gs_con_sum-non_return.
              ENDIF.
              CLEAR: lv_vbeln_last.
              LOOP AT gt_vbap2 INTO vbap WHERE matnr = vbrp-matnr.
                CLEAR: lv_to_be_appended.
                gt_vbfa4[] = gt_vbfa3[].
                CLEAR: gt_vbfa5[].
* ... Get corresponding deliveries - only related to the current material
                LOOP AT gt_vbfa2 INTO vbfa WHERE vbeln = vbap-vbeln
                                             AND posnn = vbap-posnr. " !!
                  DELETE gt_vbfa4 WHERE vbelv <> vbfa-vbeln OR posnv <> vbfa-posnn .
                  IF NOT gt_vbfa4[] IS INITIAL.
                    APPEND LINES OF gt_vbfa4[] TO gt_vbfa5[].
                  ENDIF.
                ENDLOOP.
                IF NOT gt_vbfa5[] IS INITIAL.
                  SORT gt_vbfa5 BY vbeln posnn.
                  DELETE ADJACENT DUPLICATES FROM gt_vbfa5 COMPARING vbeln posnn.
* ... gt_vbfa5-vbelv contains all related deliveries to the current material vbrp-matnr.
                  LOOP AT gt_vbfa5 INTO vbfa.
                    READ TABLE gt_likp2 INTO likp WITH KEY vbeln = vbfa-vbeln.
                    IF sy-subrc = 0.
                      IF likp-vbeln <> lv_vbeln_last.
                        IF NOT lv_vbeln_last IS INITIAL.
                          APPEND gs_con_sum TO gt_con_sum.
                          lv_add_mat_text = c_true.         "04.01.2008
                          lv_mat_no_added = c_true.
*                          CLEAR: gs_con_sum-matnr,gs_con_sum-arktx.
                          CLEAR: lv_to_be_appended.
                        ENDIF.
*   Check, whether the delivery item is returnable
                        READ TABLE gt_lips2 WITH KEY vbeln = vbfa-vbeln
                                                    posnr = vbfa-posnn
                                                    pstyv = c_pstyv_zkbn  TRANSPORTING NO FIELDS.
                        IF sy-subrc = 0.
                          gs_con_sum-non_return = c_true.
                        ELSE.
                          CLEAR: gs_con_sum-non_return.
                        ENDIF.

                        gs_con_sum-wadat_ist = likp-wadat_ist. "(3)
                        gs_con_sum-vbeln = likp-vbeln. "(7)
                        gs_con_sum-kwmeng_ret = vbap-kwmeng. "(5)
* Extension for material text in one line - 04.01.2007
                        IF NOT lv_add_mat_text IS INITIAL.
                          IF vbrp-arktx+20(20) <> ''.
                            gs_con_sum-arktx = vbrp-arktx+20(20). "(2) " 04.01.2007
                            CLEAR: vbrp-arktx.
                          ENDIF.
                        ENDIF.
* Extension for material text in one line - 04.01.2007
                        lv_to_be_appended = c_true.
                      ELSE.
                        lv_to_be_appended = c_true.
                        gs_con_sum-kwmeng_ret = gs_con_sum-kwmeng_ret + vbap-kwmeng. "(4)
                      ENDIF.
                      lv_vbeln_last = likp-vbeln.
                    ENDIF.
                  ENDLOOP.
                  IF lv_to_be_appended = c_true.
                    APPEND gs_con_sum TO gt_con_sum.
                    CLEAR: lv_vbeln_last." ! 04.01.2008
                    lv_add_mat_text = c_true.               "04.01.2008
                    lv_mat_no_added = c_true.
                    CLEAR: gs_con_sum-matnr,gs_con_sum-arktx.
                    CLEAR: lv_to_be_appended.
                  ENDIF.
                ENDIF.
              ENDLOOP.
* Case 3 - Issued material quantities (vbrp - current material)....
              IF NOT lv_mat_no_added IS INITIAL.
                CLEAR: gs_con_sum.
              ELSE.
                CLEAR: gs_con_sum-wadat_ist,
                       gs_con_sum-kwmeng_del,
                       gs_con_sum-kwmeng_ret,
                       gs_con_sum-fkimg,
                       gs_con_sum-vbeln,
                       gs_con_sum-non_return.
              ENDIF.
* ... Get deliveries for the current invoice
              READ TABLE gt_vbfa6 INTO vbfa WITH KEY vbeln = vbrp-vbeln
                                                     posnn = vbrp-posnr.
              gs_con_sum-fkimg = vbrp-fkimg. "(6)
              IF sy-subrc = 0.
                READ TABLE gt_likp3 INTO likp WITH KEY vbeln = vbfa-vbelv.
                IF sy-subrc = 0.
                  gs_con_sum-wadat_ist = likp-wadat_ist. "(3)
                  gs_con_sum-vbeln = likp-vbeln. "(7)
* Extension for material text in one line - 04.01.2007
                  IF NOT lv_add_mat_text IS INITIAL.
                    IF vbrp-arktx+20(20) <> ''.
                      gs_con_sum-arktx = vbrp-arktx+20(20). "(2) " 04.01.2007
                      CLEAR: vbrp-arktx.
                    ENDIF.
                  ENDIF.
* Extension for material text in one line - 04.01.2007
                ENDIF.
*  Check, whether the delivery item is returnable
                READ TABLE gt_lips3 WITH KEY vbeln = vbfa-vbelv
                                            posnr = vbfa-posnv
                                            pstyv = c_pstyv_zkbn TRANSPORTING NO FIELDS.
                IF sy-subrc = 0.
                  gs_con_sum-non_return = c_true.
                ELSE.
                  CLEAR: gs_con_sum-non_return.
                ENDIF.
              ENDIF.
              APPEND gs_con_sum TO gt_con_sum.
              lv_add_mat_text = c_true.                     "04.01.2008
              lv_mat_no_added = c_true.
            ENDLOOP.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

* "Post process" the table 4.01.2008
    DATA:  lt_con_sum   TYPE TABLE OF zstr_consign_summary,
           ls_con_sum   TYPE zstr_consign_summary,
           lv_vbeln_lst TYPE vbeln.
*           lv_to_be_appended  TYPE  xfeld.

    FIELD-SYMBOLS: <fs_con_sum>  TYPE zstr_consign_summary.

    lt_con_sum[] = gt_con_sum[].
    CLEAR: gt_con_sum[], lv_vbeln_lst, ls_con_sum, lv_to_be_appended.

* Mail loop over all items
    LOOP AT lt_con_sum ASSIGNING <fs_con_sum>.

* Default assumption - each item has to be appended.
      lv_to_be_appended = c_true.

* Detect, if in the current step the delivery is repeated
      IF NOT lv_vbeln_lst IS INITIAL.
        IF <fs_con_sum>-vbeln = lv_vbeln_lst AND <fs_con_sum>-kwmeng_ret > 0.
*       Do not append.

          CLEAR: lv_to_be_appended.
          ls_con_sum-kwmeng_ret = ls_con_sum-kwmeng_ret + <fs_con_sum>-kwmeng_ret.
        ENDIF.
      ENDIF.

      IF NOT lv_to_be_appended IS INITIAL.
        IF NOT ls_con_sum IS INITIAL.
          APPEND ls_con_sum TO gt_con_sum.
*          CLEAR: lv_to_be_appended.
        ENDIF.
        MOVE-CORRESPONDING <fs_con_sum> TO ls_con_sum.
      ENDIF.

      lv_vbeln_lst = <fs_con_sum>-vbeln.

    ENDLOOP.
    IF NOT lv_to_be_appended IS INITIAL.
      APPEND ls_con_sum TO gt_con_sum.
      CLEAR: lv_to_be_appended.
    ENDIF.

*    lv_to_be_appended = c_true.
*    LOOP AT lt_con_sum ASSIGNING <fs_con_sum>.
*      IF NOT lv_vbeln_lst IS INITIAL.
*        IF <fs_con_sum>-vbeln = lv_vbeln_lst.
**         do not append.
*          CLEAR: lv_to_be_appended.
*          ls_con_sum-kwmeng_ret = ls_con_sum-kwmeng_ret + <fs_con_sum>-kwmeng_ret.
*        ENDIF.
*      ENDIF.
*      IF NOT lv_to_be_appended IS INITIAL.
*        APPEND ls_con_sum TO gt_con_sum.
*        CLEAR: lv_to_be_appended.
*      ENDIF.
*      MOVE-CORRESPONDING <fs_con_sum> TO ls_con_sum.
*      lv_vbeln_lst = <fs_con_sum>-vbeln.
*      lv_to_be_appended = c_true.
*    ENDLOOP.
*    IF NOT lv_to_be_appended IS INITIAL.
*      APPEND ls_con_sum TO gt_con_sum.
*      CLEAR: lv_to_be_appended.
*    ENDIF.
  ENDIF.
ENDFORM.                    " GET_DATA_FOR_SUMMARY
*&---------------------------------------------------------------------*
*&      Form  PRINT_SUMMARY
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*

FORM print_summary .

  PERFORM print_summary_header.
  PERFORM print_summary_items.
  PERFORM print_summary_footer.

ENDFORM.                    " PRINT_SUMMARY
*&---------------------------------------------------------------------*
*&      Form  PRINT_SUMMARY_HEADER
*&---------------------------------------------------------------------*
*       Write header for the summary
*----------------------------------------------------------------------*
FORM print_summary_header .

* Write element
  CALL FUNCTION 'WRITE_FORM'
    EXPORTING
      element = 'SUMMARY_HEADER'.

ENDFORM.                    " PRINT_SUMMARY_HEADER
*&---------------------------------------------------------------------*
*&      Form  PRINT_SUMMARY_FOOTER
*&---------------------------------------------------------------------*
*       Write footer for the summary
*----------------------------------------------------------------------*
FORM print_summary_footer .

* Write element
  CALL FUNCTION 'WRITE_FORM'
    EXPORTING
      element = 'SUMMARY_FOOTER'.

ENDFORM.                    " PRINT_SUMMARY_FOOTER

*&---------------------------------------------------------------------*
*&      Form  PRINT_SUMMARY_ITEMS
*&---------------------------------------------------------------------*
*       Write items for the summary
*----------------------------------------------------------------------*
FORM print_summary_items .

*Set date format for SUMMARY items.
  CALL FUNCTION 'CONTROL_FORM'
    EXPORTING
      command = 'SET DATE MASK = ''DD.MM.YYYY'''.

  LOOP AT gt_con_sum INTO gs_con_sum.
* Write element
    CALL FUNCTION 'WRITE_FORM'
      EXPORTING
        element = 'SUMMARY_ITEM'.
  ENDLOOP.

* Set back the date format.
  CALL FUNCTION 'CONTROL_FORM'
    EXPORTING
      command = 'SET DATE MASK = ''DD. MMMM YYYY'''.

ENDFORM.                    " PRINT_SUMMARY_ITEMS
*&---------------------------------------------------------------------*
*&      Form  GET_HEADER_CONTACT_DATA
*&---------------------------------------------------------------------*
*       Get header contact data
*----------------------------------------------------------------------*
FORM get_header_contact_data .


  DATA: ls_address_selection LIKE addr1_sel,
        lt_adr6              TYPE TABLE OF adr6.

* Get "Ihr Kontakt" data
* Get project manager ... else sales person as a contact data
  CLEAR: gs_vbpa_ik, gs_sadr_ik.
* In case of invoice get partners from reference order:
  SELECT * FROM vbpa
    INTO CORRESPONDING FIELDS OF TABLE gt_vbpa_ord
      WHERE vbeln EQ vbak-vbeln.

  READ TABLE gt_vbpa_ord INTO gs_vbpa_ik WITH KEY parvw = 'ZP'.
  IF sy-subrc <> 0.
* ... else sales person as a contact data
    READ TABLE gt_vbpa_ord INTO gs_vbpa_ik WITH KEY parvw = 'ZV'.
* ... elseor ZM Partner (CR from 21.11.2008)
    IF sy-subrc <> 0.
      READ TABLE gt_vbpa_ord INTO gs_vbpa_ik WITH KEY parvw = 'ZM'.
    ENDIF.
  ENDIF.
  IF NOT gs_vbpa_ik IS INITIAL.
* Get further data
    CLEAR: ls_address_selection.
    ls_address_selection-addrnumber = gs_vbpa_ik-adrnr.
    CALL FUNCTION 'ADDR_GET'
      EXPORTING
        address_selection = ls_address_selection
      IMPORTING
        sadr              = gs_sadr_ik
      EXCEPTIONS
        parameter_error   = 1
        address_not_exist = 2
        version_not_exist = 3
        internal_error    = 4
        OTHERS            = 5.
    IF sy-subrc <> 0.
    ENDIF.
* begin of change IMG-MDs/13.05.2008/VN.1.1
* Get more information about address (country code required)
    IF NOT gs_sadr_ik IS INITIAL.
      DATA: ls_addr1_complete   TYPE  szadr_addr1_complete.
      DATA: ls_szadr_adtel_line TYPE szadr_adtel_line,
            ls_adfax_line       TYPE szadr_adfax_line.

      CLEAR: ls_addr1_complete,ls_szadr_adtel_line,ls_adfax_line.
      CALL FUNCTION 'ADDR_GET_COMPLETE'
        EXPORTING
          addrnumber              = ls_address_selection-addrnumber
*         ADDRHANDLE              =
*         ARCHIVE_HANDLE          =
*         IV_CURRENT_COMM_DATA    = 'X'
        IMPORTING
          addr1_complete          = ls_addr1_complete
        EXCEPTIONS
          parameter_error         = 1
          address_not_exist       = 2
          internal_error          = 3
          wrong_access_to_archive = 4
          OTHERS                  = 5.
      IF sy-subrc <> 0.
      ENDIF.

      SORT ls_addr1_complete-adtel_tab BY date_from DESCENDING.
      SORT ls_addr1_complete-adfax_tab BY date_from DESCENDING.
      READ TABLE ls_addr1_complete-adtel_tab
        INTO ls_szadr_adtel_line INDEX 1.
      READ TABLE ls_addr1_complete-adfax_tab
        INTO ls_adfax_line INDEX 1.

      gs_tel_line = ls_szadr_adtel_line.
      gs_fax_line = ls_adfax_line.

      SHIFT gs_tel_line-adtel-tel_number LEFT DELETING LEADING '0'.
      SHIFT gs_fax_line-adfax-fax_number LEFT DELETING LEADING '0'.
      SELECT SINGLE * FROM t005k INTO gs_t005k_1 WHERE land1 = ls_szadr_adtel_line-adtel-country.
      SELECT SINGLE * FROM t005k INTO gs_t005k_2 WHERE land1 = ls_adfax_line-adfax-country.
    ENDIF.
* end of change IMG-MDs/13.05.2008/VN.1.1


* Get email

* Get E-Mail Addresses (Business Address Services)
    SELECT * FROM adr6 INTO CORRESPONDING FIELDS OF TABLE lt_adr6 WHERE
                    addrnumber = gs_vbpa_ik-adrnr AND
                    date_from <= sy-datum   AND
                    flgdefault = 'X'.
    IF sy-subrc = 0.
      SORT lt_adr6 BY date_from DESCENDING.
      READ TABLE lt_adr6 INTO gs_adr6_ik INDEX 1.
    ENDIF.
  ENDIF.

ENDFORM.                    " GET_HEADER_CONTACT_DATA
*&---------------------------------------------------------------------*
*&      Form  GET_HEADER_CONT_DATA_PROJ_ORD
*&---------------------------------------------------------------------*
*       Get header contact data for project order
*----------------------------------------------------------------------*
FORM get_header_cont_data_proj_ord .

  DATA: ls_tcj04  TYPE tcj04.


  CLEAR: ls_tcj04.

  CALL FUNCTION 'ZGL_SD_GET_PROJ_MNG_FOR_PRINT'
    EXPORTING
      im_vbeln = vbak-vbeln
    IMPORTING
      ex_tcj04 = ls_tcj04.

*Begin of change Atos-Chenlp/28.05.2010/VN.1.9----------------*
*--for ZH form with 3300, get chinese name from table TCJ04
* Begin of Change YASH-CHITTA 09.08.2013
* Remove hardcoding for Sales org.
*  IF vbak-vkorg = '3300' AND nast-spras = '1'.
  IF ( vbdkr-vkorg  IN r_vkorg_ctcn                         " '3300'.
  AND  r_vkorg_ctcn IS NOT INITIAL )
  AND  nast-spras   EQ '1'.
* End of Change YASH-CHITTA 09.08.2013
    gs_sadr_ik-name1             = ls_tcj04-alnam .
  ELSE.
    gs_sadr_ik-name1             = ls_tcj04-verna.
  ENDIF.
*End of change Atos-Chenlp/28.05.2010/VN.1.9------------------*
  gs_adr6_ik-smtp_addr         = ls_tcj04-zsmtp_addr.
  gs_tel_line-adtel-tel_number = ls_tcj04-ztel_number.
  gs_fax_line-adfax-fax_number = ls_tcj04-zfax_number.

*--> YOO_Y CHG0031716

  IF ls_tcj04 IS INITIAL AND gs_adr6_ik IS INITIAL AND vbdkr-vkorg EQ '2600'.
    DATA lv_pspnr TYPE prps-pspnr.
    DATA lv_conps TYPE prps-objnr.
    DATA lv_poski TYPE prps-poski.
    DATA lv_vbeln TYPE vbak-vbeln.

    SELECT SINGLE ps_psp_pnr INTO lv_pspnr FROM vbrp WHERE vbeln = vbrk-vbeln AND ps_psp_pnr NE ''.
    IF sy-subrc EQ 0.

      CONCATENATE 'PR' lv_pspnr INTO lv_conps.
      SELECT SINGLE poski INTO lv_poski FROM prps WHERE objnr = lv_conps.

      SHIFT lv_poski LEFT BY 2 PLACES.
      lv_vbeln  =  lv_poski.

      CALL FUNCTION 'ZGL_SD_GET_PROJ_MNG_FOR_PRINT'
        EXPORTING
          im_vbeln = lv_vbeln
        IMPORTING
          ex_tcj04 = ls_tcj04.

      IF sy-subrc EQ 0.
        gs_sadr_ik-name1             = ls_tcj04-verna.
        gs_adr6_ik-smtp_addr         = ls_tcj04-zsmtp_addr.
        gs_tel_line-adtel-tel_number = ls_tcj04-ztel_number.
        gs_fax_line-adfax-fax_number = ls_tcj04-zfax_number.

      ENDIF.
    ENDIF.

  ENDIF.

*<-- YOO_Y CHG0031716

ENDFORM.                    " GET_HEADER_CONT_DATA_PROJ_ORD
*&---------------------------------------------------------------------*
*&      Form  OBTAIN_REF_DOC_NUMB
*&---------------------------------------------------------------------*
*       Obtain reference document numbers
*----------------------------------------------------------------------*
FORM obtain_ref_doc_numb.

  DATA: ls_vbrk   TYPE vbrk.

  MOVE-CORRESPONDING  vbdkr TO ls_vbrk.
  CALL FUNCTION 'ZGL_SD_CHECK_REF_DOC_NO'
    EXPORTING
      im_vbrk      = ls_vbrk
      im_order     = 'X'
      im_return    = 'X'
      im_delivery  = 'X'
    IMPORTING
      ex_vbeln_ord = gs_head-order
      ex_vbeln_ret = gs_head-return
      ex_vbeln_del = gs_head-delivery.

*--> GeB 10122013 I62058
  gs_head-order = vbdkr-vbeln_vauf.
*<-- GeB 10122013 I62058

* --> GeB 03082010
  DATA: lv_ebeln TYPE ebeln.

  CLEAR: vbrp, i_aubel.
  SELECT * FROM vbrp WHERE vbeln EQ vbdkr-vbeln.
    IF vbrp-autyp EQ 'V'.
      IF NOT vbrp-aubel IS INITIAL.
        SELECT SINGLE ebeln FROM ekko
          INTO lv_ebeln
            WHERE ebeln = vbrp-aubel.
        IF sy-subrc EQ 0.
          MOVE lv_ebeln TO i_aubel.
          EXIT.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDSELECT.
*<-- GeB 03082010

ENDFORM.                    " OBTAIN_REF_DOC_NUMB
*&---------------------------------------------------------------------*
*&      Form  DETERMINE_BUSINESS_CASE
*&---------------------------------------------------------------------*
*       Determine specific business case
*----------------------------------------------------------------------*
FORM determine_business_case  USING ch_s_flags  TYPE ts_flags.

  DATA: ls_likp TYPE likp.

  CLEAR: ls_likp.
  SELECT SINGLE vbeln lfart vstel FROM likp
    INTO CORRESPONDING FIELDS OF ls_likp
      WHERE vbeln = gs_head-delivery.
  IF sy-subrc = 0.
    gs_likp = ls_likp.
    IF ls_likp-lfart = cs_lfart-nl.
      ch_s_flags-case1 = c_true.
      ch_s_flags-dynaddr = c_true.
    ENDIF.
  ENDIF.

* begin of change IMG-MDs/27.10.2008/VN.1.4
  IF vbdkr-fkart(2) = 'SH'.
    ch_s_flags-case2 = c_true.
  ENDIF.

* end of change IMG-MDs/27.10.2008/VN.1.4



ENDFORM.                    " DETERMINE_BUSINESS_CASE
*&---------------------------------------------------------------------*
*&      Form  BUILD_BATCHES_TABLE
*&---------------------------------------------------------------------*
*       Build batch table
*----------------------------------------------------------------------*
FORM build_batches_table_old  USING    ch_t_batch  TYPE tt_batch.

  DATA: ls_cc_mat      TYPE ztab_cc_mat,
        ls_batch       TYPE ts_batch,
        lt_batch       TYPE tt_batch,
        lt_marc        TYPE SORTED TABLE OF marc WITH UNIQUE KEY matnr werks,
        lt_cc_mat      TYPE TABLE OF ztab_cc_mat,
        lt_cc_batch    TYPE TABLE OF ztab_cc_batch,
        lt_msb_txtbtch TYPE TABLE OF ztab_msb_txtbtch,
        lt_vbdpr       TYPE TABLE OF vbdpr.

  FIELD-SYMBOLS: <fs_cc_batch>    TYPE ztab_cc_batch,
                 <fs_msb_txtbtch> TYPE ztab_msb_txtbtch,
                 <fs_vbdpr>       TYPE vbdpr.

  CLEAR: ls_cc_mat, lt_cc_mat[].

  IF NOT tvbdpr[] IS INITIAL.

* Get only materials, which are text batch controlled
    SELECT matnr werks zztextbatch
      FROM marc
        INTO CORRESPONDING FIELDS OF TABLE lt_marc
          FOR ALL ENTRIES IN tvbdpr[]
            WHERE matnr = tvbdpr-matnr
              AND werks = tvbdpr-werks
              AND zztextbatch = 'X'.

    IF sy-subrc = 0.
* Retrieve invoice positions, which has text batch controlled materials
      LOOP AT tvbdpr ASSIGNING <fs_vbdpr>.
        READ TABLE lt_marc WITH TABLE KEY matnr = <fs_vbdpr>-matnr
                                          werks = <fs_vbdpr>-werks
                                            TRANSPORTING NO FIELDS.
        IF sy-subrc = 0.
* Create new table with valid data for further search
          APPEND <fs_vbdpr> TO lt_vbdpr.
        ENDIF.
      ENDLOOP.
    ENDIF.

    IF NOT lt_vbdpr[] IS INITIAL.
      SELECT * FROM ztab_cc_mat
        INTO CORRESPONDING FIELDS OF TABLE lt_cc_mat
          FOR ALL ENTRIES IN tvbdpr[]
            WHERE vbeln = tvbdpr-vgbel
               OR vbeln_cr = tvbdpr-vgbel.
      IF sy-subrc = 0.
        SELECT * FROM ztab_cc_batch
          INTO CORRESPONDING FIELDS OF TABLE lt_cc_batch
            FOR ALL ENTRIES IN lt_cc_mat
              WHERE zhu_id = lt_cc_mat-zhu_id.
        IF sy-subrc = 0.
          SELECT * FROM ztab_msb_txtbtch
            INTO CORRESPONDING FIELDS OF TABLE lt_msb_txtbtch
              FOR ALL ENTRIES IN lt_cc_batch
                WHERE batchid = lt_cc_batch-batchid.
          IF sy-subrc = 0.
            LOOP AT lt_msb_txtbtch ASSIGNING <fs_msb_txtbtch>.
              ls_batch-batchid = <fs_msb_txtbtch>-batchid.
              ls_batch-heatno = <fs_msb_txtbtch>-heatno.
              ls_batch-land1 = <fs_msb_txtbtch>-land1.
              APPEND ls_batch TO lt_batch.
            ENDLOOP.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

* Final adjustment of the table
  IF NOT lt_batch[] IS INITIAL.
    SORT lt_batch[] BY heatno land1.
    DELETE ADJACENT DUPLICATES FROM lt_batch COMPARING heatno land1.
    gt_batch[] = lt_batch[].
  ENDIF.


ENDFORM.                    " BUILD_BATCHES_TABLE_OLD
*&---------------------------------------------------------------------*
*&      Form  READ_SAP_USER_DATA
*&---------------------------------------------------------------------*
*       Read sap user data as a contact person
*----------------------------------------------------------------------*
FORM read_sap_user_data .

  DATA: ls_cc_mat TYPE ztab_cc_mat,
        ls_vbdpr  TYPE vbdpr.


  LOOP AT tvbdpr INTO ls_vbdpr WHERE vgbel <> space.
    EXIT.
  ENDLOOP.

  IF NOT ls_vbdpr-vgbel IS INITIAL.
    SELECT SINGLE * FROM ztab_cc_mat
      INTO ls_cc_mat
        WHERE vbeln = ls_vbdpr-vgbel
          OR vbeln_cr = ls_vbdpr-vgbel.
    IF sy-subrc = 0.
      CALL FUNCTION 'ZGL_SD_GET_SAP_USER_DATA'
        EXPORTING
          im_sapuser  = ls_cc_mat-zuser
        IMPORTING
          ex_sadr     = gs_sadr_ik
          ex_adr6     = gs_adr6_ik
          ex_t005k_1  = gs_t005k_1
          ex_t005k_2  = gs_t005k_2
          ex_tel_line = gs_tel_line
          ex_fax_line = gs_fax_line.
    ENDIF.
  ENDIF.
ENDFORM.                    " READ_SAP_USER_DATA
*&---------------------------------------------------------------------*
*&      Form  PREPADER_DYNAMIC_ADDRESS
*&---------------------------------------------------------------------*
*       Procedure is responsible for preparing dynamic address of sender
*----------------------------------------------------------------------*
FORM prepader_dynamic_address .

  DATA: lv_adrnr      TYPE adrnr,
        ls_adrs_print TYPE adrs_print.

  SELECT SINGLE adrnr FROM tvst
    INTO lv_adrnr
      WHERE vstel = gs_likp-vstel.
  IF sy-subrc = 0.
    CALL FUNCTION 'ADDRESS_INTO_PRINTFORM'
      EXPORTING
*       ADRSWA_IN         =
*       ADDRESS_1         =
*       ADDRESS_2         =
*       ADDRESS_3         =
        address_type      = '1'
        address_number    = lv_adrnr
*       ADDRESS_HANDLE    = ' '
*       PERSON_NUMBER     = ' '
*       PERSON_HANDLE     = ' '
        sender_country    = vbdkr-land1_we "as a sender country , the receiver country has to be provided
*                                                              according P.Walker from 2008-10-20 18:11:30
*       RECEIVER_LANGUAGE = ' '
*       NUMBER_OF_LINES   = 10
*       STREET_HAS_PRIORITY                  = ' '
*       LINE_PRIORITY     = ' '
*       COUNTRY_NAME_IN_RECEIVER_LANGU       = ' '
*       LANGUAGE_FOR_COUNTRY_NAME            = ' '
*       NO_UPPER_CASE_FOR_CITY               = ' '
*       IV_NATION         = ' '
*       IV_NATION_SPACE   = ' '
*       IV_PERSON_ABOVE_ORGANIZATION         = ' '
*       IS_BUPA_TIME_DEPENDENCY              = ' '
*       IV_LANGU_CREA     = ' '
      IMPORTING
*       ADRSWA_OUT        =
        address_printform = ls_adrs_print
*       ADDRESS_SHORT_FORM                   =
*       ADDRESS_SHORT_FORM_S                 =
*       ADDRESS_DATA_CARRIER                 =
*       ADDRESS_DATA_CARRIER_0               =
*       NUMBER_OF_USED_LINES                 =
*       NAME_IS_EMPTY     =
*       ADDRESS_NOT_FOUND =
*       ADDRESS_PRINTFORM_TABLE              =
*       ADDRESS_SHORT_FORM_WO_NAME           =
*       EV_NATION         =
      .
    gs_address = ls_adrs_print.

  ENDIF.

ENDFORM.                    " PREPADER_DYNAMIC_ADDRESS
*&---------------------------------------------------------------------*
*&      Form  UPDATE_PARTNER_ADDRESS
*&---------------------------------------------------------------------*
*       Update partner address
*----------------------------------------------------------------------*
FORM update_partner_address .

  DATA: ls_vbpa TYPE vbpa,
*Begin of change Atos-Chenlp/02.06.2010/VN.1.9----------------*
*--define local variable for reading address
        ls_kna1 TYPE kna1,
        ls_sadr TYPE sadr,
        ls_addr TYPE addr1_sel.
*End of change Atos-Chenlp/02.06.2010/VN.1.9------------------*
* CR. from 2008-10-23 09:21 - Begin
*  IF gv_paradrnr IS INITIAL.
* CR. from 2008-10-23 09:21 - End
  READ TABLE tvbdpr INTO vbdpr INDEX 1.
*Insert begin by mendnir_zen CHG0037540 CEDK963213
  IF vbdkr-vkorg = '2100' AND vbdkr-fktyp NE 'P'.
    IF vbak-zzsuldate IS NOT INITIAL. " Insert begin by mendnir_zen CHG0037540 CEDK963285
      vbdpr-fbuda = vbak-zzsuldate.
*Insert begin by mendnir_zen CHG0037540 CEDK963303
    ELSE.
      vbdpr-fbuda = vbrk-fkdat.
*Insert end by mendnir_zen CHG0037540 CEDK963303
    ENDIF. "" Insert begin by mendnir_zen CHG0037540 CEDK963285
  ENDIF.
*Insert begin by mendnir_zen CHG0037540 CEDK963558
  IF vbrk-fkdat IS NOT INITIAL AND vbak-zzsuldate IS NOT INITIAL.
    IF vbrk-fkdat < vbak-zzsuldate.
      vbdpr-fbuda = vbrk-fkdat.
    ENDIF.
  ENDIF.
*Insert end by mendnir_zen CHG0037540 CEDK963558
*Insert end by mendnir_zen CHG0037540 CEDK963213
  IF sy-subrc = 0.
    READ TABLE gt_vbpa INTO ls_vbpa WITH KEY vbeln = vbdkr-vbeln
                                             posnr = vbdpr-posnr
                                             parvw = vbco3-parvw.
    IF sy-subrc = 0.
      gv_paradrnr = ls_vbpa-adrnr.
    ENDIF.

*Begin of change Atos-Chenlp/02.06.2010/VN.1.9----------------*
*--changes fro sales organization 3300 and ZH form
*----if no chinese address exist in sales order,
*------then set global address number = address number of customer master
* Begin of Change YASH-CHITTA 09.08.2013
* Remove hardcoding for Sales org.
*    IF vbdkr-vkorg = '3300' AND nast-spras = '1'.
    IF ( vbdkr-vkorg  IN r_vkorg_ctcn                       " '3300'.
    AND  r_vkorg_ctcn IS NOT INITIAL )
    AND  nast-spras   EQ '1'.
* End of Change YASH-CHITTA 09.08.2013
      ls_addr-addrnumber = gv_paradrnr.
      ls_addr-nation = 'C'.
      CALL FUNCTION 'ADDR_GET'
        EXPORTING
          address_selection = ls_addr
*         ADDRESS_GROUP     =
*         READ_SADR_ONLY    = ' '
*         READ_TEXTS        = ' '
*         IV_CURRENT_COMM_DATA          = ' '
        IMPORTING
*         ADDRESS_VALUE     =
*         ADDRESS_ADDITIONAL_INFO       =
*         RETURNCODE        =
*         ADDRESS_TEXT      =
          sadr              = ls_sadr
*          TABLES
*         ADDRESS_GROUPS    =
*         ERROR_TABLE       =
*         VERSIONS          =
        EXCEPTIONS
          parameter_error   = 1
          address_not_exist = 2
          version_not_exist = 3
          internal_error    = 4
          OTHERS            = 5.
      IF sy-subrc <> 0.
        SELECT SINGLE * FROM kna1 INTO ls_kna1 WHERE kunnr = gs_vbpa_re-kunnr.
        IF sy-subrc = 0.
          gv_paradrnr = ls_kna1-adrnr.
        ENDIF.
      ENDIF.
    ENDIF.
*End of change Atos-Chenlp/02.06.2010/VN.1.9------------------*

  ENDIF.
* CR. from 2008-10-23 09:21 - Begin
*  ENDIF.
* CR. from 2008-10-23 09:21 - End

*Begin of change Atos-Chenlp/02.06.2010/VN.1.9----------------*
*--free local variable for reading address
  FREE: ls_kna1,
        ls_vbpa,
        ls_addr,
        ls_sadr.
*End of change Atos-Chenlp/02.06.2010/VN.1.9------------------*
ENDFORM.                    " UPDATE_PARTNER_ADDRESS
*&---------------------------------------------------------------------*
*&      Form  GET_AMOUNT_OF_COILS
*&---------------------------------------------------------------------*
*     Get amount of coils for display in the invoice header.
*----------------------------------------------------------------------*
FORM get_amount_of_coils .

  CLEAR: gs_tab_vbrk_tmp.
  SELECT SINGLE * FROM ztab_vbrk
    INTO gs_tab_vbrk_tmp
      WHERE vbeln = vbdkr-vbeln.
  IF sy-subrc = 0.
    gs_tab_vbrk-zcratesno = gs_tab_vbrk_tmp-zcratesno.
  ENDIF.

  IF gs_tab_vbrk_tmp-zcratesno IS INITIAL.
    gs_tab_vbrk-zcratesno = '0'.
  ELSE.
    SHIFT gs_tab_vbrk-zcratesno LEFT DELETING LEADING '0'.
  ENDIF.




ENDFORM.                    " GET_AMOUNT_OF_COILS
*&---------------------------------------------------------------------*
*&      Form  PRINT_BATCH_TABLE
*&---------------------------------------------------------------------*
*       Print list of batches
*----------------------------------------------------------------------*
FORM print_batch_table .

  IF gs_flags-case1 = c_true.
    IF NOT gt_batch[] IS INITIAL.
      CALL FUNCTION 'WRITE_FORM'
        EXPORTING
          element = 'BATCH_HEADER'.
      LOOP AT gt_batch INTO gs_batch.
*       Write element
        CALL FUNCTION 'WRITE_FORM'
          EXPORTING
            element = 'BATCH_ITEM'.
      ENDLOOP.
    ENDIF.
  ENDIF.

ENDFORM.                    " PRINT_BATCH_TABLE
*&---------------------------------------------------------------------*
*&      Form  OBTAIN_SULPRICE_ORDER_DATA
*&---------------------------------------------------------------------*
*       Obtain data from Sulprice Order if the SD Order is missing
*----------------------------------------------------------------------*
FORM obtain_sulprice_order_data .

  DATA: ls_vbrp        TYPE vbrp,
        lt_vbrp        TYPE TABLE OF vbrp,
*        lv_PS_PSP_PNR  TYPE PS_PSP_PNR.
        lv_ps_pspid    TYPE ps_pspid,
        lv_vbeln       TYPE vbeln,
        ls_vbkd        TYPE vbkd,
        lv_order_found TYPE xfeld,
        ls_tcj04       TYPE tcj04.

  CLEAR: ls_vbrp, lt_vbrp[],  ls_vbkd, lv_order_found, lv_vbeln.

*  IF gs_head-bstkd IS INITIAL OR gs_head-bstdk IS INITIAL OR gs_head-order IS INITIAL.
* Attempt to get sulprice order on base of the accounting assignment of the first position.
  SELECT vbeln posnr ps_psp_pnr FROM vbrp
    INTO CORRESPONDING FIELDS OF TABLE lt_vbrp
      WHERE vbeln = vbdkr-vbeln.

  IF sy-subrc = 0.
    SORT lt_vbrp BY posnr.
    READ TABLE lt_vbrp
      INTO ls_vbrp
        INDEX 1.
    IF NOT ls_vbrp-ps_psp_pnr IS INITIAL.
      CALL FUNCTION 'CONVERSION_EXIT_ABPSP_OUTPUT'
        EXPORTING
          input  = ls_vbrp-ps_psp_pnr
        IMPORTING
          output = lv_ps_pspid.
      lv_vbeln = lv_ps_pspid+2(9).
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = lv_vbeln
        IMPORTING
          output = lv_vbeln.
      SELECT SINGLE vbeln posnr bstkd bstdk
        FROM vbkd
          INTO CORRESPONDING FIELDS OF ls_vbkd
          WHERE vbeln = lv_vbeln
            AND posnr = '000000'.

      IF sy-subrc = 0.
        lv_order_found = c_true.
      ENDIF.
    ENDIF.
  ENDIF.
*  ENDIF.


  IF NOT lv_order_found IS INITIAL.

* Get customer Order Number
    IF gs_head-bstkd IS INITIAL.
      gs_head-bstkd = ls_vbkd-bstkd.
    ENDIF.

* Order Number
    IF gs_head-order IS INITIAL.
      gs_head-order = ls_vbkd-vbeln.
    ENDIF.


* Order date
    IF gs_head-bstdk IS INITIAL.
      gs_head-bstdk = ls_vbkd-bstdk.
    ENDIF.

  ENDIF.

*Begin of Insert by YASH-CHITTA Logic for 3400 on 20.08.2013 --*
* GUI Number
  SELECT SINGLE bktxt
    FROM bkpf
      INTO gs_head-bktxt
      WHERE belnr = vbdkr-vbeln .
**End of Insert by YASH-CHITTA Logic for 3400 on 20.08.2013 --*

  IF gs_flags-case2 = c_true AND gs_flags-case1 = c_false.

* Additional case:
* CASE 1 = FALSE (prec.deliv <> NL)
* CASE 2 = TRUE  (VBRK-FKART = SH*
* Get data from project (higher priority)
* but only if exists
    IF NOT ls_vbkd-vbeln IS INITIAL.


      CLEAR: ls_tcj04.
      CALL FUNCTION 'ZGL_SD_GET_PROJ_MNG_FOR_PRINT'
        EXPORTING
          im_vbeln = ls_vbkd-vbeln
        IMPORTING
          ex_tcj04 = ls_tcj04.
*Begin of change Atos-Chenlp/28.05.2010/VN.1.9----------------*
*--for ZH form with 3300, get chinese name from table TCJ04
* Begin of Change YASH-CHITTA 09.08.2013
* Remove hardcoding for Sales org.
*      IF vbak-vkorg = '3300' AND nast-spras = '1'.
      IF ( vbdkr-vkorg  IN r_vkorg_ctcn                     " '3300'.
      AND  r_vkorg_ctcn IS NOT INITIAL )
      AND  nast-spras   EQ '1'.
* End of Change YASH-CHITTA 09.08.2013
        gs_sadr_ik-name1             = ls_tcj04-alnam .
      ELSE.
        gs_sadr_ik-name1             = ls_tcj04-verna.
      ENDIF.
*End of change Atos-Chenlp/28.05.2010/VN.1.9------------------*
      gs_adr6_ik-smtp_addr         = ls_tcj04-zsmtp_addr.
      gs_tel_line-adtel-tel_number = ls_tcj04-ztel_number.
      gs_fax_line-adfax-fax_number = ls_tcj04-zfax_number.
    ENDIF.
  ENDIF.


ENDFORM.                    " OBTAIN_SULPRICE_ORDER_DATA

*&---------------------------------------------------------------------*
*&      Form  READ_SAP_USER_DATA_FOR_SH
*&---------------------------------------------------------------------*
*       Read sap user data as a contact person for SH
*----------------------------------------------------------------------*
FORM read_sap_user_data_for_sh.

  DATA: lv_ernam TYPE ernam,
        ls_lips  TYPE lips.

  CLEAR: ls_lips.


  SELECT SINGLE vbeln posnr vgbel
    FROM lips
      INTO CORRESPONDING FIELDS OF ls_lips
        WHERE vbeln = gs_head-delivery
          AND vgbel <> space.

  IF sy-subrc = 0.
    SELECT SINGLE ernam FROM ekko
      INTO lv_ernam
        WHERE ebeln = ls_lips-vgbel.
    IF sy-subrc = 0.
      CALL FUNCTION 'ZGL_SD_GET_SAP_USER_DATA'
        EXPORTING
          im_sapuser  = lv_ernam
        IMPORTING
          ex_sadr     = gs_sadr_ik
          ex_adr6     = gs_adr6_ik
          ex_t005k_1  = gs_t005k_1
          ex_t005k_2  = gs_t005k_2
          ex_tel_line = gs_tel_line
          ex_fax_line = gs_fax_line.
    ENDIF.
  ENDIF.

ENDFORM.                    " READ_SAP_USER_DATA_FOR_SH


*&---------------------------------------------------------------------*
*&      Form  BUILD_BATCHES_TABLE
*&---------------------------------------------------------------------*
*       Build batch table
*----------------------------------------------------------------------*
FORM build_batches_table USING    ch_t_batch  TYPE tt_batch.

  DATA: ls_cc_mat      TYPE ztab_cc_mat,
        ls_batch       TYPE ts_batch,
        lt_batch       TYPE tt_batch,
        lt_marc        TYPE SORTED TABLE OF marc WITH UNIQUE KEY matnr werks,
        lt_cc_batch    TYPE TABLE OF ztab_cc_batch,
        lt_msb_txtbtch TYPE SORTED TABLE OF ztab_msb_txtbtch WITH NON-UNIQUE KEY batchid batchpos,
        lt_vbdpr       TYPE TABLE OF vbdpr,
        lt_cc          TYPE TABLE OF ztab_cc,
        lv_append_head TYPE xfeld.

  FIELD-SYMBOLS: <fs_cc_batch>    TYPE ztab_cc_batch,
                 <fs_msb_txtbtch> TYPE ztab_msb_txtbtch,
                 <fs_vbdpr>       TYPE vbdpr,
                 <fs_cc>          TYPE ztab_cc.

  CLEAR: ls_cc_mat, lt_cc[], lv_append_head.

*  IF NOT tvbdpr[] IS INITIAL.
*
*    LOOP AT tvbdpr ASSIGNING <fs_vbdpr>.
*
*
*    ENDLOOP.
*
*  ENDIF.


  IF NOT tvbdpr[] IS INITIAL.

* Get only materials, which are text batch controlled
    SELECT matnr werks zztextbatch
      FROM marc
        INTO CORRESPONDING FIELDS OF TABLE lt_marc
          FOR ALL ENTRIES IN tvbdpr[]
            WHERE matnr = tvbdpr-matnr
              AND werks = tvbdpr-werks
              AND zztextbatch = 'X'.

    IF sy-subrc = 0.
* Retrieve invoice positions, which has text batch controlled materials
      LOOP AT tvbdpr ASSIGNING <fs_vbdpr>.
        READ TABLE lt_marc WITH TABLE KEY matnr = <fs_vbdpr>-matnr
                                          werks = <fs_vbdpr>-werks
                                            TRANSPORTING NO FIELDS.
        IF sy-subrc = 0.
* Create new table with valid data for further search
          APPEND <fs_vbdpr> TO lt_vbdpr.
        ENDIF.
      ENDLOOP.
    ENDIF.

    IF NOT lt_vbdpr[] IS INITIAL.

* Get all handling units for all positions.
      SELECT * FROM ztab_cc
        INTO CORRESPONDING FIELDS OF TABLE lt_cc
          FOR ALL ENTRIES IN  lt_vbdpr[]
            WHERE zdel_no = lt_vbdpr-vgbel
              AND zpos_no = lt_vbdpr-vgpos.
      IF sy-subrc = 0.
* Get all batches for selected handling units.
        SELECT * FROM ztab_cc_batch
          INTO CORRESPONDING FIELDS OF TABLE lt_cc_batch
            FOR ALL ENTRIES IN lt_cc
              WHERE zhu_id = lt_cc-zhu_id
                AND zitm_id = lt_cc-zitm_id.
        IF sy-subrc = 0.
* If some batches selected....
* ... get more details for each batch.
          SELECT * FROM ztab_msb_txtbtch
            INTO CORRESPONDING FIELDS OF TABLE lt_msb_txtbtch
              FOR ALL ENTRIES IN lt_cc_batch
                WHERE batchid = lt_cc_batch-batchid
                  AND batchpos = lt_cc_batch-batchpos.
        ENDIF.
      ENDIF.


* Now if any batches found, create main table for each position.

      LOOP AT lt_vbdpr ASSIGNING <fs_vbdpr>.
* Get position data
        ls_batch-vbeln = vbdkr-vbeln.
        ls_batch-posnr = <fs_vbdpr>-posnr.
* Get Batch data.
        AT NEW posnr.
          lv_append_head = c_true.
        ENDAT.

        LOOP AT lt_cc ASSIGNING <fs_cc> WHERE zdel_no = <fs_vbdpr>-vgbel
                                          AND zpos_no = <fs_vbdpr>-vgpos.
          LOOP AT lt_cc_batch ASSIGNING <fs_cc_batch> WHERE zhu_id  = <fs_cc>-zhu_id
                                                        AND zitm_id = <fs_cc>-zitm_id.
            READ TABLE lt_msb_txtbtch ASSIGNING <fs_msb_txtbtch> WITH TABLE KEY batchid  = <fs_cc_batch>-batchid
                                                                                batchpos = <fs_cc_batch>-batchpos.
            IF sy-subrc = 0.
*   Finally create entry.
              IF lv_append_head = c_true.
                CLEAR: ls_batch-land1.
                ls_batch-heatno = text-010.
                APPEND ls_batch TO lt_batch.
                CLEAR: lv_append_head.
              ENDIF.
              CLEAR: ls_batch-land1.
              ls_batch-batchid = <fs_msb_txtbtch>-batchid.
              ls_batch-batchpos = <fs_msb_txtbtch>-batchpos.
              ls_batch-heatno = <fs_msb_txtbtch>-heatno.
              ls_batch-land1 = <fs_msb_txtbtch>-land1.
              APPEND ls_batch TO lt_batch.
            ENDIF.
          ENDLOOP.
        ENDLOOP.
      ENDLOOP.
    ENDIF.
  ENDIF.

* Final adjustment of the table
  IF NOT lt_batch[] IS INITIAL.
*    SORT lt_batch[] BY heatno land1.
*    DELETE ADJACENT DUPLICATES FROM lt_batch COMPARING heatno land1.
    gt_batch[] = lt_batch[].
  ENDIF.


ENDFORM.                    " BUILD_BATCHES_TABLE
*&---------------------------------------------------------------------*
*&      Form  PRINT_BATCH_LINES
*&---------------------------------------------------------------------*
*       Procedure is responsible for printing batches in invoice positions.
*----------------------------------------------------------------------*
FORM print_batch_lines .

  LOOP AT gt_batch INTO gs_batch WHERE vbeln = vbdkr-vbeln
                                   AND posnr = vbdpr-posnr.
*   Write element
    CALL FUNCTION 'WRITE_FORM'
      EXPORTING
        element = 'BATCH_ITEM_POS'.
  ENDLOOP.


ENDFORM.                    " PRINT_BATCH_LINES
*&---------------------------------------------------------------------*
*&      Form  READ_ADDRESS_FOR_CONSIGNEE
*&---------------------------------------------------------------------*
*       Read consignee address for
*----------------------------------------------------------------------*
FORM read_address_for_consignee.

  DATA: ls_we_addr_sh TYPE ts_address_sh.

  IF NOT gs_head-delivery IS INITIAL.
    SELECT SINGLE zaddr1 zaddr2 zaddr3 zaddr4 zaddr5
      FROM ztab_cc_shiprule
        INTO CORRESPONDING FIELDS OF ls_we_addr_sh
          WHERE zvbeln = gs_head-delivery.
    IF sy-subrc = 0.
      gs_head-we_addr_sh =  ls_we_addr_sh.
    ENDIF.
  ENDIF.

ENDFORM.                    " READ_ADDRESS_FOR_CONSIGNEE
*&---------------------------------------------------------------------*
*&      Form  CONVERT_VAT_TO_GST
*&---------------------------------------------------------------------*
*       Convert text VAT to GST
*----------------------------------------------------------------------*
FORM convert_vat_to_gst  USING    p_komvd_vtext.
*begin of change AO-Sam/21.04.2009/VN.1.6 -----------------------*

  REPLACE 'VAT' IN komvd-vtext WITH 'GST'.

*end of change AO-Sam/21.04.2009/VN.1.6   -----------------------*
ENDFORM.                    " CONVERT_VAT_TO_GST
*&---------------------------------------------------------------------*
*&      Form  SIGNATURE_PRINT
*&---------------------------------------------------------------------*
*       Print signature
*----------------------------------------------------------------------*
FORM signature_print .
*begin of change AO-Sam/21.04.2009/VN.1.6 -----------------------*
  CLEAR gv_signature_text.
  IF vbdkr-fkart = 'SHF5' OR  vbdkr-fkart = 'SHF6' OR
     vbdkr-fkart = 'SHF8' OR  vbdkr-fkart = 'SHF9'.
    gv_signature_text = 'ZSGSD_SHIPPINGSIGN'.
  ELSEIF vbdkr-fkart = 'F1' OR vbdkr-fkart = 'F2' OR
         vbdkr-fkart = 'FAZ' OR vbdkr-fkart = 'FAS' OR
         vbdkr-fkart = 'G2' OR vbdkr-fkart = 'L2' OR
         vbdkr-fkart = 'RE' OR vbdkr-fkart = 'S1' OR vbdkr-fkart = 'S2'.
* Begin of Change YASH-CHITTA 09.08.2013
* Remove hardcoding for Sales org.
*    IF vbdkr-vkorg = '3100'.
    IF  r_vkorg_ctsg IS NOT INITIAL
    AND vbdkr-vkorg  IN r_vkorg_ctsg.                       " '3100'
* End of Change YASH-CHITTA 09.08.2013
      gv_signature_text = 'ZSGSD_TAXSIGN'.
* Begin of Change YASH-CHITTA 09.08.2013
* Remove hardcoding for Sales org.
*    ELSEIF vbdkr-vkorg = '3200'
    ELSEIF ( r_vkorg_ctin IS NOT INITIAL
    AND      vbdkr-vkorg  IN r_vkorg_ctin )                 " '3200'.
* End of Change YASH-CHITTA 09.08.2013
                                      AND ( vbdkr-fkart = 'FAZ'
                                      OR  ( vbdkr-vbtyp = 'P' AND vbak-augru NE 'G' AND vbak-augru NE 'F')
                                      OR  ( vbdkr-vbtyp = 'M' AND vbak-augru NE 'G' AND vbak-augru NE 'F')
                                    ).
      gv_signature_text = 'ZINSD_TAXSIGN'.

* Begin of Insert by YASH-CHITTA Logic for 3400 on 19.08.2013 --*
    ELSEIF r_vkorg_cttw IS NOT INITIAL
   AND vbdkr-vkorg  IN r_vkorg_cttw.
      gv_signature_text = 'ZTWSD_TAXSIGN'.
* End of Insert by YASH-CHITTA Logic for 3400 on 19.08.2013 --*
    ENDIF.
  ENDIF.

  CALL FUNCTION 'WRITE_FORM'
    EXPORTING
      element  = 'BOTTOM'
      function = 'APPEND'
      type     = 'BOTTOM'
      window   = 'MAIN'.

*end of change AO-Sam/21.04.2009/VN.1.6   -----------------------*
ENDFORM.                    " SIGNATURE_PRINT
*&---------------------------------------------------------------------*
*&      Form  SIGNATURE_PRINT_CN
*&---------------------------------------------------------------------*
*       Print signature
*----------------------------------------------------------------------*
FORM signature_print_cn .

*Begin of change Atos-Chenlp/28.05.2010/VN.1.9----------------*
*--changes for signature in sales organization 3300
  DATA: lv_pending TYPE c.

  CLEAR gv_signature_text.

*begin of change Meng(NOCO)/17.Sep.2014 for C2316-------------*

  SELECT SINGLE low
  INTO gv_signature_text
  FROM ztab_gl_params
  WHERE progname = 'ZGL_RVADIN02'
  AND fieldname = 'TAXSIGN'
  AND bukrs = vbdkr-vkorg.

*end   of change Meng(NOCO)/17.Sep.2014 for C2316-------------*

  IF sy-subrc <> 0.   "change Meng(NOCO)/17.Sep.2014 for C2316

    IF vbdkr-fkart = 'SHF5' OR  vbdkr-fkart = 'SHF6' OR
       vbdkr-fkart = 'SHF8' OR  vbdkr-fkart = 'SHF9'.
      gv_signature_text = 'ZCNSD_SHIPPINGSIGN'.
    ELSEIF vbdkr-fkart = 'F1' OR vbdkr-fkart = 'F2' OR
           vbdkr-fkart = 'FAZ' OR vbdkr-fkart = 'FAS' OR
           vbdkr-fkart = 'G2' OR vbdkr-fkart = 'L2' OR
           vbdkr-fkart = 'RE' OR vbdkr-fkart = 'S1' OR vbdkr-fkart = 'S2'.
      gv_signature_text = 'ZCNSD_TAXSIGN'.
    ENDIF.

  ENDIF.   "change Meng(NOCO)/17.Sep.2014 for C2316

  CALL FUNCTION 'WRITE_FORM'
    EXPORTING
      element                  = 'BOTTOM'
      function                 = 'APPEND'
      type                     = 'BOTTOM'
      window                   = 'MAIN'
    IMPORTING
      pending_lines            = lv_pending
    EXCEPTIONS
      element                  = 1
      function                 = 2
      type                     = 3
      unopened                 = 4
      unstarted                = 5
      window                   = 6
      bad_pageformat_for_print = 7
      spool_error              = 8
      codepage                 = 9
      OTHERS                   = 10.

  IF sy-subrc <> 0.
*    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ELSE.
*---if no enough line to print footer, create new page
    IF lv_pending = 'X'.
      CALL FUNCTION 'CONTROL_FORM'
        EXPORTING
          command = 'NEW-PAGE'.
    ENDIF.
  ENDIF.

  FREE: lv_pending.
*End of change Atos-Chenlp/28.05.2010/VN.1.9----------------*

ENDFORM.                    " SIGNATURE_PRINT_CN

*&---------------------------------------------------------------------*
*&      Form  CONVERT_TAX_TO_GST
*&---------------------------------------------------------------------*
FORM convert_tax_to_gst  USING    p_komvd_vtext.
*begin of change AO-Sam/21.04.2009/VN.1.6 -----------------------*
  FIND 'Tax' IN p_komvd_vtext.
  IF sy-subrc = 0.
    REPLACE 'Tax' IN komvd-vtext WITH 'GST'.
  ELSE.
    REPLACE 'tax' IN komvd-vtext WITH 'GST'.
  ENDIF.


*end of change AO-Sam/21.04.2009/VN.1.6   -----------------------*
ENDFORM.                    " CONVERT_TAX_TO_GST
*&---------------------------------------------------------------------*
*&      Form  MILESTONE_TEXT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM milestone_text .
* Begin of logic ZEN-JUTURU / 08.01.2015 / CHG3010125.
  DATA : ls_vbrk TYPE vbrk.
*  Begin of replacement condition ZEN-JUTURU / 26.05.2016 / eCHG3014830.
*   IF vbdkr-vkorg = '3200' AND  vbdkr-fkart = 'FAZ' OR vbdkr-fkart = 'F2'.
  IF vbdkr-vkorg = '3200'.
    IF vbdkr-fkart = 'FAZ' OR vbdkr-fkart = 'F2'.
* End of replacement condition ZEN-JUTURU / 26.05.2016 / eCHG3014830.
      SELECT SINGLE * FROM vbrk INTO ls_vbrk WHERE vbeln = vbdkr-vbeln.
      IF sy-subrc EQ 0.
        READ TABLE gt_milefinal INTO gs_milefinal WITH KEY fakwr = ls_vbrk-netwr.
        IF sy-subrc EQ '0'.
          CALL FUNCTION 'WRITE_FORM'
            EXPORTING
              element = 'CURRENT_DUE'
              window  = 'MAIN'
            EXCEPTIONS
              element = 1
              window  = 2.
          IF sy-subrc NE 0.
            PERFORM protocol_update.
          ENDIF.
        ENDIF.
      ENDIF.

      CALL FUNCTION 'WRITE_FORM'
        EXPORTING
          element = 'PTM_TX'
          window  = 'MAIN'
        EXCEPTIONS
          element = 1
          window  = 2.
      IF sy-subrc NE 0.
        PERFORM protocol_update.
      ENDIF.

      LOOP AT gt_milefinal INTO gs_milefinal .
        CALL FUNCTION 'WRITE_FORM'
          EXPORTING
            element = 'MILESTONE_TEXT'
            window  = 'MAIN'
          EXCEPTIONS
            element = 1
            window  = 2.
        IF sy-subrc NE 0.
          PERFORM protocol_update.
        ENDIF.
      ENDLOOP.

*  Begin of logic ZEN-JUTURU / 26.05.2016 / eCHG3014830.
    ELSE.
      SELECT SINGLE *
     FROM stxh
     WHERE tdobject EQ 'VBBK'
       AND tdid EQ 'Z306'
       AND tdname EQ vbdkr-tdname.

      IF sy-subrc EQ 0.
        CALL FUNCTION 'WRITE_FORM'
          EXPORTING
            element = 'MILESTONE_TEXT'
          EXCEPTIONS
            element = 1
            window  = 2.
        IF sy-subrc NE 0.
          PERFORM protocol_update.
        ENDIF.
      ENDIF.
    ENDIF.
*  End of logic ZEN-JUTURU / 26.05.2016 / eCHG3014830.
  ELSE.
*  End of logic ZEN-JUTURU / 08.01.2015 / CHG3010125.

    SELECT SINGLE *
      FROM stxh
      WHERE tdobject EQ 'VBBK'
        AND tdid EQ 'Z306'
        AND tdname EQ vbdkr-tdname.

    IF sy-subrc EQ 0.
      CALL FUNCTION 'WRITE_FORM'
        EXPORTING
          element = 'MILESTONE_TEXT'
        EXCEPTIONS
          element = 1
          window  = 2.
      IF sy-subrc NE 0.
        PERFORM protocol_update.
      ENDIF.
    ENDIF.

  ENDIF.     " CHG3010125.


ENDFORM.                    " MILESTONE_TEXT


*&---------------------------------------------------------------------*
*&      Form  ADDITIONAL_INFO_PRINT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
*FORM additional_info_print.
*  CALL FUNCTION 'WRITE_FORM'
*    EXPORTING
*      element = 'ADDITIONAL'
*      window  = 'ADD'
*    EXCEPTIONS
*      element = 1
*      window  = 2.
*  IF sy-subrc NE 0.
*    PERFORM protocol_update.
*  ENDIF.
*ENDFORM.                    " ADDITIONAL_INFO_PRINT


*&---------------------------------------------------------------------*
*&      Form  CONVERT_INTO_WORDS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GV_TOLAT  text
*      <--P_GV_WORDS  text
*----------------------------------------------------------------------*
FORM f_convert_into_words  USING    p_gv_tolat TYPE any
                         CHANGING p_gv_words TYPE char256.


  DATA: lv_tolat     TYPE maxbt,
        lv_filler(1) TYPE c,
        lw_words     TYPE spell,
        lw_cur_spel  TYPE ztab_sd_cur_spel.
  CLEAR  p_gv_words.
  lv_tolat = p_gv_tolat.

  IF vbdkr-waerk = 'INR'.

*  Error should not be displayed
    CALL FUNCTION 'HR_IN_CHG_INR_WRDS'
      EXPORTING
        amt_in_num         = lv_tolat
      IMPORTING
        amt_in_words       = p_gv_words
      EXCEPTIONS
        data_type_mismatch = 1
        OTHERS             = 2.
    IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

  ELSE.

    CALL FUNCTION 'SPELL_AMOUNT'
      EXPORTING
        amount    = lv_tolat
        currency  = vbdkr-waerk
        filler    = lv_filler
        language  = sy-langu
      IMPORTING
        in_words  = lw_words
      EXCEPTIONS
        not_found = 1
        too_large = 2
        OTHERS    = 3.
    IF sy-subrc = 0.
* Get currency word from table
      SELECT SINGLE * INTO lw_cur_spel
        FROM ztab_sd_cur_spel
        WHERE waerk = vbdkr-waerk.
      IF sy-subrc = 0.
        IF lw_words-decimal IS INITIAL.
          CONCATENATE lw_words-word
                      lw_cur_spel-unit_text INTO p_gv_words
                      SEPARATED BY space.
        ELSE.
          CONCATENATE lw_words-word
           lw_cur_spel-unit_text
           lw_words-decword
           lw_cur_spel-decimals_text INTO p_gv_words
                      SEPARATED BY space.
        ENDIF.

      ENDIF.
    ELSE.

      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.

    ENDIF.

  ENDIF.




ENDFORM.                    " CONVERT_INTO_WORDS


*&---------------------------------------------------------------------*
*&      Form  F_GET_TAX
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_IT_BSET  text
*      <--P_W_FINAL  text
*----------------------------------------------------------------------*
FORM f_get_tax  USING   im_it_params  TYPE zitb_gl_params
                        im_tax_grp TYPE progname
                    CHANGING ch_val TYPE any.


  DATA: it_params     TYPE STANDARD TABLE OF ztab_gl_params.

  DATA: lr_kschl TYPE RANGE OF kschl.

  CLEAR ch_val.
  it_params = im_it_params.

  DELETE it_params WHERE fieldname <> im_tax_grp.

  CLEAR lr_kschl.
  CALL FUNCTION 'ZGL_PARAM_RANGE'
    EXPORTING
      im_params = it_params
    CHANGING
      ch_range  = lr_kschl.

  LOOP AT hkomvd WHERE kschl IN lr_kschl.
    ch_val = ch_val + hkomvd-kwert.
  ENDLOOP.


ENDFORM.                    " F_GET_TAX_01
*&---------------------------------------------------------------------*
*&      Form  F_GET_SERVICE_TAX
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LT_PARAMS  text
*      -->P_LC_SERV_TAX  text
*      <--P_GV_SERV_TAX  text
*      <--P_GV_CESS  text
*----------------------------------------------------------------------*
FORM f_get_service_tax  USING   im_it_params  TYPE zitb_gl_params
                                im_tax_grp TYPE progname
                        CHANGING ch_val TYPE any
                                 ch_val1 TYPE any.


  DATA: it_params     TYPE STANDARD TABLE OF ztab_gl_params.

  DATA: lr_kschl  TYPE RANGE OF kschl,
        lr_kschl1 TYPE TABLE OF selopt,
        ls_kschl  TYPE selopt.

  DATA: BEGIN OF hkomvd_temp OCCURS 50.
          INCLUDE STRUCTURE komvd.
  DATA: END OF hkomvd_temp.

  CONSTANTS : c_jsb2 TYPE kschl VALUE 'JSB2'.

  CLEAR ch_val.
  CLEAR ch_val1.

  it_params = im_it_params.
  DELETE it_params WHERE fieldname <> im_tax_grp.
  CLEAR lr_kschl.
  CALL FUNCTION 'ZGL_PARAM_RANGE'
    EXPORTING
      im_params = it_params
    CHANGING
      ch_range  = lr_kschl.

  lr_kschl1[] = lr_kschl[].
  SORT lr_kschl1 BY low.
  hkomvd_temp[] = hkomvd[].
  SORT hkomvd_temp[] BY kschl.
  DELETE hkomvd_temp WHERE kschl EQ space.
  LOOP AT lr_kschl1 INTO ls_kschl.
    READ TABLE hkomvd_temp WITH KEY kschl = ls_kschl-low.
    IF sy-subrc EQ 0.
      IF hkomvd_temp-kschl EQ c_jsb2.
        ch_val1 = ch_val1 + hkomvd_temp-kwert.
      ELSE .
        ch_val = ch_val + hkomvd_temp-kwert.
      ENDIF.
    ENDIF.
  ENDLOOP.

ENDFORM.                    " F_GET_SERVICE_TAX

*Insert Begin CHG0037806 ZAYIDU CEDK963987
FORM send_form_via_email .
*Replace Begin CHG0037806 ZAYIDU CEDK965059

**" Insert Begin CHG0037806 ZAYIDU CEDK963987
**    CONSTANTS: c_sender_address      TYPE soextreci1-receiver VALUE 'debtors.ctch@sulzer.com',
*    CONSTANTS: c_sender_address      TYPE soextreci1-receiver VALUE 'ANSAZAY',
*               c_sender_address_type TYPE soextreci1-adr_typ VALUE 'B'.
*" Insert End   CHG0037806 ZAYIDU CEDK963987
*
*    DATA : l_tab_docs     LIKE TABLE OF docs WITH HEADER LINE,
*           it_pdf_output  LIKE TABLE OF tline WITH HEADER LINE,
*           l_filesize     TYPE tst01-dsize,
*           l_tab_lines    TYPE i,
*           l_docdata      LIKE sodocchgi1,
*           l_objpack      LIKE TABLE OF sopcklsti1 WITH HEADER LINE,
*           l_reclist      LIKE TABLE OF somlreci1 WITH HEADER LINE,
*           att_type       LIKE sopcklsti1-doc_type,
*           l_objbin       LIKE TABLE OF solisti1 WITH HEADER LINE,
*           l_objhead      LIKE TABLE OF solisti1 WITH  HEADER LINE,
*           l_objtxt       LIKE TABLE OF solisti1 WITH HEADER LINE,
*           l_objhex       LIKE TABLE OF solix WITH HEADER LINE,
*           it_mess_att    LIKE TABLE OF solisti1 WITH HEADER LINE,
*           gd_buffer      TYPE string,
*           l_sub(50).
*
*CLEAR: maildata, mailtxt, mailbin, mailpack, mailhead, mailrec.
*REFRESH: mailtxt, mailbin, mailpack, mailhead, mailrec.
*
** Clrk's internet - Email ID
*  IF ls_intad IS INITIAL.
*  SELECT SINGLE intad FROM knb1 INTO ls_intad WHERE kunnr = vbdkr-kunwe.
*  ENDIF.
*
** Create subject
**creation of the document to be sent file name
**maildata-obj_name = 'Invoice'. " Comment CHG0037806 ZAYIDU CEDK963987
*maildata-obj_name = 'SAPRPT'. " Insert CHG0037806 ZAYIDU CEDK963987
*maildata-obj_langu = sy-langu.
**mail subject
*IF vbdkr-vbeln IS NOT INITIAL.
*CONCATENATE 'Invoice No:' vbdkr-vbeln ':' vbdkr-name1 INTO maildata-obj_descr SEPARATED BY space.
**maildata-obj_descr = 'Subject'.
*ENDIF.
*
**mail contents
**mailtxt-line = 'Attached is the Invoice document.'.  " Comment CHG0037806 ZAYIDU CEDK963987
**APPEND mailtxt. " Comment CHG0037806 ZAYIDU CEDK963987
*
**--------------------------------------------*
*CALL FUNCTION 'CONVERT_OTF_2_PDF'
**--------------------------------------------*
*    IMPORTING
*      bin_filesize           = l_filesize
*    TABLES
*      otf                    = otf_data
*      doctab_archive         = l_tab_docs
*      lines                  = it_pdf_output
*    EXCEPTIONS
*      err_conv_not_possible  = 1
*      err_otf_mc_noendmarker = 2
*      OTHERS                 = 3.
*  IF sy-subrc <> 0.
*    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*  ENDIF.
*
** Transfer the 132-long strings to 255-long strings
*  LOOP AT it_pdf_output.
*    TRANSLATE it_pdf_output USING ' ~'.
*    CONCATENATE gd_buffer it_pdf_output INTO gd_buffer.
*  ENDLOOP.
*  TRANSLATE gd_buffer USING '~ '.
*  DO.
*    it_mess_att = gd_buffer.
*    APPEND it_mess_att.
*    SHIFT gd_buffer LEFT BY 255 PLACES.
*    IF gd_buffer IS INITIAL.
*      EXIT.
*    ENDIF.
*  ENDDO.
*  l_objbin[] = it_mess_att[].
*
**" Comment Begin CHG0037806 ZAYIDU CEDK963987
*** Create Message Attachment
**  att_type = 'PDF'.
**  DESCRIBE TABLE l_objbin LINES l_tab_lines.
**  READ     TABLE l_objbin INDEX l_tab_lines.
**  l_objpack-doc_size = ( l_tab_lines - 1 ) * 255 + strlen( l_objbin ).
**  l_objpack-transf_bin = 'X'.
**  l_objpack-head_start = 1.
**  l_objpack-head_num   = 0.
**  l_objpack-body_start = 1.
**  l_objpack-body_num   = l_tab_lines.
**  l_objpack-doc_type   = att_type.
***  l_objpack-obj_name   = 'Invoice'. " Comment CHG0037806 ZAYIDU CEDK963987
**  CONCATENATE 'Invoice:' vbdkr-vbeln INTO l_objpack-obj_name SEPARATED BY space. " Insert  CHG0037806 ZAYIDU CEDK963987
**  CONCATENATE 'Invoice:' vbdkr-vbeln INTO l_objpack-obj_descr SEPARATED BY space.
**  APPEND l_objpack.
**  DESCRIBE TABLE mailbin LINES tab_lines.
**" Comment End CHG0037806 ZAYIDU CEDK963987
*
*
** MAIL BODY
**mailhead = 'Invoice Mail PDF'. " Comment CHG0037806 ZAYIDU CEDK963987
*mailtxt = 'Dear User,'.        " Insert  CHG0037806 ZAYIDU CEDK963987
*APPEND mailtxt.
*
*" Insert Begin CHG0037806 ZAYIDU CEDK963987
*CLEAR mailtxt.
*
*mailtxt = ' '.
*APPEND mailtxt.
*CLEAR mailtxt.
*
*mailtxt = 'Good day!'.
*APPEND mailtxt.
*CLEAR mailtxt.
*
*mailtxt = ' '.
*APPEND mailtxt.
*CLEAR mailtxt.
*
*CONCATENATE 'Please find attached the invoice' vbdkr-vbeln 'for your reference.' INTO mailtxt SEPARATED BY space.
*APPEND mailtxt.
*CLEAR mailtxt.
*
*mailtxt = 'If you have further questions, please contact: debtors.ctch@sulzer.com'.
*APPEND mailtxt.
*CLEAR mailtxt.
*
*mailtxt = ' '.
*APPEND mailtxt.
*CLEAR mailtxt.
*
*mailtxt = 'Thank you and Kind Regards,'.
*APPEND mailtxt.
*CLEAR mailtxt.
*
*mailtxt = 'Debtors Team'.
*APPEND mailtxt.
*CLEAR mailtxt.
*
**** Creation of the entry for the document
*  DESCRIBE TABLE mailtxt LINES tab_lines_1.
*  CLEAR l_objpack-transf_bin.
*  l_objpack-head_start = 1.
*  l_objpack-head_num = 0.
*  l_objpack-body_start = 1.
*  l_objpack-body_num = tab_lines_1.
*  l_objpack-doc_type = 'RAW'.
*  APPEND l_objpack.
*  CLEAR l_objpack.
*
** Create Invoice Message Attachment
*  att_type = 'PDF'.
*  DESCRIBE TABLE l_objbin LINES l_tab_lines.
*  READ     TABLE l_objbin INDEX l_tab_lines.
*  l_objpack-doc_size = ( l_tab_lines - 1 ) * 255 + strlen( l_objbin ).
*  l_objpack-transf_bin = 'X'.
*  l_objpack-head_start = 1.
*  l_objpack-head_num   = 1.
*  l_objpack-body_start = 1.
*  l_objpack-body_num   = l_tab_lines.
*  l_objpack-doc_type   = att_type.
*  CONCATENATE 'Invoice:' vbdkr-vbeln INTO l_objpack-obj_name SEPARATED BY space.
*  CONCATENATE 'Invoice:' vbdkr-vbeln INTO l_objpack-obj_descr SEPARATED BY space.
*  APPEND l_objpack.
*  DESCRIBE TABLE mailbin LINES tab_lines.
*" Insert End   CHG0037806 ZAYIDU CEDK963987
*
**SET recipient - email address here!!!
*mailrec-receiver = ls_intad.
*mailrec-rec_type = 'U'.
*APPEND mailrec.
*
**Replace Begin CHG0037806 ZAYIDU CEDK963987
**Sending the Document
***--------------------------------------------*
**CALL FUNCTION 'SO_NEW_DOCUMENT_ATT_SEND_API1'
***--------------------------------------------*
**  EXPORTING
**   document_data                    = maildata
**   put_in_outbox                    = ' '
**  TABLES
**    packing_list                     = l_objpack
**   object_header                     = mailhead
**   contents_bin                      = l_objbin
**   contents_txt                      = mailtxt
**    receivers                        = mailrec
** EXCEPTIONS
**   too_many_receivers               = 1
**   document_not_sent                = 2
**   document_type_not_exist          = 3
**   operation_no_authorization       = 4
**   parameter_error                  = 5
**   x_error                          = 6
**   enqueue_error                    = 7
**   OTHERS                           = 8
**          .
*break ansazay.
**--------------------------------------------*
*  CALL FUNCTION 'SO_DOCUMENT_SEND_API1'
**--------------------------------------------*
*  EXPORTING
*   document_data                    = maildata
*   put_in_outbox                    = 'X'
*   sender_address                   = c_sender_address
*   sender_address_type              = c_sender_address_type
*   commit_work                      = 'X'
*  TABLES
*    packing_list                     = l_objpack
**   object_header                     = mailhead " Comment CHG0037806 ZAYIDU CEDK963987
*   contents_bin                      = l_objbin
*   contents_txt                      = mailtxt
*    receivers                        = mailrec
* EXCEPTIONS
*   too_many_receivers               = 1
*   document_not_sent                = 2
*   document_type_not_exist          = 3
*   operation_no_authorization       = 4
*   parameter_error                  = 5
*   x_error                          = 6
*   enqueue_error                    = 7
*   OTHERS                           = 8
*          .
**Replace Begin CHG0037806 ZAYIDU CEDK963987
*IF sy-subrc <> 0.
** Implement suitable error handling here
*  MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*ENDIF.

***********************************************************************************************************************************************


CLASS cl_bcs DEFINITION LOAD.
DATA:  lo_send_request TYPE REF TO cl_bcs
      ,lo_document     TYPE REF TO cl_document_bcs
      ,lo_sender       TYPE REF TO if_sender_bcs
      ,lo_recipient    TYPE REF TO if_recipient_bcs
      ,lt_message_body TYPE bcsy_text
      ,lv_string_mail  TYPE string
      ,lv_string_sub   TYPE so_obj_des
      ,lv_string_sub_a TYPE sood-objdes
      ,lx_document_bcs TYPE REF TO cx_document_bcs
      ,lv_send         TYPE ad_smtpadr VALUE 'debtors.ctch@sulzer.com'
      ,lv_sent_to_all  TYPE os_boolean
      ,lt_att_content_hex  TYPE solix_tab
      ,lt_att_content_text TYPE soli_tab
      ,lw_att_content_hex  TYPE solix
      ,lw_att_content_text TYPE soli
      ,l_send          TYPE adr6-smtp_addr
.

     DATA : l_tab_docs    LIKE TABLE OF docs WITH HEADER LINE,
           it_pdf_output  LIKE TABLE OF tline WITH HEADER LINE,
           gr_recipient   TYPE REF TO if_recipient_bcs,
           gv_email       TYPE adr6-smtp_addr,
           l_filesize     TYPE tst01-dsize,
           l_tab_lines    TYPE i,
           l_docdata      LIKE sodocchgi1,
           l_objpack      LIKE TABLE OF sopcklsti1 WITH HEADER LINE,
           l_reclist      LIKE TABLE OF somlreci1 WITH HEADER LINE,
           att_type       LIKE sopcklsti1-doc_type,
           l_objbin       LIKE TABLE OF solisti1 WITH HEADER LINE,
           l_objhead      LIKE TABLE OF solisti1 WITH  HEADER LINE,
           l_objtxt       LIKE TABLE OF solisti1 WITH HEADER LINE,
           l_objhex       LIKE TABLE OF solix WITH HEADER LINE,
           it_mess_att    LIKE TABLE OF solisti1 WITH HEADER LINE,
           gd_buffer      TYPE string,
           l_sub(50).

CLEAR : lv_string_mail, lv_string_sub , lv_string_sub_a.
* Clrk's internet - Email ID
  IF ls_intad IS INITIAL.
  SELECT SINGLE intad FROM knb1 INTO ls_intad WHERE kunnr = vbdkr-kunwe.
  ENDIF.

  "create send request
TRY.
lo_send_request = cl_bcs=>create_persistent( ).

CATCH cx_send_req_bcs.
CATCH cx_root.
ENDTRY.

"create message body and subject
APPEND 'Dear User,' TO lt_message_body.
APPEND INITIAL LINE TO lt_message_body.

APPEND 'Good day!'  TO lt_message_body.
APPEND INITIAL LINE TO lt_message_body.

CONCATENATE 'Please find the attached Invoice' vbdkr-vbeln 'for your reference.' INTO lv_string_mail SEPARATED BY space.
APPEND lv_string_mail TO lt_message_body.
CLEAR : lv_string_mail.

APPEND 'If you have further questions, please contact: debtors.ctch@sulzer.com'  TO lt_message_body.
APPEND INITIAL LINE TO lt_message_body.

APPEND 'Thank you and Kind Regards,'  TO lt_message_body.
APPEND 'Debtors Team'  TO lt_message_body.

" Text into the document
CONCATENATE 'Invoice No:' vbdkr-vbeln ':' vbdkr-name1 INTO lv_string_sub   SEPARATED BY space.
CONCATENATE 'Invoice:' vbdkr-vbeln                    INTO lv_string_sub_a SEPARATED BY space.
TRY.
lo_document = cl_document_bcs=>create_document(
                 i_type    = 'RAW'
                 i_text    = lt_message_body
                 i_subject = lv_string_sub ).
                CATCH cx_document_bcs.
ENDTRY.

*--------------------------------------------*
CALL FUNCTION 'CONVERT_OTF_2_PDF'
*--------------------------------------------*
    IMPORTING
      bin_filesize           = l_filesize
    TABLES
      otf                    = otf_data
      doctab_archive         = l_tab_docs
      lines                  = it_pdf_output
    EXCEPTIONS
      err_conv_not_possible  = 1
      err_otf_mc_noendmarker = 2
      OTHERS                 = 3.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

* Transfer the 132-long strings to 255-long strings
  CLEAR : lw_att_content_hex.
  LOOP AT it_pdf_output.
    TRANSLATE it_pdf_output USING ' ~'.
    CONCATENATE gd_buffer it_pdf_output INTO gd_buffer.
  ENDLOOP.
  TRANSLATE gd_buffer USING '~ '.
  DO.
    lw_att_content_hex-line = gd_buffer.
    APPEND lw_att_content_hex TO lt_att_content_hex.
    CLEAR : lw_att_content_hex.

    lw_att_content_text-line = gd_buffer.
    APPEND lw_att_content_text TO lt_att_content_text.
    CLEAR : lw_att_content_text.

    SHIFT gd_buffer LEFT BY 255 PLACES.
    IF gd_buffer IS INITIAL.
      EXIT.
    ENDIF.
  ENDDO.

TRY.
  lo_document->add_attachment(
    EXPORTING
      i_attachment_type    = 'PDF'
      i_attachment_subject = lv_string_sub_a
      i_att_content_text   = lt_att_content_text ).
*      i_att_content_hex    = lt_att_content_hex ).

  CATCH cx_document_bcs INTO lx_document_bcs.
ENDTRY.

* Add attachment
* Pass the document to send request
TRY.
lo_send_request->set_document( lo_document ).
  CATCH cx_send_req_bcs.
ENDTRY.

"Create sender
TRY .
lo_sender = cl_cam_address_bcs=>create_internet_address(
                i_address_string = 'debtors.ctch@sulzer.com'
                i_address_name   = 'Debtors Team'
            ).
CATCH cx_address_bcs.
CATCH cx_root.

ENDTRY.

"Set sender
lo_send_request->set_sender( lo_sender ).

*"Email TO...
TRY.
gv_email = ls_intad.
gr_recipient = cl_cam_address_bcs=>create_internet_address( gv_email ).
                 CATCH cx_address_bcs.
ENDTRY.

"Add recipient to send request
CALL METHOD lo_send_request->add_recipient
EXPORTING
i_recipient = gr_recipient
i_express = 'X'.

* Send email
lo_send_request->send(
  EXPORTING
    i_with_error_screen = 'X'
  RECEIVING
    result = lv_sent_to_all ).

COMMIT WORK.

ENDFORM.
*Insert End CHG0037806 ZAYIDU CEDK963987
*Replace End CHG0037806 ZAYIDU CEDK965059
